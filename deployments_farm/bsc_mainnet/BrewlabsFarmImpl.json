{
  "address": "0x4899e09444f18B04207b8f61beC101f1658D4e76",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenRecovered",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimDividend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Compound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CompoundDividend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "DurationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "EndBlockChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "NewRewardPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "RewardsStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RewardsStop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ServiceInfoChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetAutoAdjustableForRewardRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetRewardFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeAddr",
          "type": "address"
        }
      ],
      "name": "SetSettings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accDividendPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoAdjustableForRewardRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableDividendTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableRewardTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDividend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundDividend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dividendToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyRewardWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawReflections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasDividend",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dividendToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hasDividend",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_deployer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insufficientRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paidRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReflections",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setAutoAdjustableForRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setRewardFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setServiceInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeAddr",
          "type": "address"
        }
      ],
      "name": "setSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniRouter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken1",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_reflectionToToken0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_reflectionToToken1",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setSwapSetting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSettings",
      "outputs": [
        {
          "internalType": "address",
          "name": "swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "transferOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferToHarvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        }
      ],
      "name": "updateEndBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reflectionDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8d779b3ce06cf4e309e6d43a1501ea56b2671fedcd1a63cad6c8d4faf2e1e92a",
  "receipt": {
    "to": null,
    "from": "0xCD3b71D65D1f03F0b2c5a4e67A17347dc71141f7",
    "contractAddress": "0x4899e09444f18B04207b8f61beC101f1658D4e76",
    "transactionIndex": 120,
    "gasUsed": "4326693",
    "logsBloom": "0x
    "blockHash": "0xf8d1c749940ede8a28119cb5f9b515dfba86f4398abfe442457a0877c0c9428b",
    "transactionHash": "0x8d779b3ce06cf4e309e6d43a1501ea56b2671fedcd1a63cad6c8d4faf2e1e92a",
    "logs": [
      {
        "transactionIndex": 120,
        "blockNumber": 28336086,
        "transactionHash": "0x8d779b3ce06cf4e309e6d43a1501ea56b2671fedcd1a63cad6c8d4faf2e1e92a",
        "address": "0x4899e09444f18B04207b8f61beC101f1658D4e76",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cd3b71d65d1f03f0b2c5a4e67a17347dc71141f7"
        ],
        "data": "0x",
        "logIndex": 303,
        "blockHash": "0xf8d1c749940ede8a28119cb5f9b515dfba86f4398abfe442457a0877c0c9428b"
      }
    ],
    "blockNumber": 28336086,
    "cumulativeGasUsed": "15723725",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bd10ea9c6c34aedc02a9aa53ef42df38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompoundDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"DurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"EndBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"RewardsStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ServiceInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetAutoAdjustableForRewardRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetRewardFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddr\",\"type\":\"address\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accDividendPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAdjustableForRewardRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableDividendTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundDividend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dividendToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasDividend\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insufficientRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paidRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAutoAdjustableForRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setServiceInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddr\",\"type\":\"address\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken1\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_reflectionToToken0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_reflectionToToken1\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"updateEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflectionDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256)\":{\"params\":{\"_amount\":\": amount to stake (in lp token)\"}},\"depositRewards(uint256)\":{\"details\":\"Only call by owner. Needs to be for deposit of reward token when reflection token is same with reward token.\"},\"emergencyRewardWithdraw(uint256)\":{\"details\":\"Only callable by owner. Needs to be for emergency.\"},\"emergencyWithdraw()\":{\"details\":\"Needs to be for emergency.\"},\"initialize(address,address,address,uint256,uint256,uint256,uint256,bool,address,address)\":{\"params\":{\"_deployer\":\": owner address\",\"_depositFee\":\": deposit fee\",\"_dividendToken\":\": reflection token address\",\"_hasDividend\":\": reflection available flag\",\"_lpToken\":\": LP address\",\"_owner\":\": owner address\",\"_rewardPerBlock\":\": reward per block (in rewardToken)\",\"_rewardToken\":\": earned token address\",\"_withdrawFee\":\": withdraw fee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingRewards(address)\":{\"params\":{\"_user\":\": user address\"},\"returns\":{\"_0\":\"Pending reward for a given user\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueTokens(address)\":{\"details\":\"This function is only callable by admin.\",\"params\":{\"_token\":\": the address of the token to withdraw\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateEmissionRate(uint256)\":{\"details\":\"Only callable by owner.\",\"params\":{\"_rewardPerBlock\":\": the reward per block\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\": amount to withdraw (in lp token)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"availableDividendTokens()\":{\"notice\":\"Available amount of reflection token\"},\"availableRewardTokens()\":{\"notice\":\"Available amount of reward token\"},\"deposit(uint256)\":{\"notice\":\"Deposit LP tokens and collect reward tokens (if any)\"},\"depositRewards(uint256)\":{\"notice\":\"Deposit reward token\"},\"emergencyRewardWithdraw(uint256)\":{\"notice\":\"Withdraw reward token\"},\"emergencyWithdraw()\":{\"notice\":\"Withdraw staked tokens without caring about rewards\"},\"initialize(address,address,address,uint256,uint256,uint256,uint256,bool,address,address)\":{\"notice\":\"Initialize the contract\"},\"pendingRewards(address)\":{\"notice\":\"View function to see pending reward on frontend.\"},\"rescueTokens(address)\":{\"notice\":\"It allows the admin to recover wrong tokens sent to the contract\"},\"transferToHarvest()\":{\"notice\":\"Admin Methods\"},\"updateEmissionRate(uint256)\":{\"notice\":\"Update reward per block\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw staked lp token and collect reward tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/BrewlabsFarmImpl.sol\":\"BrewlabsFarmImpl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/farm/BrewlabsFarmImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../libs/IUniRouter02.sol\\\";\\r\\nimport \\\"../libs/IWETH.sol\\\";\\r\\n\\r\\ncontract BrewlabsFarmImpl is Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Whether it is initialized\\r\\n    bool private isInitialized;\\r\\n\\r\\n    uint256 private BLOCKS_PER_DAY;\\r\\n    uint256 private PERCENT_PRECISION;\\r\\n    uint256 public PRECISION_FACTOR;\\r\\n    uint256 public MAX_FEE;\\r\\n\\r\\n    // The staked token\\r\\n    IERC20 public lpToken;\\r\\n    IERC20 public rewardToken;\\r\\n    // The dividend token of lpToken token\\r\\n    address public dividendToken;\\r\\n\\r\\n    bool public hasDividend;\\r\\n    bool public autoAdjustableForRewardRate = false;\\r\\n\\r\\n    uint256 public duration;\\r\\n    // The block number when staking starts.\\r\\n    uint256 public startBlock;\\r\\n    // The block number when staking ends.\\r\\n    uint256 public bonusEndBlock;\\r\\n    // tokens created per block.\\r\\n    uint256 public rewardPerBlock;\\r\\n    // The block number of the last pool update\\r\\n    uint256 public lastRewardBlock;\\r\\n    // Accrued token per share\\r\\n    uint256 public accTokenPerShare;\\r\\n    uint256 public accDividendPerShare;\\r\\n    // The deposit & withdraw fee\\r\\n    uint256 public depositFee;\\r\\n    uint256 public withdrawFee;\\r\\n\\r\\n    // service fees\\r\\n    address public feeAddress;\\r\\n    address public treasury;\\r\\n    uint256 public performanceFee;\\r\\n    uint256 public rewardFee;\\r\\n\\r\\n    address public factory;\\r\\n    address public deployer;\\r\\n    address public operator;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many staked lp the user has provided\\r\\n        uint256 rewardDebt; // Reward debt\\r\\n        uint256 reflectionDebt; // Reflection debt\\r\\n    }\\r\\n\\r\\n    // Info of each user that stakes lpToken\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    uint256 public totalStaked;\\r\\n    uint256 private totalEarned;\\r\\n    uint256 private totalReflections;\\r\\n    uint256 private totalRewardStaked;\\r\\n    uint256 private totalReflectionStaked;\\r\\n    uint256 private reflectionDebt;\\r\\n\\r\\n    uint256 public paidRewards;\\r\\n    uint256 private shouldTotalPaid;\\r\\n\\r\\n    // swap router and path\\r\\n    struct SwapSetting {\\r\\n        address swapRouter;\\r\\n        address[] earnedToToken0;\\r\\n        address[] earnedToToken1;\\r\\n        address[] reflectionToToken0;\\r\\n        address[] reflectionToToken1;\\r\\n        bool enabled;\\r\\n    }\\r\\n\\r\\n    SwapSetting public swapSettings;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event Claim(address indexed user, uint256 amount);\\r\\n    event ClaimDividend(address indexed user, uint256 amount);\\r\\n    event Compound(address indexed user, uint256 amount);\\r\\n    event CompoundDividend(address indexed user, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n    event AdminTokenRecovered(address tokenRecovered, uint256 amount);\\r\\n\\r\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\r\\n    event RewardsStart(uint256 startBlock, uint256 endBlock);\\r\\n    event RewardsStop(uint256 blockNumber);\\r\\n    event EndBlockChanged(uint256 blockNumber);\\r\\n\\r\\n    event ServiceInfoChanged(address addr, uint256 fee);\\r\\n    event DurationChanged(uint256 duration);\\r\\n    event SetAutoAdjustableForRewardRate(bool status);\\r\\n    event SetRewardFee(uint256 fee);\\r\\n    event OperatorTransferred(address oldOperator, address newOperator);\\r\\n\\r\\n    event SetSettings(uint256 depositFee, uint256 withdrawFee, address feeAddr);\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == owner() || msg.sender == operator, \\\"caller is not owner or operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize the contract\\r\\n     * @param _lpToken: LP address\\r\\n     * @param _rewardToken: earned token address\\r\\n     * @param _dividendToken: reflection token address\\r\\n     * @param _rewardPerBlock: reward per block (in rewardToken)\\r\\n     * @param _depositFee: deposit fee\\r\\n     * @param _withdrawFee: withdraw fee\\r\\n     * @param _hasDividend: reflection available flag\\r\\n     * @param _owner: owner address\\r\\n     * @param _deployer: owner address\\r\\n     */\\r\\n    function initialize(\\r\\n        IERC20 _lpToken,\\r\\n        IERC20 _rewardToken,\\r\\n        address _dividendToken,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _depositFee,\\r\\n        uint256 _withdrawFee,\\r\\n        uint256 _duration,\\r\\n        bool _hasDividend,\\r\\n        address _owner,\\r\\n        address _deployer\\r\\n    ) external {\\r\\n        require(!isInitialized, \\\"Already initialized\\\");\\r\\n        require(owner() == address(0x0) || msg.sender == owner(), \\\"Not allowed\\\");\\r\\n\\r\\n        // Make this contract initialized\\r\\n        isInitialized = true;\\r\\n\\r\\n        PERCENT_PRECISION = 10000;\\r\\n        BLOCKS_PER_DAY = 28800;\\r\\n        MAX_FEE = 2000;\\r\\n        PRECISION_FACTOR = 10 ** 18;\\r\\n\\r\\n        duration = _duration;\\r\\n        treasury = 0x5Ac58191F3BBDF6D037C6C6201aDC9F99c93C53A;\\r\\n        performanceFee = 0.0035 ether;\\r\\n\\r\\n        lpToken = _lpToken;\\r\\n        rewardToken = _rewardToken;\\r\\n        dividendToken = _dividendToken;\\r\\n\\r\\n        hasDividend = _hasDividend;\\r\\n        rewardPerBlock = _rewardPerBlock;\\r\\n\\r\\n        factory = msg.sender;\\r\\n        deployer = _deployer;\\r\\n        operator = _deployer;\\r\\n\\r\\n        feeAddress = _deployer;\\r\\n\\r\\n        require(_depositFee <= MAX_FEE, \\\"Invalid deposit fee\\\");\\r\\n        require(_withdrawFee <= MAX_FEE, \\\"Invalid withdraw fee\\\");\\r\\n        depositFee = _depositFee;\\r\\n        withdrawFee = _withdrawFee;\\r\\n\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit LP tokens and collect reward tokens (if any)\\r\\n     * @param _amount: amount to stake (in lp token)\\r\\n     */\\r\\n    function deposit(uint256 _amount) external payable nonReentrant {\\r\\n        require(startBlock > 0 && startBlock < block.number, \\\"Farming hasn't started yet\\\");\\r\\n        require(_amount > 0, \\\"Amount should be greator than 0\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _updatePool();\\r\\n\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n            if (pending > 0) {\\r\\n                require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n                paidRewards = paidRewards + pending;\\r\\n\\r\\n                pending = (pending * (PERCENT_PRECISION - rewardFee)) / PERCENT_PRECISION;\\r\\n                rewardToken.safeTransfer(address(msg.sender), pending);\\r\\n                totalEarned = (totalEarned > pending) ? totalEarned - pending : 0;\\r\\n                emit Claim(msg.sender, pending);\\r\\n            }\\r\\n\\r\\n            uint256 pendingReflection = (user.amount * accDividendPerShare) / PRECISION_FACTOR - user.reflectionDebt;\\r\\n            if (pendingReflection > 0 && hasDividend) {\\r\\n                uint256 _pendingReflection = estimateDividendAmount(pendingReflection);\\r\\n                totalReflections -= pendingReflection;\\r\\n                if (address(dividendToken) == address(0x0)) {\\r\\n                    payable(msg.sender).transfer(_pendingReflection);\\r\\n                } else {\\r\\n                    IERC20(dividendToken).safeTransfer(address(msg.sender), _pendingReflection);\\r\\n                }\\r\\n                emit ClaimDividend(msg.sender, _pendingReflection);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 beforeAmt = lpToken.balanceOf(address(this));\\r\\n        lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n        uint256 afterAmt = lpToken.balanceOf(address(this));\\r\\n        uint256 realAmount = afterAmt - beforeAmt;\\r\\n\\r\\n        if (depositFee > 0) {\\r\\n            uint256 fee = (realAmount * depositFee) / PERCENT_PRECISION;\\r\\n            lpToken.safeTransfer(feeAddress, fee);\\r\\n            realAmount -= fee;\\r\\n        }\\r\\n        _calculateTotalStaked(realAmount, true);\\r\\n\\r\\n        user.amount = user.amount + realAmount;\\r\\n        user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n        user.reflectionDebt = (user.amount * accDividendPerShare) / PRECISION_FACTOR;\\r\\n\\r\\n        emit Deposit(msg.sender, realAmount);\\r\\n\\r\\n        if (rewardFee > 0 || autoAdjustableForRewardRate) _updateRewardRate();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw staked lp token and collect reward tokens\\r\\n     * @param _amount: amount to withdraw (in lp token)\\r\\n     */\\r\\n    function withdraw(uint256 _amount) external payable nonReentrant {\\r\\n        require(_amount > 0, \\\"Amount should be greator than 0\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n        if (pending > 0) {\\r\\n            require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n            paidRewards = paidRewards + pending;\\r\\n\\r\\n            pending = (pending * (PERCENT_PRECISION - rewardFee)) / PERCENT_PRECISION;\\r\\n            rewardToken.safeTransfer(address(msg.sender), pending);\\r\\n            totalEarned = (totalEarned > pending) ? totalEarned - pending : 0;\\r\\n            emit Claim(msg.sender, pending);\\r\\n        }\\r\\n\\r\\n        uint256 pendingReflection = (user.amount * accDividendPerShare) / PRECISION_FACTOR - user.reflectionDebt;\\r\\n        if (pendingReflection > 0 && hasDividend) {\\r\\n            uint256 _pendingReflection = estimateDividendAmount(pendingReflection);\\r\\n            totalReflections -= pendingReflection;\\r\\n            if (address(dividendToken) == address(0x0)) {\\r\\n                payable(msg.sender).transfer(_pendingReflection);\\r\\n            } else {\\r\\n                IERC20(dividendToken).safeTransfer(msg.sender, _pendingReflection);\\r\\n            }\\r\\n            emit ClaimDividend(msg.sender, _pendingReflection);\\r\\n        }\\r\\n\\r\\n        if (withdrawFee > 0) {\\r\\n            uint256 fee = (_amount * withdrawFee) / PERCENT_PRECISION;\\r\\n            lpToken.safeTransfer(feeAddress, fee);\\r\\n            lpToken.safeTransfer(msg.sender, _amount - fee);\\r\\n        } else {\\r\\n            lpToken.safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n        _calculateTotalStaked(_amount, false);\\r\\n\\r\\n        user.amount = user.amount - _amount;\\r\\n        user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n        user.reflectionDebt = (user.amount * accDividendPerShare) / PRECISION_FACTOR;\\r\\n        emit Withdraw(msg.sender, _amount);\\r\\n\\r\\n        if (rewardFee > 0 || autoAdjustableForRewardRate) _updateRewardRate();\\r\\n    }\\r\\n\\r\\n    function claimReward() external payable nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        if (user.amount == 0) return;\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n        if (pending > 0) {\\r\\n            require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n            paidRewards = paidRewards + pending;\\r\\n\\r\\n            pending = (pending * (PERCENT_PRECISION - rewardFee)) / PERCENT_PRECISION;\\r\\n            rewardToken.safeTransfer(msg.sender, pending);\\r\\n            totalEarned = (totalEarned > pending) ? totalEarned - pending : 0;\\r\\n            emit Claim(msg.sender, pending);\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n    }\\r\\n\\r\\n    function claimDividend() external payable nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        if (user.amount == 0) return;\\r\\n        if (!hasDividend) return;\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 pendingReflection = (user.amount * accDividendPerShare) / PRECISION_FACTOR - user.reflectionDebt;\\r\\n        if (pendingReflection > 0) {\\r\\n            uint256 _pendingReflection = estimateDividendAmount(pendingReflection);\\r\\n            totalReflections = totalReflections - pendingReflection;\\r\\n            if (address(dividendToken) == address(0x0)) {\\r\\n                payable(msg.sender).transfer(_pendingReflection);\\r\\n            } else {\\r\\n                IERC20(dividendToken).safeTransfer(msg.sender, _pendingReflection);\\r\\n            }\\r\\n            emit ClaimDividend(msg.sender, _pendingReflection);\\r\\n        }\\r\\n\\r\\n        user.reflectionDebt = (user.amount * accDividendPerShare) / PRECISION_FACTOR;\\r\\n    }\\r\\n\\r\\n    function compoundReward() external payable nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        if (user.amount == 0) return;\\r\\n        if (!swapSettings.enabled) return;\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n        if (pending > 0) {\\r\\n            require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n            paidRewards = paidRewards + pending;\\r\\n\\r\\n            pending = (pending * (PERCENT_PRECISION - rewardFee)) / PERCENT_PRECISION;\\r\\n            totalEarned = (totalEarned > pending) ? totalEarned - pending : 0;\\r\\n            emit Compound(msg.sender, pending);\\r\\n\\r\\n            if (address(lpToken) != address(rewardToken)) {\\r\\n                uint256 tokenAmt = pending / 2;\\r\\n                uint256 tokenAmt0 = tokenAmt;\\r\\n                address token0 = address(rewardToken);\\r\\n                if (swapSettings.earnedToToken0.length > 0) {\\r\\n                    token0 = swapSettings.earnedToToken0[swapSettings.earnedToToken0.length - 1];\\r\\n                    tokenAmt0 = _safeSwap(tokenAmt, swapSettings.earnedToToken0, address(this));\\r\\n                }\\r\\n                uint256 tokenAmt1 = tokenAmt;\\r\\n                address token1 = address(rewardToken);\\r\\n                if (swapSettings.earnedToToken1.length > 0) {\\r\\n                    token1 = swapSettings.earnedToToken1[swapSettings.earnedToToken1.length - 1];\\r\\n                    tokenAmt1 = _safeSwap(tokenAmt, swapSettings.earnedToToken1, address(this));\\r\\n                }\\r\\n\\r\\n                uint256 beforeAmt = lpToken.balanceOf(address(this));\\r\\n                _addLiquidity(swapSettings.swapRouter, token0, token1, tokenAmt0, tokenAmt1, address(this));\\r\\n                uint256 afterAmt = lpToken.balanceOf(address(this));\\r\\n\\r\\n                pending = afterAmt - beforeAmt;\\r\\n            }\\r\\n\\r\\n            user.amount = user.amount + pending;\\r\\n            user.rewardDebt = (user.amount * accTokenPerShare) / PERCENT_PRECISION;\\r\\n            user.reflectionDebt = user.reflectionDebt + (pending * accDividendPerShare) / PERCENT_PRECISION;\\r\\n\\r\\n            _calculateTotalStaked(pending, true);\\r\\n            emit Deposit(msg.sender, pending);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function compoundDividend() external payable nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        if (user.amount == 0) return;\\r\\n        if (!hasDividend || !swapSettings.enabled) return;\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 _pending = (user.amount * accDividendPerShare) / PRECISION_FACTOR - user.reflectionDebt;\\r\\n        totalReflections = totalReflections - _pending;\\r\\n        uint256 pending = estimateDividendAmount(_pending);\\r\\n        if (pending > 0) {\\r\\n            emit CompoundDividend(msg.sender, pending);\\r\\n\\r\\n            if (address(lpToken) != address(dividendToken)) {\\r\\n                if (address(dividendToken) == address(0x0)) {\\r\\n                    address wethAddress = IUniRouter02(swapSettings.swapRouter).WETH();\\r\\n                    IWETH(wethAddress).deposit{value: pending}();\\r\\n                }\\r\\n\\r\\n                uint256 tokenAmt = pending / 2;\\r\\n                uint256 tokenAmt0 = tokenAmt;\\r\\n                address token0 = dividendToken;\\r\\n                if (swapSettings.reflectionToToken0.length > 0) {\\r\\n                    token0 = swapSettings.reflectionToToken0[swapSettings.reflectionToToken0.length - 1];\\r\\n                    tokenAmt0 = _safeSwap(tokenAmt, swapSettings.reflectionToToken0, address(this));\\r\\n                }\\r\\n                uint256 tokenAmt1 = tokenAmt;\\r\\n                address token1 = dividendToken;\\r\\n                if (swapSettings.reflectionToToken1.length > 0) {\\r\\n                    token0 = swapSettings.reflectionToToken1[swapSettings.reflectionToToken1.length - 1];\\r\\n                    tokenAmt1 = _safeSwap(tokenAmt, swapSettings.reflectionToToken1, address(this));\\r\\n                }\\r\\n\\r\\n                uint256 beforeAmt = lpToken.balanceOf(address(this));\\r\\n                _addLiquidity(swapSettings.swapRouter, token0, token1, tokenAmt0, tokenAmt1, address(this));\\r\\n                uint256 afterAmt = lpToken.balanceOf(address(this));\\r\\n\\r\\n                pending = afterAmt - beforeAmt;\\r\\n            }\\r\\n\\r\\n            user.amount = user.amount + pending;\\r\\n            user.rewardDebt = user.rewardDebt + (pending * accTokenPerShare) / PRECISION_FACTOR;\\r\\n            user.reflectionDebt = (user.amount * accDividendPerShare) / PRECISION_FACTOR;\\r\\n\\r\\n            _calculateTotalStaked(pending, true);\\r\\n            emit Deposit(msg.sender, pending);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferPerformanceFee() internal {\\r\\n        require(msg.value >= performanceFee, \\\"should pay small gas to compound or harvest\\\");\\r\\n\\r\\n        payable(treasury).transfer(performanceFee);\\r\\n        if (msg.value > performanceFee) {\\r\\n            payable(msg.sender).transfer(msg.value - performanceFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calculateTotalStaked(uint256 _amount, bool _deposit) internal {\\r\\n        if (_deposit) {\\r\\n            totalStaked = totalStaked + _amount;\\r\\n            if (address(lpToken) == address(rewardToken)) {\\r\\n                totalRewardStaked = totalRewardStaked + _amount;\\r\\n            }\\r\\n            if (address(lpToken) == dividendToken) {\\r\\n                totalReflectionStaked = totalReflectionStaked + _amount;\\r\\n            }\\r\\n        } else {\\r\\n            totalStaked = totalStaked - _amount;\\r\\n            if (address(lpToken) == address(rewardToken)) {\\r\\n                totalRewardStaked = (totalRewardStaked > _amount) ? totalRewardStaked - _amount : 0;\\r\\n            }\\r\\n            if (address(lpToken) == dividendToken) {\\r\\n                totalReflectionStaked = (totalReflectionStaked > _amount) ? totalReflectionStaked - _amount : 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw staked tokens without caring about rewards\\r\\n     * @dev Needs to be for emergency.\\r\\n     */\\r\\n    function emergencyWithdraw() external nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        if (user.amount == 0) return;\\r\\n\\r\\n        uint256 amountToTransfer = user.amount;\\r\\n        lpToken.safeTransfer(address(msg.sender), amountToTransfer);\\r\\n\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.reflectionDebt = 0;\\r\\n\\r\\n        _calculateTotalStaked(amountToTransfer, false);\\r\\n        emit EmergencyWithdraw(msg.sender, amountToTransfer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Available amount of reward token\\r\\n     */\\r\\n    function availableRewardTokens() public view returns (uint256) {\\r\\n        if (address(rewardToken) == dividendToken && hasDividend) return totalEarned;\\r\\n\\r\\n        uint256 _amount = rewardToken.balanceOf(address(this));\\r\\n        return _amount - totalRewardStaked;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Available amount of reflection token\\r\\n     */\\r\\n    function availableDividendTokens() public view returns (uint256) {\\r\\n        if (hasDividend == false) return 0;\\r\\n        if (dividendToken == address(0x0)) {\\r\\n            return address(this).balance;\\r\\n        }\\r\\n\\r\\n        uint256 _amount = IERC20(dividendToken).balanceOf(address(this));\\r\\n        if (dividendToken == address(rewardToken)) {\\r\\n            if (_amount < totalEarned) return 0;\\r\\n            _amount = _amount - totalEarned;\\r\\n        }\\r\\n        return _amount - totalReflectionStaked;\\r\\n    }\\r\\n\\r\\n    function insufficientRewards() public view returns (uint256) {\\r\\n        uint256 adjustedShouldTotalPaid = shouldTotalPaid;\\r\\n        uint256 remainRewards = availableRewardTokens() + paidRewards;\\r\\n\\r\\n        if (startBlock == 0) {\\r\\n            adjustedShouldTotalPaid = adjustedShouldTotalPaid + rewardPerBlock * duration * BLOCKS_PER_DAY;\\r\\n        } else {\\r\\n            uint256 remainBlocks = _getMultiplier(lastRewardBlock, bonusEndBlock);\\r\\n            adjustedShouldTotalPaid = adjustedShouldTotalPaid + rewardPerBlock * remainBlocks;\\r\\n        }\\r\\n\\r\\n        if (remainRewards >= adjustedShouldTotalPaid) return 0;\\r\\n\\r\\n        return adjustedShouldTotalPaid - remainRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View function to see pending reward on frontend.\\r\\n     * @param _user: user address\\r\\n     * @return Pending reward for a given user\\r\\n     */\\r\\n    function pendingRewards(address _user) external view returns (uint256) {\\r\\n        UserInfo memory user = userInfo[_user];\\r\\n\\r\\n        uint256 adjustedTokenPerShare = accTokenPerShare;\\r\\n        if (block.number > lastRewardBlock && totalStaked != 0 && lastRewardBlock > 0) {\\r\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n            uint256 rewards = multiplier * rewardPerBlock;\\r\\n\\r\\n            adjustedTokenPerShare = accTokenPerShare + ((rewards * PRECISION_FACTOR) / totalStaked);\\r\\n        }\\r\\n\\r\\n        return (user.amount * adjustedTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n    }\\r\\n\\r\\n    function pendingReflections(address _user) external view returns (uint256) {\\r\\n        if (totalStaked == 0) return 0;\\r\\n\\r\\n        UserInfo memory user = userInfo[_user];\\r\\n\\r\\n        uint256 reflectionAmount = availableDividendTokens();\\r\\n        reflectionAmount = (reflectionAmount > totalReflections) ? reflectionAmount - totalReflections : 0;\\r\\n\\r\\n        uint256 adjustedReflectionPerShare = accDividendPerShare + ((reflectionAmount * PRECISION_FACTOR) / totalStaked);\\r\\n\\r\\n        uint256 pendingReflection = (user.amount * adjustedReflectionPerShare) / PRECISION_FACTOR - user.reflectionDebt;\\r\\n\\r\\n        return pendingReflection;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Admin Methods\\r\\n     */\\r\\n    function transferToHarvest() external onlyOwner {\\r\\n        if (hasDividend || address(rewardToken) == dividendToken) return;\\r\\n\\r\\n        if (dividendToken == address(0x0)) {\\r\\n            payable(treasury).transfer(address(this).balance);\\r\\n        } else {\\r\\n            uint256 _amount = IERC20(dividendToken).balanceOf(address(this));\\r\\n            IERC20(dividendToken).safeTransfer(treasury, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit reward token\\r\\n     * @dev Only call by owner. Needs to be for deposit of reward token when reflection token is same with reward token.\\r\\n     */\\r\\n    function depositRewards(uint256 _amount) external onlyAdmin nonReentrant {\\r\\n        require(_amount > 0, \\\"invalid amount\\\");\\r\\n\\r\\n        uint256 beforeAmt = rewardToken.balanceOf(address(this));\\r\\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 afterAmt = rewardToken.balanceOf(address(this));\\r\\n\\r\\n        totalEarned = totalEarned + afterAmt - beforeAmt;\\r\\n    }\\r\\n\\r\\n    function increaseEmissionRate(uint256 _amount) external onlyOwner {\\r\\n        require(_amount > 0, \\\"invalid amount\\\");\\r\\n        require(startBlock > 0, \\\"pool is not started\\\");\\r\\n        require(bonusEndBlock > block.number, \\\"pool was already finished\\\");\\r\\n\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 beforeAmt = rewardToken.balanceOf(address(this));\\r\\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 afterAmt = rewardToken.balanceOf(address(this));\\r\\n\\r\\n        totalEarned = totalEarned + afterAmt - beforeAmt;\\r\\n        _updateRewardRate();\\r\\n    }\\r\\n\\r\\n    function _updateRewardRate() internal {\\r\\n        if (bonusEndBlock <= block.number) return;\\r\\n\\r\\n        uint256 remainRewards = availableRewardTokens() + paidRewards;\\r\\n        if (remainRewards > shouldTotalPaid) {\\r\\n            remainRewards = remainRewards - shouldTotalPaid;\\r\\n\\r\\n            uint256 remainBlocks = bonusEndBlock - block.number;\\r\\n            rewardPerBlock = remainRewards / remainBlocks;\\r\\n            emit NewRewardPerBlock(rewardPerBlock);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw reward token\\r\\n     * @dev Only callable by owner. Needs to be for emergency.\\r\\n     */\\r\\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\\r\\n        require(block.number > bonusEndBlock, \\\"Pool is running\\\");\\r\\n        require(availableRewardTokens() >= _amount, \\\"Insufficient reward tokens\\\");\\r\\n\\r\\n        if (_amount == 0) _amount = availableRewardTokens();\\r\\n        rewardToken.safeTransfer(address(msg.sender), _amount);\\r\\n\\r\\n        totalEarned = (totalEarned > _amount) ? totalEarned - _amount : 0;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawReflections() external onlyOwner {\\r\\n        if (dividendToken == address(0x0)) {\\r\\n            uint256 amount = address(this).balance;\\r\\n            payable(address(msg.sender)).transfer(amount);\\r\\n        } else {\\r\\n            uint256 amount = IERC20(dividendToken).balanceOf(address(this));\\r\\n            IERC20(dividendToken).transfer(msg.sender, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\r\\n     * @param _token: the address of the token to withdraw\\r\\n     * @dev This function is only callable by admin.\\r\\n     */\\r\\n    function rescueTokens(address _token) external onlyOwner {\\r\\n        require(\\r\\n            _token != address(rewardToken) && _token != dividendToken, \\\"cannot recover reward token or reflection token\\\"\\r\\n        );\\r\\n        require(_token != address(lpToken), \\\"token is using on pool\\\");\\r\\n\\r\\n        uint256 amount;\\r\\n        if (_token == address(0x0)) {\\r\\n            amount = address(this).balance;\\r\\n            payable(address(msg.sender)).transfer(amount);\\r\\n        } else {\\r\\n            amount = IERC20(_token).balanceOf(address(this));\\r\\n            if (amount > 0) {\\r\\n                IERC20(_token).transfer(msg.sender, amount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit AdminTokenRecovered(_token, amount);\\r\\n    }\\r\\n\\r\\n    function startReward() external onlyAdmin {\\r\\n        require(startBlock == 0, \\\"Pool was already started\\\");\\r\\n        require(insufficientRewards() == 0, \\\"All reward tokens have not been deposited\\\");\\r\\n\\r\\n        startBlock = block.number + 100;\\r\\n        bonusEndBlock = startBlock + duration * BLOCKS_PER_DAY;\\r\\n        lastRewardBlock = startBlock;\\r\\n\\r\\n        emit RewardsStart(startBlock, bonusEndBlock);\\r\\n    }\\r\\n\\r\\n    function stopReward() external onlyAdmin {\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 remainRewards = availableRewardTokens() + paidRewards;\\r\\n        if (remainRewards > shouldTotalPaid) {\\r\\n            remainRewards = remainRewards - shouldTotalPaid;\\r\\n            rewardToken.transfer(msg.sender, remainRewards);\\r\\n\\r\\n            totalEarned = (totalEarned > remainRewards) ? totalEarned - remainRewards : 0;\\r\\n        }\\r\\n\\r\\n        bonusEndBlock = block.number;\\r\\n        emit RewardsStop(bonusEndBlock);\\r\\n    }\\r\\n\\r\\n    function updateEndBlock(uint256 _endBlock) external onlyAdmin {\\r\\n        require(startBlock > 0, \\\"Pool is not started\\\");\\r\\n        require(bonusEndBlock > block.number, \\\"Pool was already finished\\\");\\r\\n        require(_endBlock > block.number && _endBlock > startBlock, \\\"Invalid end block\\\");\\r\\n        bonusEndBlock = _endBlock;\\r\\n        emit EndBlockChanged(_endBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward per block\\r\\n     * @dev Only callable by owner.\\r\\n     * @param _rewardPerBlock: the reward per block\\r\\n     */\\r\\n    function updateEmissionRate(uint256 _rewardPerBlock) external onlyOwner {\\r\\n        _updatePool();\\r\\n\\r\\n        rewardPerBlock = _rewardPerBlock;\\r\\n        emit NewRewardPerBlock(_rewardPerBlock);\\r\\n    }\\r\\n\\r\\n    function setServiceInfo(address _treasury, uint256 _fee) external {\\r\\n        require(msg.sender == treasury, \\\"setServiceInfo: FORBIDDEN\\\");\\r\\n        require(_treasury != address(0x0), \\\"Invalid address\\\");\\r\\n\\r\\n        treasury = _treasury;\\r\\n        performanceFee = _fee;\\r\\n\\r\\n        emit ServiceInfoChanged(_treasury, _fee);\\r\\n    }\\r\\n\\r\\n    function setDuration(uint256 _duration) external onlyOwner {\\r\\n        require(_duration >= 30, \\\"lower limit reached\\\");\\r\\n\\r\\n        duration = _duration;\\r\\n        emit DurationChanged(_duration);\\r\\n\\r\\n        if (startBlock > 0) {\\r\\n            bonusEndBlock = startBlock + duration * BLOCKS_PER_DAY;\\r\\n            require(bonusEndBlock > block.number, \\\"invalid duration\\\");\\r\\n            emit EndBlockChanged(bonusEndBlock);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setRewardFee(uint256 _fee) external onlyOwner {\\r\\n        require(_fee < PERCENT_PRECISION, \\\"setRewardFee: invalid percentage\\\");\\r\\n\\r\\n        rewardFee = _fee;\\r\\n        emit SetRewardFee(_fee);\\r\\n    }\\r\\n\\r\\n    function setAutoAdjustableForRewardRate(bool _status) external onlyOwner {\\r\\n        autoAdjustableForRewardRate = _status;\\r\\n        emit SetAutoAdjustableForRewardRate(_status);\\r\\n    }\\r\\n\\r\\n    function transferOperator(address _operator) external onlyAdmin {\\r\\n        require(_operator != address(0x0), \\\"invalid address\\\");\\r\\n        emit OperatorTransferred(operator, _operator);\\r\\n        operator = _operator;\\r\\n    }\\r\\n\\r\\n    function setSettings(uint256 _depositFee, uint256 _withdrawFee, address _feeAddr) external onlyOwner {\\r\\n        require(_feeAddr != address(0x0) || _feeAddr != feeAddress, \\\"Invalid address\\\");\\r\\n        require(_depositFee <= MAX_FEE, \\\"Invalid deposit fee\\\");\\r\\n        require(_withdrawFee <= MAX_FEE, \\\"Invalid withdraw fee\\\");\\r\\n\\r\\n        depositFee = _depositFee;\\r\\n        withdrawFee = _withdrawFee;\\r\\n\\r\\n        feeAddress = _feeAddr;\\r\\n        emit SetSettings(_depositFee, _withdrawFee, _feeAddr);\\r\\n    }\\r\\n\\r\\n    // Update the given pool's compound parameters. Can only be called by the owner.\\r\\n    function setSwapSetting(\\r\\n        address _uniRouter,\\r\\n        address[] memory _earnedToToken0,\\r\\n        address[] memory _earnedToToken1,\\r\\n        address[] memory _reflectionToToken0,\\r\\n        address[] memory _reflectionToToken1,\\r\\n        bool _enabled\\r\\n    ) external onlyOwner {\\r\\n        swapSettings.enabled = _enabled;\\r\\n        swapSettings.swapRouter = _uniRouter;\\r\\n        swapSettings.earnedToToken0 = _earnedToToken0;\\r\\n        swapSettings.earnedToToken1 = _earnedToToken1;\\r\\n        swapSettings.reflectionToToken0 = _reflectionToToken0;\\r\\n        swapSettings.reflectionToToken1 = _reflectionToToken1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables of the given pool to be up-to-date.\\r\\n     */\\r\\n    function _updatePool() internal {\\r\\n        if (block.number <= lastRewardBlock || lastRewardBlock == 0) return;\\r\\n        if (totalStaked == 0) {\\r\\n            lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // calc reflection rate\\r\\n        if (totalStaked > 0 && hasDividend) {\\r\\n            uint256 reflectionAmount = availableDividendTokens();\\r\\n            reflectionAmount = (reflectionAmount > totalReflections) ? reflectionAmount - totalReflections : 0;\\r\\n\\r\\n            accDividendPerShare += (reflectionAmount * PRECISION_FACTOR) / totalStaked;\\r\\n            totalReflections += reflectionAmount;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n        uint256 _reward = multiplier * rewardPerBlock;\\r\\n        accTokenPerShare += (_reward * PRECISION_FACTOR) / totalStaked;\\r\\n\\r\\n        lastRewardBlock = block.number;\\r\\n        shouldTotalPaid = shouldTotalPaid + _reward;\\r\\n    }\\r\\n\\r\\n    function estimateDividendAmount(uint256 amount) internal view returns (uint256) {\\r\\n        uint256 dTokenBal = availableDividendTokens();\\r\\n        if (amount > totalReflections) amount = totalReflections;\\r\\n        if (amount > dTokenBal) amount = dTokenBal;\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return reward multiplier over the given _from to _to block.\\r\\n     * @param _from: block to start\\r\\n     * @param _to: block to finish\\r\\n     */\\r\\n    function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\\r\\n        if (_to <= bonusEndBlock) {\\r\\n            return _to - _from;\\r\\n        } else if (_from >= bonusEndBlock) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return bonusEndBlock - _from;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _safeSwap(uint256 _amountIn, address[] memory _path, address _to) internal returns (uint256) {\\r\\n        uint256 beforeAmt = IERC20(_path[_path.length - 1]).balanceOf(address(this));\\r\\n\\r\\n        IERC20(_path[0]).safeApprove(swapSettings.swapRouter, _amountIn);\\r\\n        IUniRouter02(swapSettings.swapRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            _amountIn, 0, _path, _to, block.timestamp + 600\\r\\n        );\\r\\n        uint256 afterAmt = IERC20(_path[_path.length - 1]).balanceOf(address(this));\\r\\n        return afterAmt - beforeAmt;\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(\\r\\n        address _uniRouter,\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        uint256 _tokenAmt0,\\r\\n        uint256 _tokenAmt1,\\r\\n        address _to\\r\\n    ) internal returns (uint256 amountA, uint256 amountB, uint256 liquidity) {\\r\\n        IERC20(_token0).safeIncreaseAllowance(_uniRouter, _tokenAmt0);\\r\\n        IERC20(_token1).safeIncreaseAllowance(_uniRouter, _tokenAmt1);\\r\\n\\r\\n        (amountA, amountB, liquidity) = IUniRouter02(_uniRouter).addLiquidity(\\r\\n            _token0, _token1, _tokenAmt0, _tokenAmt1, 0, 0, _to, block.timestamp + 600\\r\\n        );\\r\\n\\r\\n        IERC20(_token0).safeApprove(_uniRouter, uint256(0));\\r\\n        IERC20(_token1).safeApprove(_uniRouter, uint256(0));\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xdfe0ddbe63c445dc2ce89241756882301b275d1566d6bca003b4ae3ad17d2500\",\"license\":\"MIT\"},\"contracts/libs/IUniRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)\\n        external\\n        pure\\n        returns (uint256 amountOut);\\n\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)\\n        external\\n        pure\\n        returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x7045daa7451da292c4964be9202a14ba5404fe9eb9b4654ce47ceb9b0535de74\",\"license\":\"MIT\"},\"contracts/libs/IUniRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IUniRouter01.sol\\\";\\n\\ninterface IUniRouter02 is IUniRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7cab8b2d1f9bcc5c1944023b1755b3c73ffec7ed04a4801e565a58fc1eb7555e\",\"license\":\"MIT\"},\"contracts/libs/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x0c67ca1a5f9148aba05eb0ed20f5c5cc9c82a9be7d43196d7f03adafc08d6866\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526009805460ff60a81b191690553480156200001e57600080fd5b506200002a3362000034565b6001805562000084565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614c7580620000946000396000f3fe6080604052600436106103195760003560e01c8063817b1cd21161019c578063b8768b4c116100e2578063db2e21bc11610090578063db2e21bc146108f0578063e941fa7814610905578063f0fc6bca1461091b578063f2fde38b14610923578063f3aeb31d14610943578063f4ef5ed514610958578063f6be71d114610978578063f7c618c11461099857600080fd5b8063b8768b4c1461083c578063b88a802f1461085c578063bc063e1a14610864578063c45a01551461087a578063ccd34cd51461089a578063cd635cce146108b0578063d5f39488146108d057600080fd5b80638da5cb5b1161014a5780638da5cb5b1461077c5780638f6629151461079157806392b46e5b146107a75780639e4bf910146107bd5780639f94e272146107dd578063a5bfd0f2146107f2578063a9f8d18114610813578063b6b55f251461082957600080fd5b8063817b1cd2146106ce57806381b61948146106e457806383f07ea814610704578063877887821461071a5780638ae39cac146107305780638b424267146107465780638bdf67f21461075c57600080fd5b806348cd4cb11161026157806367a527931161020f57806367a527931461061c578063695d69b3146106325780636d971a1014610652578063715018a61461065a578063746c8ae11461066f578063766e8098146106845780637f416bbe1461069957806380dc0672146106b957600080fd5b806348cd4cb1146105435780634de8ff2114610559578063570ca735146105615780635dde4a91146105815780635e8b5ae3146105965780635fcbd285146105dc57806361d027b3146105fc57600080fd5b80631aed6553116102c95780631aed655314610449578063249375671461045f57806329605e77146104905780632e1a7d4d146104b057806331d7a262146104c35780633279beab146104e3578063412753581461050357806341a2ac701461052357600080fd5b80626f023114610325578062ae3bf814610347578063015d5238146103675780630ba84cd21461037c5780630fb5a6b41461039c5780631582358e146103c55780631959a002146103f257600080fd5b3661032057005b600080fd5b34801561033157600080fd5b5061034561034036600461451b565b6109b8565b005b34801561035357600080fd5b50610345610362366004614559565b610b2f565b34801561037357600080fd5b50610345610d89565b34801561038857600080fd5b5061034561039736600461451b565b610ebe565b3480156103a857600080fd5b506103b2600a5481565b6040519081526020015b60405180910390f35b3480156103d157600080fd5b506009546103e5906001600160a01b031681565b6040516103bc919061457d565b3480156103fe57600080fd5b5061042e61040d366004614559565b601a6020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016103bc565b34801561045557600080fd5b506103b2600c5481565b34801561046b57600080fd5b5060095461048090600160a81b900460ff1681565b60405190151581526020016103bc565b34801561049c57600080fd5b506103456104ab366004614559565b610f03565b6103456104be36600461451b565b611001565b3480156104cf57600080fd5b506103b26104de366004614559565b6113ca565b3480156104ef57600080fd5b506103456104fe36600461451b565b6114ad565b34801561050f57600080fd5b506013546103e5906001600160a01b031681565b34801561052f57600080fd5b5061034561053e36600461451b565b61156d565b34801561054f57600080fd5b506103b2600b5481565b6103456115fb565b34801561056d57600080fd5b506019546103e5906001600160a01b031681565b34801561058d57600080fd5b506103b2611b03565b3480156105a257600080fd5b506023546028546105bd916001600160a01b03169060ff1682565b604080516001600160a01b0390931683529015156020830152016103bc565b3480156105e857600080fd5b506007546103e5906001600160a01b031681565b34801561060857600080fd5b506014546103e5906001600160a01b031681565b34801561062857600080fd5b506103b260115481565b34801561063e57600080fd5b506103b261064d366004614559565b611bf8565b610345611cd5565b34801561066657600080fd5b5061034561214f565b34801561067b57600080fd5b50610345612161565b34801561069057600080fd5b506103456122d8565b3480156106a557600080fd5b506103456106b4366004614591565b6123e7565b3480156106c557600080fd5b506103456124e3565b3480156106da57600080fd5b506103b2601b5481565b3480156106f057600080fd5b506103456106ff3660046145ca565b612637565b34801561071057600080fd5b506103b260215481565b34801561072657600080fd5b506103b260155481565b34801561073c57600080fd5b506103b2600d5481565b34801561075257600080fd5b506103b260165481565b34801561076857600080fd5b5061034561077736600461451b565b612705565b34801561078857600080fd5b506103e56128a0565b34801561079d57600080fd5b506103b2600f5481565b3480156107b357600080fd5b506103b260105481565b3480156107c957600080fd5b506103456107d83660046146bc565b6128af565b3480156107e957600080fd5b506103b2612938565b3480156107fe57600080fd5b5060095461048090600160a01b900460ff1681565b34801561081f57600080fd5b506103b2600e5481565b61034561083736600461451b565b6129f2565b34801561084857600080fd5b50610345610857366004614789565b612e9f565b610345613096565b34801561087057600080fd5b506103b260065481565b34801561088657600080fd5b506017546103e5906001600160a01b031681565b3480156108a657600080fd5b506103b260055481565b3480156108bc57600080fd5b506103456108cb366004614835565b6131e6565b3480156108dc57600080fd5b506018546103e5906001600160a01b031681565b3480156108fc57600080fd5b5061034561323b565b34801561091157600080fd5b506103b260125481565b6103456132ca565b34801561092f57600080fd5b5061034561093e366004614559565b61341b565b34801561094f57600080fd5b506103b2613491565b34801561096457600080fd5b5061034561097336600461451b565b613539565b34801561098457600080fd5b5061034561099336600461451b565b613728565b3480156109a457600080fd5b506008546103e5906001600160a01b031681565b6109c06128a0565b6001600160a01b0316336001600160a01b031614806109e957506019546001600160a01b031633145b610a0e5760405162461bcd60e51b8152600401610a0590614852565b60405180910390fd5b6000600b5411610a565760405162461bcd60e51b8152602060048201526013602482015272141bdbdb081a5cc81b9bdd081cdd185c9d1959606a1b6044820152606401610a05565b43600c5411610aa35760405162461bcd60e51b8152602060048201526019602482015278141bdbdb081dd85cc8185b1c9958591e48199a5b9a5cda1959603a1b6044820152606401610a05565b4381118015610ab35750600b5481115b610af35760405162461bcd60e51b8152602060048201526011602482015270496e76616c696420656e6420626c6f636b60781b6044820152606401610a05565b600c8190556040518181527fbefee04945bd96d1a11e3459d8981d8eaaeb1c5d866352d4412247a8d1e370a1906020015b60405180910390a150565b610b3761384d565b6008546001600160a01b03828116911614801590610b6357506009546001600160a01b03828116911614155b610bc75760405162461bcd60e51b815260206004820152602f60248201527f63616e6e6f74207265636f7665722072657761726420746f6b656e206f72207260448201526e32b33632b1ba34b7b7103a37b5b2b760891b6064820152608401610a05565b6007546001600160a01b0390811690821603610c1e5760405162461bcd60e51b81526020600482015260166024820152751d1bdad95b881a5cc81d5cda5b99c81bdb881c1bdbdb60521b6044820152606401610a05565b60006001600160a01b038216610c6457506040514790339082156108fc029083906000818181858888f19350505050158015610c5e573d6000803e3d6000fd5b50610d4c565b6040516370a0823160e01b81526001600160a01b038316906370a0823190610c9090309060040161457d565b602060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190614889565b90508015610d4c5760405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610d0790339085906004016148a2565b6020604051808303816000875af1158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a91906148bb565b505b7f74f5dcd55c394cb1c6d3b9da22c2464bcc46c38cc3865bd629ed75823249b40b8282604051610d7d9291906148a2565b60405180910390a15050565b610d9161384d565b6009546001600160a01b0316610dd4576040514790339082156108fc029083906000818181858888f19350505050158015610dd0573d6000803e3d6000fd5b5050565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610e0590309060040161457d565b602060405180830381865afa158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e469190614889565b60095460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610e7990339085906004016148a2565b6020604051808303816000875af1158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd091906148bb565b565b610ec661384d565b610ece6138ac565b600d8190556040518181527f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df90602001610b24565b610f0b6128a0565b6001600160a01b0316336001600160a01b03161480610f3457506019546001600160a01b031633145b610f505760405162461bcd60e51b8152600401610a0590614852565b6001600160a01b038116610f985760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b6044820152606401610a05565b6019546040517f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed91610fd7916001600160a01b039091169084906148d8565b60405180910390a1601980546001600160a01b0319166001600160a01b0392909216919091179055565b6110096139d7565b600081116110295760405162461bcd60e51b8152600401610a05906148f2565b336000908152601a6020526040902080548211156110895760405162461bcd60e51b815260206004820152601b60248201527f416d6f756e7420746f20776974686472617720746f6f206869676800000000006044820152606401610a05565b611091613a30565b6110996138ac565b60008160010154600554600f5484600001546110b5919061493f565b6110bf919061495e565b6110c99190614980565b9050801561118c57806110da612938565b10156110f85760405162461bcd60e51b8152600401610a0590614997565b8060215461110691906149ce565b6021556004546016546111199082614980565b611123908361493f565b61112d919061495e565b600854909150611147906001600160a01b03163383613b18565b80601c5411611157576000611165565b80601c546111659190614980565b601c556040518181523390600080516020614c208339815191529060200160405180910390a25b6000826002015460055460105485600001546111a8919061493f565b6111b2919061495e565b6111bc9190614980565b90506000811180156111d75750600954600160a01b900460ff165b1561127f5760006111e782613b6e565b905081601d60008282546111fb9190614980565b90915550506009546001600160a01b031661124357604051339082156108fc029083906000818181858888f1935050505015801561123d573d6000803e3d6000fd5b5061125a565b60095461125a906001600160a01b03163383613b18565b6040518181523390600080516020614c008339815191529060200160405180910390a2505b601254156112eb5760006004546012548661129a919061493f565b6112a4919061495e565b6013546007549192506112c4916001600160a01b03908116911683613b18565b6112e5336112d28388614980565b6007546001600160a01b03169190613b18565b50611302565b600754611302906001600160a01b03163386613b18565b61130d846000613b9e565b825461131a908590614980565b808455600554600f54909161132f919061493f565b611339919061495e565b60018401556005546010548454611350919061493f565b61135a919061495e565b600284015560405184815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a2600060165411806113ae5750600954600160a81b900460ff165b156113bb576113bb613c8d565b5050506113c760018055565b50565b6001600160a01b0381166000908152601a602090815260408083208151606081018352815481526001820154938101939093526002015490820152600f54600e544311801561141a5750601b5415155b801561142857506000600e54115b1561147c57600061143b600e5443613d1b565b90506000600d548261144d919061493f565b9050601b5460055482611460919061493f565b61146a919061495e565b600f5461147791906149ce565b925050505b6020820151600554835161149190849061493f565b61149b919061495e565b6114a59190614980565b949350505050565b6114b561384d565b600c5443116114f85760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c2069732072756e6e696e6760881b6044820152606401610a05565b80611501612938565b101561151f5760405162461bcd60e51b8152600401610a0590614997565b806000036115325761152f612938565b90505b600854611549906001600160a01b03163383613b18565b80601c5411611559576000611567565b80601c546115679190614980565b601c5550565b61157561384d565b60045481106115c65760405162461bcd60e51b815260206004820181905260248201527f7365745265776172644665653a20696e76616c69642070657263656e746167656044820152606401610a05565b60168190556040518181527f8241a79c714425e571a9f1686404d094a6271d36603bfbff7341608c35cba26990602001610b24565b6116036139d7565b336000908152601a6020526040812080549091036116215750611afa565b600954600160a01b900460ff16158061163d575060285460ff16155b156116485750611afa565b611650613a30565b6116586138ac565b600081600201546005546010548460000154611674919061493f565b61167e919061495e565b6116889190614980565b905080601d546116989190614980565b601d5560006116a682613b6e565b90508015611af65760405181815233907ff9722679209533efd96d367c2e6ca7c5189dd230e85badc0b61875f352d6c9149060200160405180910390a26009546007546001600160a01b03908116911614611a69576009546001600160a01b03166117d157602354604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa158015611755573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177991906149e6565b9050806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117b657600080fd5b505af11580156117ca573d6000803e3d6000fd5b5050505050505b60006117de60028361495e565b60095460265491925082916001600160a01b039091169015611899576026805461180a90600190614980565b8154811061181a5761181a614a03565b600091825260209182902001546026805460408051828602810186019091528181526001600160a01b03909316945061189693879392919083018282801561188b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161186d575b505050505030613d5c565b91505b60095460275484916001600160a01b0316901561194d57602780546118c090600190614980565b815481106118d0576118d0614a03565b600091825260209182902001546027805460408051828602810186019091528181526001600160a01b03909316965061194a93899392919083018282801561188b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161186d57505050505030613d5c565b91505b6007546040516370a0823160e01b81526000916001600160a01b0316906370a082319061197e90309060040161457d565b602060405180830381865afa15801561199b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bf9190614889565b6023549091506119dc906001600160a01b03168584888730613f52565b50506007546040516370a0823160e01b8152600092506001600160a01b03909116906370a0823190611a1290309060040161457d565b602060405180830381865afa158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a539190614889565b9050611a5f8282614980565b9750505050505050505b8254611a769082906149ce565b8355600554600f54611a88908361493f565b611a92919061495e565b8360010154611aa191906149ce565b60018401556005546010548454611ab8919061493f565b611ac2919061495e565b6002840155611ad2816001613b9e565b6040518181523390600080516020614be08339815191529060200160405180910390a25b5050505b610ebc60018055565b600954600090600160a01b900460ff1615158103611b215750600090565b6009546001600160a01b0316611b3657504790565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611b6790309060040161457d565b602060405180830381865afa158015611b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba89190614889565b6008546009549192506001600160a01b03908116911603611be557601c54811015611bd557600091505090565b601c54611be29082614980565b90505b601f54611bf29082614980565b91505090565b6000601b54600003611c0c57506000919050565b6001600160a01b0382166000908152601a60209081526040808320815160608101835281548152600182015493810193909352600201549082015290611c50611b03565b9050601d548111611c62576000611c6f565b601d54611c6f9082614980565b90506000601b5460055483611c84919061493f565b611c8e919061495e565b601054611c9b91906149ce565b905060008360400151600554838660000151611cb7919061493f565b611cc1919061495e565b611ccb9190614980565b9695505050505050565b611cdd6139d7565b336000908152601a602052604081208054909103611cfb5750611afa565b60285460ff16611d0b5750611afa565b611d13613a30565b611d1b6138ac565b60008160010154600554600f548460000154611d37919061493f565b611d41919061495e565b611d4b9190614980565b905080156121445780611d5c612938565b1015611d7a5760405162461bcd60e51b8152600401610a0590614997565b80602154611d8891906149ce565b602155600454601654611d9b9082614980565b611da5908361493f565b611daf919061495e565b905080601c5411611dc1576000611dcf565b80601c54611dcf9190614980565b601c5560405181815233907f169f1815ebdea059aac3bb00ec9a9594c7a5ffcb64a17e8392b5d84909a145569060200160405180910390a26008546007546001600160a01b039081169116146120b5576000611e2c60028361495e565b60085460245491925082916001600160a01b039091169015611ee55760248054611e5890600190614980565b81548110611e6857611e68614a03565b600091825260209182902001546024805460408051828602810186019091528181526001600160a01b039093169450611ee293879392919083018282801561188b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161186d57505050505030613d5c565b91505b60085460255484916001600160a01b03169015611f995760258054611f0c90600190614980565b81548110611f1c57611f1c614a03565b600091825260209182902001546025805460408051828602810186019091528181526001600160a01b039093169450611f9693899392919083018282801561188b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161186d57505050505030613d5c565b91505b6007546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611fca90309060040161457d565b602060405180830381865afa158015611fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200b9190614889565b602354909150612028906001600160a01b03168584888730613f52565b50506007546040516370a0823160e01b8152600092506001600160a01b03909116906370a082319061205e90309060040161457d565b602060405180830381865afa15801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f9190614889565b90506120ab8282614980565b9750505050505050505b81546120c29082906149ce565b808355600454600f5490916120d7919061493f565b6120e1919061495e565b60018301556004546010546120f6908361493f565b612100919061495e565b826002015461210f91906149ce565b600283015561211f816001613b9e565b6040518181523390600080516020614be0833981519152906020015b60405180910390a25b5050610ebc60018055565b61215761384d565b610ebc600061407e565b6121696128a0565b6001600160a01b0316336001600160a01b0316148061219257506019546001600160a01b031633145b6121ae5760405162461bcd60e51b8152600401610a0590614852565b600b54156121f95760405162461bcd60e51b8152602060048201526018602482015277141bdbdb081dd85cc8185b1c9958591e481cdd185c9d195960421b6044820152606401610a05565b612201613491565b156122605760405162461bcd60e51b815260206004820152602960248201527f416c6c2072657761726420746f6b656e732068617665206e6f74206265656e2060448201526819195c1bdcda5d195960ba1b6064820152608401610a05565b61226b4360646149ce565b600b55600354600a5461227e919061493f565b600b5461228b91906149ce565b600c819055600b54600e8190556040517f1491c5f110b7907ad294fb443050603cd3890914598532e3e52bfc0319f08e7f926122ce928252602082015260400190565b60405180910390a1565b6122e061384d565b600954600160a01b900460ff168061230857506009546008546001600160a01b039081169116145b610ebc576009546001600160a01b0316612355576014546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156113c7573d6000803e3d6000fd5b6009546040516370a0823160e01b81526000916001600160a01b0316906370a082319061238690309060040161457d565b602060405180830381865afa1580156123a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c79190614889565b6014546009549192506113c7916001600160a01b03908116911683613b18565b6123ef61384d565b6001600160a01b03811615158061241457506013546001600160a01b03828116911614155b6124305760405162461bcd60e51b8152600401610a0590614a19565b6006548311156124525760405162461bcd60e51b8152600401610a0590614a42565b6006548211156124745760405162461bcd60e51b8152600401610a0590614a6f565b60118390556012829055601380546001600160a01b0319166001600160a01b0383169081179091556040805185815260208101859052908101919091527f914d641a0cac7127c2255990878c1090b9edf27adbb9e9d45b772660a901fae59060600160405180910390a1505050565b6124eb6128a0565b6001600160a01b0316336001600160a01b0316148061251457506019546001600160a01b031633145b6125305760405162461bcd60e51b8152600401610a0590614852565b6125386138ac565b6000602154612545612938565b61254f91906149ce565b9050602254811115612601576022546125689082614980565b60085460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb9061259b90339085906004016148a2565b6020604051808303816000875af11580156125ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125de91906148bb565b5080601c54116125ef5760006125fd565b80601c546125fd9190614980565b601c555b43600c8190556040519081527ffed9fcb0ca3d1e761a4b929792bb24082fba92dca81252646ad306d30680656690602001610b24565b6014546001600160a01b0316331461268d5760405162461bcd60e51b815260206004820152601960248201527839b2ba29b2b93b34b1b2a4b733379d102327a92124a22222a760391b6044820152606401610a05565b6001600160a01b0382166126b35760405162461bcd60e51b8152600401610a0590614a19565b601480546001600160a01b0319166001600160a01b03841617905560158190556040517fc208076e24c8758b41e972b01aa2abe614d7962b6d0a645f0e57b4161dd5141c90610d7d90849084906148a2565b61270d6128a0565b6001600160a01b0316336001600160a01b0316148061273657506019546001600160a01b031633145b6127525760405162461bcd60e51b8152600401610a0590614852565b61275a6139d7565b6000811161277a5760405162461bcd60e51b8152600401610a0590614a9d565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a08231906127ab90309060040161457d565b602060405180830381865afa1580156127c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ec9190614889565b600854909150612807906001600160a01b03163330856140ce565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a082319061283890309060040161457d565b602060405180830381865afa158015612855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128799190614889565b90508181601c5461288a91906149ce565b6128949190614980565b601c5550506001805550565b6000546001600160a01b031690565b6128b761384d565b6028805460ff1916821515179055602380546001600160a01b0319166001600160a01b03881617905584516128f39060249060208801906144a1565b5083516129079060259060208701906144a1565b50825161291b9060269060208601906144a1565b50815161292f9060279060208501906144a1565b50505050505050565b6009546008546000916001600160a01b0391821691161480156129645750600954600160a01b900460ff165b156129705750601c5490565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a08231906129a190309060040161457d565b602060405180830381865afa1580156129be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e29190614889565b9050601e5481611bf29190614980565b6129fa6139d7565b6000600b54118015612a0d575043600b54105b612a595760405162461bcd60e51b815260206004820152601a60248201527f4661726d696e67206861736e27742073746172746564207965740000000000006044820152606401610a05565b60008111612a795760405162461bcd60e51b8152600401610a05906148f2565b336000908152601a60205260409020612a90613a30565b612a986138ac565b805415612c885760008160010154600554600f548460000154612abb919061493f565b612ac5919061495e565b612acf9190614980565b90508015612b925780612ae0612938565b1015612afe5760405162461bcd60e51b8152600401610a0590614997565b80602154612b0c91906149ce565b602155600454601654612b1f9082614980565b612b29908361493f565b612b33919061495e565b600854909150612b4d906001600160a01b03163383613b18565b80601c5411612b5d576000612b6b565b80601c54612b6b9190614980565b601c556040518181523390600080516020614c208339815191529060200160405180910390a25b600082600201546005546010548560000154612bae919061493f565b612bb8919061495e565b612bc29190614980565b9050600081118015612bdd5750600954600160a01b900460ff165b15612c85576000612bed82613b6e565b905081601d6000828254612c019190614980565b90915550506009546001600160a01b0316612c4957604051339082156108fc029083906000818181858888f19350505050158015612c43573d6000803e3d6000fd5b50612c60565b600954612c60906001600160a01b03163383613b18565b6040518181523390600080516020614c008339815191529060200160405180910390a2505b50505b6007546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612cb990309060040161457d565b602060405180830381865afa158015612cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfa9190614889565b600754909150612d15906001600160a01b03163330866140ce565b6007546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612d4690309060040161457d565b602060405180830381865afa158015612d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d879190614889565b90506000612d958383614980565b60115490915015612deb57600060045460115483612db3919061493f565b612dbd919061495e565b601354600754919250612ddd916001600160a01b03908116911683613b18565b612de78183614980565b9150505b612df6816001613b9e565b8354612e039082906149ce565b808555600554600f549091612e18919061493f565b612e22919061495e565b60018501556005546010548554612e39919061493f565b612e43919061495e565b60028501556040518181523390600080516020614be08339815191529060200160405180910390a260006016541180612e855750600954600160a81b900460ff165b15612e9257612e92613c8d565b505050506113c760018055565b60025460ff1615612ee85760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610a05565b6000612ef26128a0565b6001600160a01b03161480612f1f5750612f0a6128a0565b6001600160a01b0316336001600160a01b0316145b612f595760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b6044820152606401610a05565b6002805460ff191660011790556127106004556170806003556107d06006819055670de0b6b3a7640000600555600a859055601480546001600160a01b0319908116735ac58191f3bbdf6d037c6c6201adc9f99c93c53a17909155660c6f3b40b6c000601555600780546001600160a01b038e811691841691909117909155600880548d831690841617905560098054871515600160a01b026001600160a81b03199091168d841617179055600d8a905560178054831633179055601880549185169183168217905560198054831682179055601380549092161790558611156130555760405162461bcd60e51b8152600401610a0590614a42565b6006548511156130775760405162461bcd60e51b8152600401610a0590614a6f565b6011869055601285905561308a8261407e565b50505050505050505050565b61309e6139d7565b336000908152601a6020526040812080549091036130bc5750611afa565b6130c4613a30565b6130cc6138ac565b60008160010154600554600f5484600001546130e8919061493f565b6130f2919061495e565b6130fc9190614980565b905080156131bf578061310d612938565b101561312b5760405162461bcd60e51b8152600401610a0590614997565b8060215461313991906149ce565b60215560045460165461314c9082614980565b613156908361493f565b613160919061495e565b60085490915061317a906001600160a01b03163383613b18565b80601c541161318a576000613198565b80601c546131989190614980565b601c556040518181523390600080516020614c208339815191529060200160405180910390a25b600554600f5483546131d1919061493f565b6131db919061495e565b600192830155508055565b6131ee61384d565b60098054821515600160a81b0260ff60a81b199091161790556040517f6c55f8d24f45456d49b15692f6cd375689cbbc2cc46a33366288f1061229c1d390610b2490831515815260200190565b6132436139d7565b336000908152601a6020526040812080549091036132615750611afa565b805460075461327a906001600160a01b03163383613b18565b60008083556001830181905560028301819055613298908290613b9e565b60405181815233907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd96959060200161213b565b6132d26139d7565b336000908152601a6020526040812080549091036132f05750611afa565b600954600160a01b900460ff166133075750611afa565b61330f613a30565b6133176138ac565b600081600201546005546010548460000154613333919061493f565b61333d919061495e565b6133479190614980565b905080156133ec57600061335a82613b6e565b905081601d5461336a9190614980565b601d556009546001600160a01b03166133b057604051339082156108fc029083906000818181858888f193505050501580156133aa573d6000803e3d6000fd5b506133c7565b6009546133c7906001600160a01b03163383613b18565b6040518181523390600080516020614c008339815191529060200160405180910390a2505b60055460105483546133fe919061493f565b613408919061495e565b82600201819055505050610ebc60018055565b61342361384d565b6001600160a01b0381166134885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a05565b6113c78161407e565b600080602254905060006021546134a6612938565b6134b091906149ce565b9050600b546000036134ea57600354600a54600d546134cf919061493f565b6134d9919061493f565b6134e390836149ce565b9150613518565b60006134fa600e54600c54613d1b565b905080600d5461350a919061493f565b61351490846149ce565b9250505b8181106135285760009250505090565b6135328183614980565b9250505090565b61354161384d565b600081116135615760405162461bcd60e51b8152600401610a0590614a9d565b6000600b54116135a95760405162461bcd60e51b81526020600482015260136024820152721c1bdbdb081a5cc81b9bdd081cdd185c9d1959606a1b6044820152606401610a05565b43600c54116135f65760405162461bcd60e51b81526020600482015260196024820152781c1bdbdb081dd85cc8185b1c9958591e48199a5b9a5cda1959603a1b6044820152606401610a05565b6135fe6138ac565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a082319061362f90309060040161457d565b602060405180830381865afa15801561364c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136709190614889565b60085490915061368b906001600160a01b03163330856140ce565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a08231906136bc90309060040161457d565b602060405180830381865afa1580156136d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fd9190614889565b90508181601c5461370e91906149ce565b6137189190614980565b601c55613723613c8d565b505050565b61373061384d565b601e8110156137775760405162461bcd60e51b81526020600482015260136024820152721b1bddd95c881b1a5b5a5d081c995858da1959606a1b6044820152606401610a05565b600a8190556040518181527f9bb10695bde7db94333a5404f0767118f3965fd73217e45f96529c3d368285af9060200160405180910390a1600b54156113c757600354600a546137c7919061493f565b600b546137d491906149ce565b600c819055431061381a5760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b210323ab930ba34b7b760811b6044820152606401610a05565b7fbefee04945bd96d1a11e3459d8981d8eaaeb1c5d866352d4412247a8d1e370a1600c54604051610b2491815260200190565b336138566128a0565b6001600160a01b031614610ebc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a05565b600e54431115806138bd5750600e54155b156138c457565b601b546000036138d45743600e55565b6000601b541180156138ef5750600954600160a01b900460ff165b1561396b5760006138fe611b03565b9050601d54811161391057600061391d565b601d5461391d9082614980565b9050601b5460055482613930919061493f565b61393a919061495e565b6010600082825461394b91906149ce565b9250508190555080601d600082825461396491906149ce565b9091555050505b6000613979600e5443613d1b565b90506000600d548261398b919061493f565b9050601b546005548261399e919061493f565b6139a8919061495e565b600f60008282546139b991906149ce565b909155505043600e556022546139d09082906149ce565b6022555050565b600260015403613a295760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a05565b6002600155565b601554341015613a965760405162461bcd60e51b815260206004820152602b60248201527f73686f756c642070617920736d616c6c2067617320746f20636f6d706f756e6460448201526a081bdc881a185c9d995cdd60aa1b6064820152608401610a05565b6014546015546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015613ad2573d6000803e3d6000fd5b50601554341115610ebc5760155433906108fc90613af09034614980565b6040518115909202916000818181858888f193505050501580156113c7573d6000803e3d6000fd5b6137238363a9059cbb60e01b8484604051602401613b379291906148a2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261410c565b600080613b79611b03565b9050601d54831115613b8b57601d5492505b80831115613b97578092505b5090919050565b8015613c0c5781601b54613bb291906149ce565b601b556008546007546001600160a01b03918216911603613bdf5781601e54613bdb91906149ce565b601e555b6009546007546001600160a01b03918216911603610dd05781601f54613c0591906149ce565b601f555050565b81601b54613c1a9190614980565b601b556008546007546001600160a01b03918216911603613c575781601e5411613c45576000613c53565b81601e54613c539190614980565b601e555b6009546007546001600160a01b03918216911603610dd05781601f5411613c7f576000613c05565b81601f54613c059190614980565b43600c5411613c9857565b6000602154613ca5612938565b613caf91906149ce565b90506022548111156113c757602254613cc89082614980565b9050600043600c54613cda9190614980565b9050613ce6818361495e565b600d8190556040519081527f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df90602001610d7d565b6000600c548211613d3757613d308383614980565b9050613d56565b600c548310613d4857506000613d56565b82600c54613d309190614980565b92915050565b6000808360018551613d6e9190614980565b81518110613d7e57613d7e614a03565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613db1919061457d565b602060405180830381865afa158015613dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613df29190614889565b6023548551919250613e3d916001600160a01b039091169087908790600090613e1d57613e1d614a03565b60200260200101516001600160a01b03166141de9092919063ffffffff16565b6023546001600160a01b0316635c11d7958660008787613e5f426102586149ce565b6040518663ffffffff1660e01b8152600401613e7f959493929190614ac5565b600060405180830381600087803b158015613e9957600080fd5b505af1158015613ead573d6000803e3d6000fd5b5050505060008460018651613ec29190614980565b81518110613ed257613ed2614a03565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613f05919061457d565b602060405180830381865afa158015613f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f469190614889565b9050611ccb8282614980565b60008080613f6a6001600160a01b0389168a886142e1565b613f7e6001600160a01b0388168a876142e1565b6001600160a01b03891663e8e33700898989896000808b613fa1426102586149ce565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016060604051808303816000875af115801561401d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140419190614b36565b9194509250905061405d6001600160a01b0389168a60006141de565b6140726001600160a01b0388168a60006141de565b96509650969350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526141069085906323b872dd60e01b90608401613b37565b50505050565b6000614161826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661437e9092919063ffffffff16565b805190915015613723578080602001905181019061417f91906148bb565b6137235760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a05565b8015806142575750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061421490309086906004016148d8565b602060405180830381865afa158015614231573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142559190614889565b155b6142c25760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610a05565b6137238363095ea7b360e01b8484604051602401613b379291906148a2565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016143129291906148d8565b602060405180830381865afa15801561432f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143539190614889565b61435d91906149ce565b90506141068463095ea7b360e01b8584604051602401613b379291906148a2565b60606114a5848460008585600080866001600160a01b031685876040516143a59190614b90565b60006040518083038185875af1925050503d80600081146143e2576040519150601f19603f3d011682016040523d82523d6000602084013e6143e7565b606091505b50915091506143f887838387614403565b979650505050505050565b6060831561447257825160000361446b576001600160a01b0385163b61446b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a05565b50816114a5565b6114a583838151156144875781518083602001fd5b8060405162461bcd60e51b8152600401610a059190614bac565b8280548282559060005260206000209081019282156144f6579160200282015b828111156144f657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906144c1565b50614502929150614506565b5090565b5b808211156145025760008155600101614507565b60006020828403121561452d57600080fd5b5035919050565b6001600160a01b03811681146113c757600080fd5b803561455481614534565b919050565b60006020828403121561456b57600080fd5b813561457681614534565b9392505050565b6001600160a01b0391909116815260200190565b6000806000606084860312156145a657600080fd5b833592506020840135915060408401356145bf81614534565b809150509250925092565b600080604083850312156145dd57600080fd5b82356145e881614534565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261461d57600080fd5b8135602067ffffffffffffffff8083111561463a5761463a6145f6565b8260051b604051601f19603f8301168101818110848211171561465f5761465f6145f6565b60405293845285810183019383810192508785111561467d57600080fd5b83870191505b848210156143f85761469482614549565b83529183019190830190614683565b80151581146113c757600080fd5b8035614554816146a3565b60008060008060008060c087890312156146d557600080fd5b6146de87614549565b9550602087013567ffffffffffffffff808211156146fb57600080fd5b6147078a838b0161460c565b9650604089013591508082111561471d57600080fd5b6147298a838b0161460c565b9550606089013591508082111561473f57600080fd5b61474b8a838b0161460c565b9450608089013591508082111561476157600080fd5b5061476e89828a0161460c565b92505061477d60a088016146b1565b90509295509295509295565b6000806000806000806000806000806101408b8d0312156147a957600080fd5b8a356147b481614534565b995060208b01356147c481614534565b985060408b01356147d481614534565b975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b0135614800816146a3565b92506101008b013561481181614534565b91506101208b013561482281614534565b809150509295989b9194979a5092959850565b60006020828403121561484757600080fd5b8135614576816146a3565b6020808252601f908201527f63616c6c6572206973206e6f74206f776e6572206f72206f70657261746f7200604082015260600190565b60006020828403121561489b57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6000602082840312156148cd57600080fd5b8151614576816146a3565b6001600160a01b0392831681529116602082015260400190565b6020808252601f908201527f416d6f756e742073686f756c642062652067726561746f72207468616e203000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561495957614959614929565b500290565b60008261497b57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561499257614992614929565b500390565b6020808252601a908201527f496e73756666696369656e742072657761726420746f6b656e73000000000000604082015260600190565b600082198211156149e1576149e1614929565b500190565b6000602082840312156149f857600080fd5b815161457681614534565b634e487b7160e01b600052603260045260246000fd5b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b602080825260139082015272496e76616c6964206465706f7369742066656560681b604082015260600190565b602080825260149082015273496e76616c69642077697468647261772066656560601b604082015260600190565b6020808252600e908201526d1a5b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015614b155784516001600160a01b031683529383019391830191600101614af0565b50506001600160a01b03969096166060850152505050608001529392505050565b600080600060608486031215614b4b57600080fd5b8351925060208401519150604084015190509250925092565b60005b83811015614b7f578181015183820152602001614b67565b838111156141065750506000910152565b60008251614ba2818460208701614b64565b9190910192915050565b6020815260008251806020840152614bcb816040850160208701614b64565b601f01601f1916919091016040019291505056fee1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c5287962f37e8311d1f68b563b6969614e0eb2862c1a714c8781511520e87e44247cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4a2646970667358221220a60381085da80e59214de0a8759d6c4f7e8c76568a83c7c08f1fd1c29c9c4aba64736f6c634300080e0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256)": {
        "params": {
          "_amount": ": amount to stake (in lp token)"
        }
      },
      "depositRewards(uint256)": {
        "details": "Only call by owner. Needs to be for deposit of reward token when reflection token is same with reward token."
      },
      "emergencyRewardWithdraw(uint256)": {
        "details": "Only callable by owner. Needs to be for emergency."
      },
      "emergencyWithdraw()": {
        "details": "Needs to be for emergency."
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256,bool,address,address)": {
        "params": {
          "_deployer": ": owner address",
          "_depositFee": ": deposit fee",
          "_dividendToken": ": reflection token address",
          "_hasDividend": ": reflection available flag",
          "_lpToken": ": LP address",
          "_owner": ": owner address",
          "_rewardPerBlock": ": reward per block (in rewardToken)",
          "_rewardToken": ": earned token address",
          "_withdrawFee": ": withdraw fee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingRewards(address)": {
        "params": {
          "_user": ": user address"
        },
        "returns": {
          "_0": "Pending reward for a given user"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueTokens(address)": {
        "details": "This function is only callable by admin.",
        "params": {
          "_token": ": the address of the token to withdraw"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateEmissionRate(uint256)": {
        "details": "Only callable by owner.",
        "params": {
          "_rewardPerBlock": ": the reward per block"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": ": amount to withdraw (in lp token)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "availableDividendTokens()": {
        "notice": "Available amount of reflection token"
      },
      "availableRewardTokens()": {
        "notice": "Available amount of reward token"
      },
      "deposit(uint256)": {
        "notice": "Deposit LP tokens and collect reward tokens (if any)"
      },
      "depositRewards(uint256)": {
        "notice": "Deposit reward token"
      },
      "emergencyRewardWithdraw(uint256)": {
        "notice": "Withdraw reward token"
      },
      "emergencyWithdraw()": {
        "notice": "Withdraw staked tokens without caring about rewards"
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256,bool,address,address)": {
        "notice": "Initialize the contract"
      },
      "pendingRewards(address)": {
        "notice": "View function to see pending reward on frontend."
      },
      "rescueTokens(address)": {
        "notice": "It allows the admin to recover wrong tokens sent to the contract"
      },
      "transferToHarvest()": {
        "notice": "Admin Methods"
      },
      "updateEmissionRate(uint256)": {
        "notice": "Update reward per block"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw staked lp token and collect reward tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 883,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1187,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 26141,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "isInitialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 26143,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "BLOCKS_PER_DAY",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 26145,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "PERCENT_PRECISION",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 26147,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "PRECISION_FACTOR",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 26149,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "MAX_FEE",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 26152,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "lpToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)3296"
      },
      {
        "astId": 26155,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "rewardToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)3296"
      },
      {
        "astId": 26157,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "dividendToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 26159,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "hasDividend",
        "offset": 20,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 26162,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "autoAdjustableForRewardRate",
        "offset": 21,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 26164,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "duration",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 26166,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "startBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 26168,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "bonusEndBlock",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 26170,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 26172,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "lastRewardBlock",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 26174,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "accTokenPerShare",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 26176,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "accDividendPerShare",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 26178,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "depositFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 26180,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 26182,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "feeAddress",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 26184,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "treasury",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 26186,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "performanceFee",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 26188,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "rewardFee",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 26190,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "factory",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 26192,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "deployer",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 26194,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "operator",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 26206,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "userInfo",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_struct(UserInfo)26201_storage)"
      },
      {
        "astId": 26208,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "totalStaked",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 26210,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "totalEarned",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 26212,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "totalReflections",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 26214,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "totalRewardStaked",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 26216,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "totalReflectionStaked",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 26218,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "reflectionDebt",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 26220,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "paidRewards",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 26222,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "shouldTotalPaid",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 26242,
        "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
        "label": "swapSettings",
        "offset": 0,
        "slot": "35",
        "type": "t_struct(SwapSetting)26239_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3296": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)26201_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BrewlabsFarmImpl.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)26201_storage"
      },
      "t_struct(SwapSetting)26239_storage": {
        "encoding": "inplace",
        "label": "struct BrewlabsFarmImpl.SwapSetting",
        "members": [
          {
            "astId": 26224,
            "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
            "label": "swapRouter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 26227,
            "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
            "label": "earnedToToken0",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 26230,
            "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
            "label": "earnedToToken1",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 26233,
            "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
            "label": "reflectionToToken0",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 26236,
            "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
            "label": "reflectionToToken1",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 26238,
            "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
            "label": "enabled",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)26201_storage": {
        "encoding": "inplace",
        "label": "struct BrewlabsFarmImpl.UserInfo",
        "members": [
          {
            "astId": 26196,
            "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 26198,
            "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 26200,
            "contract": "contracts/farm/BrewlabsFarmImpl.sol:BrewlabsFarmImpl",
            "label": "reflectionDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}