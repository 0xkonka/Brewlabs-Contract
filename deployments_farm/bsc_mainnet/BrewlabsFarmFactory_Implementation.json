{
  "address": "0x1Fc4b516f586728eee58efD656d1c35b5d431B68",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "farm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "category",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasDividend",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "FarmCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "SetFarmOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "category",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "impl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "SetImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetPayingInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "Whitelisted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasDividend",
          "type": "bool"
        }
      ],
      "name": "createBrewlabsFarm",
      "outputs": [
        {
          "internalType": "address",
          "name": "farm",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmDefaultOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "farmInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "farm",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "category",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "hasDividend",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "farmOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setFarmOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "category",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setPayingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setServiceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xeb4785010d71ef8dd4af3b90fd15134ea0eca27ddc6112937417f2a7f54d035a",
  "receipt": {
    "to": null,
    "from": "0xCD3b71D65D1f03F0b2c5a4e67A17347dc71141f7",
    "contractAddress": "0x1Fc4b516f586728eee58efD656d1c35b5d431B68",
    "transactionIndex": 132,
    "gasUsed": "1502685",
    "logsBloom": "0x
    "blockHash": "0xec4ab708cf5f28fdac8a432835e66d3e34a926202428826021804a72e1d21513",
    "transactionHash": "0xeb4785010d71ef8dd4af3b90fd15134ea0eca27ddc6112937417f2a7f54d035a",
    "logs": [],
    "blockNumber": 28336158,
    "cumulativeGasUsed": "12897632",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bd10ea9c6c34aedc02a9aa53ef42df38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasDividend\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"FarmCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetFarmOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"SetImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetPayingInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasDividend\",\"type\":\"bool\"}],\"name\":\"createBrewlabsFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmDefaultOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasDividend\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"farmOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setFarmOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setPayingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueTokens(address)\":{\"params\":{\"_token\":\": token address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rescueTokens(address)\":{\"notice\":\"Emergency withdraw tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/BrewlabsFarmFactory.sol\":\"BrewlabsFarmFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/farm/BrewlabsFarmFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract BrewlabsFarmFactory is OwnableUpgradeable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    mapping(uint256 => address) public implementation;\\r\\n    mapping(uint256 => uint256) public version;\\r\\n\\r\\n    address public farmDefaultOwner;\\r\\n\\r\\n    address public payingToken;\\r\\n    uint256 public serviceFee;\\r\\n    address public treasury;\\r\\n\\r\\n    struct FarmInfo {\\r\\n        address farm;\\r\\n        uint256 category;\\r\\n        uint256 version;\\r\\n        address lpToken;\\r\\n        address rewardToken;\\r\\n        address dividendToken;\\r\\n        bool hasDividend;\\r\\n        address deployer;\\r\\n        uint256 createdAt;\\r\\n    }\\r\\n\\r\\n    FarmInfo[] public farmInfo;\\r\\n    mapping(address => bool) public whitelist;\\r\\n\\r\\n    event FarmCreated(\\r\\n        address indexed farm,\\r\\n        uint256 category,\\r\\n        uint256 version,\\r\\n        address lpToken,\\r\\n        address rewardToken,\\r\\n        address dividendToken,\\r\\n        uint256 rewardPerBlock,\\r\\n        uint256 depositFee,\\r\\n        uint256 withdrawFee,\\r\\n        bool hasDividend,\\r\\n        address deployer\\r\\n    );\\r\\n    event SetFarmOwner(address newOwner);\\r\\n    event SetPayingInfo(address token, uint256 price);\\r\\n    event SetImplementation(uint256 category, address impl, uint256 version);\\r\\n    event TreasuryChanged(address addr);\\r\\n    event Whitelisted(address indexed account, bool isWhitelisted);\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function initialize(address impl, address token, uint256 price, address farmOwner) external initializer {\\r\\n        require(impl != address(0x0), \\\"Invalid implementation\\\");\\r\\n\\r\\n        __Ownable_init();\\r\\n\\r\\n        payingToken = token;\\r\\n        serviceFee = price;\\r\\n        treasury = farmOwner;\\r\\n        farmDefaultOwner = farmOwner;\\r\\n\\r\\n        implementation[0] = impl;\\r\\n        version[0] = 1;\\r\\n\\r\\n        emit SetImplementation(0, impl, 1);\\r\\n    }\\r\\n\\r\\n    function createBrewlabsFarm(\\r\\n        address lpToken,\\r\\n        address rewardToken,\\r\\n        address dividendToken,\\r\\n        uint256 rewardPerBlock,\\r\\n        uint256 depositFee,\\r\\n        uint256 withdrawFee,\\r\\n        uint256 duration,\\r\\n        bool hasDividend\\r\\n    ) external payable returns (address farm) {\\r\\n        uint256 category = 0;\\r\\n\\r\\n        require(implementation[category] != address(0x0), \\\"Not initialized yet\\\");\\r\\n\\r\\n        require(isContract(lpToken), \\\"Invalid LP token\\\");\\r\\n        require(isContract(rewardToken), \\\"Invalid reward token\\\");\\r\\n        require(depositFee <= 2000, \\\"Invalid deposit fee\\\");\\r\\n        require(withdrawFee <= 2000, \\\"Invalid withdraw fee\\\");\\r\\n\\r\\n        if (!whitelist[msg.sender]) {\\r\\n            _transferServiceFee();\\r\\n        }\\r\\n\\r\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, lpToken, rewardToken, duration, block.number, block.timestamp));\\r\\n\\r\\n        farm = Clones.cloneDeterministic(implementation[category], salt);\\r\\n        (bool success,) = farm.call(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"initialize(address,address,address,uint256,uint256,uint256,uint256,bool,address,address)\\\",\\r\\n                lpToken,\\r\\n                rewardToken,\\r\\n                dividendToken,\\r\\n                rewardPerBlock,\\r\\n                depositFee,\\r\\n                withdrawFee,\\r\\n                duration,\\r\\n                hasDividend,\\r\\n                farmDefaultOwner,\\r\\n                msg.sender\\r\\n            )\\r\\n        );\\r\\n        require(success, \\\"Initialization failed\\\");\\r\\n\\r\\n        farmInfo.push(\\r\\n            FarmInfo(\\r\\n                farm,\\r\\n                category,\\r\\n                version[category],\\r\\n                lpToken,\\r\\n                rewardToken,\\r\\n                dividendToken,\\r\\n                hasDividend,\\r\\n                msg.sender,\\r\\n                block.timestamp\\r\\n            )\\r\\n        );\\r\\n\\r\\n        emit FarmCreated(\\r\\n            farm,\\r\\n            category,\\r\\n            version[category],\\r\\n            lpToken,\\r\\n            rewardToken,\\r\\n            dividendToken,\\r\\n            rewardPerBlock,\\r\\n            depositFee,\\r\\n            withdrawFee,\\r\\n            hasDividend,\\r\\n            msg.sender\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function farmCount() external view returns (uint256) {\\r\\n        return farmInfo.length;\\r\\n    }\\r\\n\\r\\n    function setImplementation(uint256 category, address impl) external onlyOwner {\\r\\n        require(isContract(impl), \\\"Invalid implementation\\\");\\r\\n        implementation[category] = impl;\\r\\n        version[category] = version[category] + 1;\\r\\n        emit SetImplementation(category, impl, version[category]);\\r\\n    }\\r\\n\\r\\n    function setFarmOwner(address newOwner) external onlyOwner {\\r\\n        require(newOwner != address(0x0), \\\"Invalid address\\\");\\r\\n        farmDefaultOwner = newOwner;\\r\\n        emit SetFarmOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function setServiceFee(uint256 fee) external onlyOwner {\\r\\n        serviceFee = fee;\\r\\n        emit SetPayingInfo(payingToken, serviceFee);\\r\\n    }\\r\\n\\r\\n    function setPayingToken(address token) external onlyOwner {\\r\\n        payingToken = token;\\r\\n        emit SetPayingInfo(payingToken, serviceFee);\\r\\n    }\\r\\n\\r\\n    function addToWhitelist(address _addr) external onlyOwner {\\r\\n        whitelist[_addr] = true;\\r\\n        emit Whitelisted(_addr, true);\\r\\n    }\\r\\n\\r\\n    function removeFromWhitelist(address _addr) external onlyOwner {\\r\\n        whitelist[_addr] = false;\\r\\n        emit Whitelisted(_addr, false);\\r\\n    }\\r\\n\\r\\n    function setTreasury(address newTreasury) external onlyOwner {\\r\\n        require(newTreasury != address(0x0), \\\"Invalid address\\\");\\r\\n\\r\\n        treasury = newTreasury;\\r\\n        emit TreasuryChanged(newTreasury);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Emergency withdraw tokens.\\r\\n     * @param _token: token address\\r\\n     */\\r\\n    function rescueTokens(address _token) external onlyOwner {\\r\\n        if (_token == address(0x0)) {\\r\\n            uint256 _ethAmount = address(this).balance;\\r\\n            payable(msg.sender).transfer(_ethAmount);\\r\\n        } else {\\r\\n            uint256 _tokenAmount = IERC20(_token).balanceOf(address(this));\\r\\n            IERC20(_token).safeTransfer(msg.sender, _tokenAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferServiceFee() internal {\\r\\n        if (payingToken == address(0x0)) {\\r\\n            require(msg.value >= serviceFee, \\\"Not enough fee\\\");\\r\\n            payable(treasury).transfer(serviceFee);\\r\\n        } else {\\r\\n            IERC20(payingToken).safeTransferFrom(msg.sender, treasury, serviceFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // check if address is contract\\r\\n    function isContract(address _addr) internal view returns (bool) {\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return (size > 0);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x1bccad7d539c4e5fed186e945f24dd49d3d463c6536e957bc7e1d94fefb21ec6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611a37806100206000396000f3fe6080604052600436106101385760003560e01c80638da5cb5b116100ab578063d3cbde311161006f578063d3cbde31146103c0578063e43252d7146103ed578063f083b0961461040d578063f0f442601461042d578063f2fde38b1461044d578063ff4f45791461046d57600080fd5b80638da5cb5b146102ec5780639b19251a1461030a578063ac5632ae1461034a578063ac9a0b261461036a578063be203094146103a057600080fd5b80635cdf76f8116100fd5780635cdf76f8146101ea57806361d027b31461020a578063715018a61461022a5780637d21c9671461023f5780638ab1d681146102b65780638abdf5aa146102d657600080fd5b8062ae3bf8146101445780630848818b146101665780630a8e214c1461018657806320e3f160146101aa578063555d6331146101ca57600080fd5b3661013f57005b600080fd5b34801561015057600080fd5b5061016461015f3660046116f9565b61048d565b005b34801561017257600080fd5b506101646101813660046116f9565b610562565b34801561019257600080fd5b50606b545b6040519081526020015b60405180910390f35b6101bd6101b8366004611729565b6105c6565b6040516101a191906117a8565b3480156101d657600080fd5b506068546101bd906001600160a01b031681565b3480156101f657600080fd5b506101646102053660046117bc565b610bc6565b34801561021657600080fd5b50606a546101bd906001600160a01b031681565b34801561023657600080fd5b50610164610c12565b34801561024b57600080fd5b5061025f61025a3660046117bc565b610c26565b604080516001600160a01b039a8b168152602081019990995288019690965293871660608701529186166080860152851660a0850152151560c084015290921660e0820152610100810191909152610120016101a1565b3480156102c257600080fd5b506101646102d13660046116f9565b610c9b565b3480156102e257600080fd5b5061019760695481565b3480156102f857600080fd5b506033546001600160a01b03166101bd565b34801561031657600080fd5b5061033a6103253660046116f9565b606c6020526000908152604090205460ff1681565b60405190151581526020016101a1565b34801561035657600080fd5b506067546101bd906001600160a01b031681565b34801561037657600080fd5b506101bd6103853660046117bc565b6065602052600090815260409020546001600160a01b031681565b3480156103ac57600080fd5b506101646103bb3660046117d5565b610cf9565b3480156103cc57600080fd5b506101976103db3660046117bc565b60666020526000908152604090205481565b3480156103f957600080fd5b506101646104083660046116f9565b610f0d565b34801561041957600080fd5b50610164610428366004611822565b610f6c565b34801561043957600080fd5b506101646104483660046116f9565b611024565b34801561045957600080fd5b506101646104683660046116f9565b61109d565b34801561047957600080fd5b506101646104883660046116f9565b611113565b61049561118c565b6001600160a01b0381166104d7576040514790339082156108fc029083906000818181858888f193505050501580156104d2573d6000803e3d6000fd5b505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906105069030906004016117a8565b602060405180830381865afa158015610523573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610547919061184e565b905061055d6001600160a01b03831633836111e6565b505b50565b61056a61118c565b606880546001600160a01b0319166001600160a01b0383169081179091556069546040517fff99838ad48c26fbba7c9103c33d60b6e6fe5c9e3e5f82592ffcea51777fccec926105bb929091611867565b60405180910390a150565b600080805260656020527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b5481906001600160a01b03166106445760405162461bcd60e51b8152602060048201526013602482015272139bdd081a5b9a5d1a585b1a5e9959081e595d606a1b60448201526064015b60405180910390fd5b893b63ffffffff1661068b5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2102628103a37b5b2b760811b604482015260640161063b565b883b63ffffffff166106d65760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b2103932bbb0b932103a37b5b2b760611b604482015260640161063b565b6107d086111561071e5760405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206465706f7369742066656560681b604482015260640161063b565b6107d08511156107675760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642077697468647261772066656560601b604482015260640161063b565b336000908152606c602052604090205460ff166107865761078661123c565b6040516bffffffffffffffffffffffff1933606090811b821660208401528c811b821660348401528b901b166048820152605c810185905243607c82015242609c82015260009060bc0160408051601f1981840301815291815281516020928301206000858152606590935291205490915061080b906001600160a01b0316826112ef565b6067546040516001600160a01b038e811660248301528d811660448301528c81166064830152608482018c905260a482018b905260c482018a905260e4820189905287151561010483015291821661012482015233610144820152919450600091908516906101640160408051601f198184030181529181526020820180516001600160e01b0316632e1da2d360e21b179052516108a991906118ac565b6000604051808303816000865af19150503d80600081146108e6576040519150601f19603f3d011682016040523d82523d6000602084013e6108eb565b606091505b50509050806109345760405162461bcd60e51b8152602060048201526015602482015274125b9a5d1a585b1a5e985d1a5bdb8819985a5b1959605a1b604482015260640161063b565b606b604051806101200160405280866001600160a01b03168152602001858152602001606660008781526020019081526020016000205481526020018e6001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b031681526020018715158152602001336001600160a01b0316815260200142815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160050160146101000a81548160ff02191690831515021790555060e08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061010082015181600701555050836001600160a01b03167f291594bf848cf673f10ea826b105148a36e8edb4099db9f6c125b0c798a01b638460666000878152602001908152602001600020548f8f8f8f8f8f8e33604051610baf9a99989796959493929190998a5260208a01989098526001600160a01b0396871660408a01529486166060890152928516608088015260a087019190915260c086015260e08501521515610100840152166101208201526101400190565b60405180910390a250505098975050505050505050565b610bce61118c565b60698190556068546040517fff99838ad48c26fbba7c9103c33d60b6e6fe5c9e3e5f82592ffcea51777fccec916105bb916001600160a01b03909116908490611867565b610c1a61118c565b610c24600061138c565b565b606b8181548110610c3657600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b03968716985094969395928316949183169383821693600160a01b90920460ff169291169089565b610ca361118c565b6001600160a01b0381166000818152606c60209081526040808320805460ff19169055519182527fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f2644091015b60405180910390a250565b600054610100900460ff1615808015610d195750600054600160ff909116105b80610d335750303b158015610d33575060005460ff166001145b610d965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161063b565b6000805460ff191660011790558015610db9576000805461ff0019166101001790555b6001600160a01b038516610ddf5760405162461bcd60e51b815260040161063b906118c8565b610de76113de565b606880546001600160a01b038087166001600160a01b0319928316179092556069859055606a80548584169083168117909155606780548316909117905560008080527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b805493891693909216929092179055606660205260017f6f48904484b35701cf1f41ad9068b394adf7e2f8a59d2309a04d10a155eaa72b8190556040517fbac8f345f4aec25f8181306d1e285bd71897176374cea36669605788ca57b29592610eb89290918991906118f8565b60405180910390a18015610f06576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b610f1561118c565b6001600160a01b0381166000818152606c6020908152604091829020805460ff1916600190811790915591519182527fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264409101610cee565b610f7461118c565b803b63ffffffff16610f985760405162461bcd60e51b815260040161063b906118c8565b600082815260656020908152604080832080546001600160a01b0319166001600160a01b0386161790556066909152902054610fd5906001611917565b60008381526066602052604090819020829055517fbac8f345f4aec25f8181306d1e285bd71897176374cea36669605788ca57b2959161101891859185916118f8565b60405180910390a15050565b61102c61118c565b6001600160a01b0381166110525760405162461bcd60e51b815260040161063b9061193d565b606a80546001600160a01b0319166001600160a01b0383161790556040517fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f608906105bb9083906117a8565b6110a561118c565b6001600160a01b03811661110a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161063b565b61055f8161138c565b61111b61118c565b6001600160a01b0381166111415760405162461bcd60e51b815260040161063b9061193d565b606780546001600160a01b0319166001600160a01b0383161790556040517f3e225b2fbe91a9a2189df9845b346f257b4b08473077dced6862a7c5c0289de5906105bb9083906117a8565b6033546001600160a01b03163314610c245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063b565b6104d28363a9059cbb60e01b8484604051602401611205929190611867565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261140d565b6068546001600160a01b03166112cb5760695434101561128f5760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420656e6f7567682066656560901b604482015260640161063b565b606a546069546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561055f573d6000803e3d6000fd5b606a54606954606854610c24926001600160a01b03918216923392909116906114df565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f590506001600160a01b0381166113865760405162461bcd60e51b8152602060048201526017602482015276115490cc4c4d8dce8818dc99585d194c8819985a5b1959604a1b604482015260640161063b565b92915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114055760405162461bcd60e51b815260040161063b90611966565b610c2461151d565b6000611462826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661154d9092919063ffffffff16565b8051909150156104d2578080602001905181019061148091906119b1565b6104d25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161063b565b6040516001600160a01b03808516602483015283166044820152606481018290526115179085906323b872dd60e01b90608401611205565b50505050565b600054610100900460ff166115445760405162461bcd60e51b815260040161063b90611966565b610c243361138c565b606061155c8484600085611564565b949350505050565b6060824710156115c55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161063b565b600080866001600160a01b031685876040516115e191906118ac565b60006040518083038185875af1925050503d806000811461161e576040519150601f19603f3d011682016040523d82523d6000602084013e611623565b606091505b50915091506116348783838761163f565b979650505050505050565b606083156116ae5782516000036116a7576001600160a01b0385163b6116a75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161063b565b508161155c565b61155c83838151156116c35781518083602001fd5b8060405162461bcd60e51b815260040161063b91906119ce565b80356001600160a01b03811681146116f457600080fd5b919050565b60006020828403121561170b57600080fd5b611714826116dd565b9392505050565b801515811461055f57600080fd5b600080600080600080600080610100898b03121561174657600080fd5b61174f896116dd565b975061175d60208a016116dd565b965061176b60408a016116dd565b9550606089013594506080890135935060a0890135925060c0890135915060e08901356117978161171b565b809150509295985092959890939650565b6001600160a01b0391909116815260200190565b6000602082840312156117ce57600080fd5b5035919050565b600080600080608085870312156117eb57600080fd5b6117f4856116dd565b9350611802602086016116dd565b925060408501359150611817606086016116dd565b905092959194509250565b6000806040838503121561183557600080fd5b82359150611845602084016116dd565b90509250929050565b60006020828403121561186057600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60005b8381101561189b578181015183820152602001611883565b838111156115175750506000910152565b600082516118be818460208701611880565b9190910192915050565b60208082526016908201527524b73b30b634b21034b6b83632b6b2b73a30ba34b7b760511b604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b6000821982111561193857634e487b7160e01b600052601160045260246000fd5b500190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156119c357600080fd5b81516117148161171b565b60208152600082518060208401526119ed816040850160208701611880565b601f01601f1916919091016040019291505056fea26469706673582212203f46dc350b778eaa69060b5ab24eb7e4369c0c51e36fa5245bb5da5633d4d0fb64736f6c634300080e0033",
  "deployedBytecode": "0x6080604052600436106101385760003560e01c80638da5cb5b116100ab578063d3cbde311161006f578063d3cbde31146103c0578063e43252d7146103ed578063f083b0961461040d578063f0f442601461042d578063f2fde38b1461044d578063ff4f45791461046d57600080fd5b80638da5cb5b146102ec5780639b19251a1461030a578063ac5632ae1461034a578063ac9a0b261461036a578063be203094146103a057600080fd5b80635cdf76f8116100fd5780635cdf76f8146101ea57806361d027b31461020a578063715018a61461022a5780637d21c9671461023f5780638ab1d681146102b65780638abdf5aa146102d657600080fd5b8062ae3bf8146101445780630848818b146101665780630a8e214c1461018657806320e3f160146101aa578063555d6331146101ca57600080fd5b3661013f57005b600080fd5b34801561015057600080fd5b5061016461015f3660046116f9565b61048d565b005b34801561017257600080fd5b506101646101813660046116f9565b610562565b34801561019257600080fd5b50606b545b6040519081526020015b60405180910390f35b6101bd6101b8366004611729565b6105c6565b6040516101a191906117a8565b3480156101d657600080fd5b506068546101bd906001600160a01b031681565b3480156101f657600080fd5b506101646102053660046117bc565b610bc6565b34801561021657600080fd5b50606a546101bd906001600160a01b031681565b34801561023657600080fd5b50610164610c12565b34801561024b57600080fd5b5061025f61025a3660046117bc565b610c26565b604080516001600160a01b039a8b168152602081019990995288019690965293871660608701529186166080860152851660a0850152151560c084015290921660e0820152610100810191909152610120016101a1565b3480156102c257600080fd5b506101646102d13660046116f9565b610c9b565b3480156102e257600080fd5b5061019760695481565b3480156102f857600080fd5b506033546001600160a01b03166101bd565b34801561031657600080fd5b5061033a6103253660046116f9565b606c6020526000908152604090205460ff1681565b60405190151581526020016101a1565b34801561035657600080fd5b506067546101bd906001600160a01b031681565b34801561037657600080fd5b506101bd6103853660046117bc565b6065602052600090815260409020546001600160a01b031681565b3480156103ac57600080fd5b506101646103bb3660046117d5565b610cf9565b3480156103cc57600080fd5b506101976103db3660046117bc565b60666020526000908152604090205481565b3480156103f957600080fd5b506101646104083660046116f9565b610f0d565b34801561041957600080fd5b50610164610428366004611822565b610f6c565b34801561043957600080fd5b506101646104483660046116f9565b611024565b34801561045957600080fd5b506101646104683660046116f9565b61109d565b34801561047957600080fd5b506101646104883660046116f9565b611113565b61049561118c565b6001600160a01b0381166104d7576040514790339082156108fc029083906000818181858888f193505050501580156104d2573d6000803e3d6000fd5b505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906105069030906004016117a8565b602060405180830381865afa158015610523573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610547919061184e565b905061055d6001600160a01b03831633836111e6565b505b50565b61056a61118c565b606880546001600160a01b0319166001600160a01b0383169081179091556069546040517fff99838ad48c26fbba7c9103c33d60b6e6fe5c9e3e5f82592ffcea51777fccec926105bb929091611867565b60405180910390a150565b600080805260656020527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b5481906001600160a01b03166106445760405162461bcd60e51b8152602060048201526013602482015272139bdd081a5b9a5d1a585b1a5e9959081e595d606a1b60448201526064015b60405180910390fd5b893b63ffffffff1661068b5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2102628103a37b5b2b760811b604482015260640161063b565b883b63ffffffff166106d65760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b2103932bbb0b932103a37b5b2b760611b604482015260640161063b565b6107d086111561071e5760405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206465706f7369742066656560681b604482015260640161063b565b6107d08511156107675760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642077697468647261772066656560601b604482015260640161063b565b336000908152606c602052604090205460ff166107865761078661123c565b6040516bffffffffffffffffffffffff1933606090811b821660208401528c811b821660348401528b901b166048820152605c810185905243607c82015242609c82015260009060bc0160408051601f1981840301815291815281516020928301206000858152606590935291205490915061080b906001600160a01b0316826112ef565b6067546040516001600160a01b038e811660248301528d811660448301528c81166064830152608482018c905260a482018b905260c482018a905260e4820189905287151561010483015291821661012482015233610144820152919450600091908516906101640160408051601f198184030181529181526020820180516001600160e01b0316632e1da2d360e21b179052516108a991906118ac565b6000604051808303816000865af19150503d80600081146108e6576040519150601f19603f3d011682016040523d82523d6000602084013e6108eb565b606091505b50509050806109345760405162461bcd60e51b8152602060048201526015602482015274125b9a5d1a585b1a5e985d1a5bdb8819985a5b1959605a1b604482015260640161063b565b606b604051806101200160405280866001600160a01b03168152602001858152602001606660008781526020019081526020016000205481526020018e6001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b031681526020018715158152602001336001600160a01b0316815260200142815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160050160146101000a81548160ff02191690831515021790555060e08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061010082015181600701555050836001600160a01b03167f291594bf848cf673f10ea826b105148a36e8edb4099db9f6c125b0c798a01b638460666000878152602001908152602001600020548f8f8f8f8f8f8e33604051610baf9a99989796959493929190998a5260208a01989098526001600160a01b0396871660408a01529486166060890152928516608088015260a087019190915260c086015260e08501521515610100840152166101208201526101400190565b60405180910390a250505098975050505050505050565b610bce61118c565b60698190556068546040517fff99838ad48c26fbba7c9103c33d60b6e6fe5c9e3e5f82592ffcea51777fccec916105bb916001600160a01b03909116908490611867565b610c1a61118c565b610c24600061138c565b565b606b8181548110610c3657600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b03968716985094969395928316949183169383821693600160a01b90920460ff169291169089565b610ca361118c565b6001600160a01b0381166000818152606c60209081526040808320805460ff19169055519182527fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f2644091015b60405180910390a250565b600054610100900460ff1615808015610d195750600054600160ff909116105b80610d335750303b158015610d33575060005460ff166001145b610d965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161063b565b6000805460ff191660011790558015610db9576000805461ff0019166101001790555b6001600160a01b038516610ddf5760405162461bcd60e51b815260040161063b906118c8565b610de76113de565b606880546001600160a01b038087166001600160a01b0319928316179092556069859055606a80548584169083168117909155606780548316909117905560008080527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b805493891693909216929092179055606660205260017f6f48904484b35701cf1f41ad9068b394adf7e2f8a59d2309a04d10a155eaa72b8190556040517fbac8f345f4aec25f8181306d1e285bd71897176374cea36669605788ca57b29592610eb89290918991906118f8565b60405180910390a18015610f06576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b610f1561118c565b6001600160a01b0381166000818152606c6020908152604091829020805460ff1916600190811790915591519182527fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264409101610cee565b610f7461118c565b803b63ffffffff16610f985760405162461bcd60e51b815260040161063b906118c8565b600082815260656020908152604080832080546001600160a01b0319166001600160a01b0386161790556066909152902054610fd5906001611917565b60008381526066602052604090819020829055517fbac8f345f4aec25f8181306d1e285bd71897176374cea36669605788ca57b2959161101891859185916118f8565b60405180910390a15050565b61102c61118c565b6001600160a01b0381166110525760405162461bcd60e51b815260040161063b9061193d565b606a80546001600160a01b0319166001600160a01b0383161790556040517fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f608906105bb9083906117a8565b6110a561118c565b6001600160a01b03811661110a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161063b565b61055f8161138c565b61111b61118c565b6001600160a01b0381166111415760405162461bcd60e51b815260040161063b9061193d565b606780546001600160a01b0319166001600160a01b0383161790556040517f3e225b2fbe91a9a2189df9845b346f257b4b08473077dced6862a7c5c0289de5906105bb9083906117a8565b6033546001600160a01b03163314610c245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063b565b6104d28363a9059cbb60e01b8484604051602401611205929190611867565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261140d565b6068546001600160a01b03166112cb5760695434101561128f5760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420656e6f7567682066656560901b604482015260640161063b565b606a546069546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561055f573d6000803e3d6000fd5b606a54606954606854610c24926001600160a01b03918216923392909116906114df565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f590506001600160a01b0381166113865760405162461bcd60e51b8152602060048201526017602482015276115490cc4c4d8dce8818dc99585d194c8819985a5b1959604a1b604482015260640161063b565b92915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114055760405162461bcd60e51b815260040161063b90611966565b610c2461151d565b6000611462826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661154d9092919063ffffffff16565b8051909150156104d2578080602001905181019061148091906119b1565b6104d25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161063b565b6040516001600160a01b03808516602483015283166044820152606481018290526115179085906323b872dd60e01b90608401611205565b50505050565b600054610100900460ff166115445760405162461bcd60e51b815260040161063b90611966565b610c243361138c565b606061155c8484600085611564565b949350505050565b6060824710156115c55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161063b565b600080866001600160a01b031685876040516115e191906118ac565b60006040518083038185875af1925050503d806000811461161e576040519150601f19603f3d011682016040523d82523d6000602084013e611623565b606091505b50915091506116348783838761163f565b979650505050505050565b606083156116ae5782516000036116a7576001600160a01b0385163b6116a75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161063b565b508161155c565b61155c83838151156116c35781518083602001fd5b8060405162461bcd60e51b815260040161063b91906119ce565b80356001600160a01b03811681146116f457600080fd5b919050565b60006020828403121561170b57600080fd5b611714826116dd565b9392505050565b801515811461055f57600080fd5b600080600080600080600080610100898b03121561174657600080fd5b61174f896116dd565b975061175d60208a016116dd565b965061176b60408a016116dd565b9550606089013594506080890135935060a0890135925060c0890135915060e08901356117978161171b565b809150509295985092959890939650565b6001600160a01b0391909116815260200190565b6000602082840312156117ce57600080fd5b5035919050565b600080600080608085870312156117eb57600080fd5b6117f4856116dd565b9350611802602086016116dd565b925060408501359150611817606086016116dd565b905092959194509250565b6000806040838503121561183557600080fd5b82359150611845602084016116dd565b90509250929050565b60006020828403121561186057600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60005b8381101561189b578181015183820152602001611883565b838111156115175750506000910152565b600082516118be818460208701611880565b9190910192915050565b60208082526016908201527524b73b30b634b21034b6b83632b6b2b73a30ba34b7b760511b604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b6000821982111561193857634e487b7160e01b600052601160045260246000fd5b500190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156119c357600080fd5b81516117148161171b565b60208152600082518060208401526119ed816040850160208701611880565b601f01601f1916919091016040019291505056fea26469706673582212203f46dc350b778eaa69060b5ab24eb7e4369c0c51e36fa5245bb5da5633d4d0fb64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueTokens(address)": {
        "params": {
          "_token": ": token address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rescueTokens(address)": {
        "notice": "Emergency withdraw tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 390,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 874,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 259,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 379,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25507,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 25511,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "version",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 25513,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "farmDefaultOwner",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 25515,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "payingToken",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 25517,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "serviceFee",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 25519,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "treasury",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 25542,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "farmInfo",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_struct(FarmInfo)25538_storage)dyn_storage"
      },
      {
        "astId": 25546,
        "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
        "label": "whitelist",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FarmInfo)25538_storage)dyn_storage": {
        "base": "t_struct(FarmInfo)25538_storage",
        "encoding": "dynamic_array",
        "label": "struct BrewlabsFarmFactory.FarmInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FarmInfo)25538_storage": {
        "encoding": "inplace",
        "label": "struct BrewlabsFarmFactory.FarmInfo",
        "members": [
          {
            "astId": 25521,
            "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
            "label": "farm",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 25523,
            "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
            "label": "category",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 25525,
            "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
            "label": "version",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 25527,
            "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
            "label": "lpToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 25529,
            "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
            "label": "rewardToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 25531,
            "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
            "label": "dividendToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 25533,
            "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
            "label": "hasDividend",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 25535,
            "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
            "label": "deployer",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 25537,
            "contract": "contracts/farm/BrewlabsFarmFactory.sol:BrewlabsFarmFactory",
            "label": "createdAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}