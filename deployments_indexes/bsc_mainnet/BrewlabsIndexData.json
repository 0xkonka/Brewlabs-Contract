{
  "address": "0xF4B2eF51A965bCA7D61ab2c4C81D5c607180D2F1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "expectedEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_percents",
          "type": "uint256[]"
        }
      ],
      "name": "precomputeZapIn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBrewlabsAggregator.FormattedOffer[]",
          "name": "queries",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "precomputeZapOut",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBrewlabsAggregator.FormattedOffer[]",
          "name": "queries",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x668ef1d45c9d8d3434882ebae18de4def71f7b0461521af6d89d75bd045473ac",
  "receipt": {
    "to": null,
    "from": "0xCD3b71D65D1f03F0b2c5a4e67A17347dc71141f7",
    "contractAddress": "0xF4B2eF51A965bCA7D61ab2c4C81D5c607180D2F1",
    "transactionIndex": 132,
    "gasUsed": "1014843",
    "logsBloom": "0x
    "blockHash": "0x68e2f17f24533c5fe941f87888e183d94d3ad9889a83a6fe9273dac931a2adf2",
    "transactionHash": "0x668ef1d45c9d8d3434882ebae18de4def71f7b0461521af6d89d75bd045473ac",
    "logs": [],
    "blockNumber": 31163089,
    "cumulativeGasUsed": "13255019",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "59187993d667af240c9887302395aeaf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"expectedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percents\",\"type\":\"uint256[]\"}],\"name\":\"precomputeZapIn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct IBrewlabsAggregator.FormattedOffer[]\",\"name\":\"queries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"precomputeZapOut\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct IBrewlabsAggregator.FormattedOffer[]\",\"name\":\"queries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/indexes/BrewlabsIndexData.sol\":\"BrewlabsIndexData\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/indexes/BrewlabsIndexData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IBrewlabsAggregator} from \\\"../libs/IBrewlabsAggregator.sol\\\";\\n\\ncontract BrewlabsIndexData {\\n    uint256 private FEE_DENOMINATOR = 10000;\\n\\n    constructor() {}\\n\\n    function precomputeZapIn(\\n        address _aggregator,\\n        address _token,\\n        uint256 _amount,\\n        IERC20[] memory _tokens,\\n        uint256[] memory _percents\\n    ) external view returns (IBrewlabsAggregator.FormattedOffer[] memory queries) {\\n        address WNATIVE = IBrewlabsAggregator(_aggregator).WNATIVE();\\n        uint256 NUM_TOKENS = _tokens.length;\\n\\n        queries = new IBrewlabsAggregator.FormattedOffer[](NUM_TOKENS + 1);\\n\\n        uint256 ethAmount = _amount;\\n        if (_token != address(0x0)) {\\n            queries[0] = IBrewlabsAggregator(_aggregator).findBestPath(_amount, _token, WNATIVE, 3);\\n            uint256[] memory _amounts = queries[0].amounts;\\n            ethAmount = _amounts[_amounts.length - 1];\\n        }\\n\\n        for (uint8 i = 0; i < NUM_TOKENS; i++) {\\n            if (i >= _percents.length) break;\\n\\n            uint256 amountIn = (ethAmount * _percents[i]) / FEE_DENOMINATOR;\\n            if (amountIn == 0 || address(_tokens[i]) == WNATIVE) continue;\\n\\n            queries[i + 1] = IBrewlabsAggregator(_aggregator).findBestPath(amountIn, WNATIVE, address(_tokens[i]), 3);\\n        }\\n    }\\n\\n    function precomputeZapOut(address _aggregator, IERC20[] memory _tokens, uint256[] memory amounts, address _token)\\n        external\\n        view\\n        returns (IBrewlabsAggregator.FormattedOffer[] memory queries)\\n    {\\n        address WNATIVE = IBrewlabsAggregator(_aggregator).WNATIVE();\\n        uint256 NUM_TOKENS = _tokens.length;\\n\\n        queries = new IBrewlabsAggregator.FormattedOffer[](NUM_TOKENS + 1);\\n\\n        uint256 ethAmount = 0;\\n        for (uint256 i = 0; i < NUM_TOKENS; i++) {\\n            if (amounts[i] == 0) continue;\\n            if (address(_tokens[i]) == WNATIVE) {\\n                ethAmount += amounts[i];\\n                continue;\\n            }\\n\\n            queries[i] = IBrewlabsAggregator(_aggregator).findBestPath(amounts[i], address(_tokens[i]), WNATIVE, 3);\\n            uint256[] memory _amounts = queries[i].amounts;\\n            ethAmount += _amounts[_amounts.length - 1];\\n        }\\n\\n        if (_token != address(0x0)) {\\n            queries[NUM_TOKENS] = IBrewlabsAggregator(_aggregator).findBestPath(ethAmount, WNATIVE, _token, 3);\\n        }\\n    }\\n\\n    function expectedEth(address _aggregator, IERC20[] memory _tokens, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        address WNATIVE = IBrewlabsAggregator(_aggregator).WNATIVE();\\n        uint256 NUM_TOKENS = _tokens.length;\\n\\n        uint256 aggregatorFee = IBrewlabsAggregator(_aggregator).BREWS_FEE();\\n\\n        IBrewlabsAggregator.FormattedOffer memory query;\\n        for (uint8 i = 0; i < NUM_TOKENS; i++) {\\n            if (_amounts[i] == 0) continue;\\n\\n            if (address(_tokens[i]) == WNATIVE) {\\n                amountOut += _amounts[i];\\n            } else {\\n                query = IBrewlabsAggregator(_aggregator).findBestPath(_amounts[i], address(_tokens[i]), WNATIVE, 3);\\n                uint256 _amountOut = query.amounts[query.amounts.length - 1];\\n                if (aggregatorFee > 0) _amountOut = _amountOut * (FEE_DENOMINATOR - aggregatorFee) / FEE_DENOMINATOR;\\n                amountOut += _amountOut;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0124b7ec8aa457eb19b3ac1fa657c4ee1599cfe3dcbc7db4ddd63586a19376f2\",\"license\":\"MIT\"},\"contracts/libs/IBrewlabsAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBrewlabsAggregator {\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address[] adapters;\\n    }\\n\\n    struct FormattedOffer {\\n        uint256[] amounts;\\n        address[] adapters;\\n        address[] path;\\n        uint256 gasEstimate;\\n    }\\n\\n    function WNATIVE() external view returns (address);\\n    function BREWS_FEE() external view returns (uint256);\\n    function findBestPath(uint256 _amountIn, address _tokenIn, address _tokenOut, uint256 _maxSteps)\\n        external\\n        view\\n        returns (FormattedOffer memory);\\n    function swapNoSplit(Trade memory _trade, address _to, uint256 _deadline) external;\\n    function swapNoSplitFromETH(Trade memory _trade, address _to, uint256 _deadline) external payable;\\n    function swapNoSplitToETH(Trade memory _trade, address _to, uint256 _deadline) external;\\n}\\n\",\"keccak256\":\"0x6445874b278e23886605f11e903e59655e447efef28942f24dde732f8c34e591\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405261271060005534801561001657600080fd5b50611109806100266000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b448f89a14610046578063e14a78a11461006f578063e1f7d88f14610090575b600080fd5b610059610054366004610b58565b6100a3565b6040516100669190610c2e565b60405180910390f35b61008261007d366004610d03565b6103d6565b604051908152602001610066565b61005961009e366004610d78565b610681565b60606000866001600160a01b031663b381cf406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101099190610e00565b8451909150610119816001610e3a565b6001600160401b03811115610130576101306109f8565b60405190808252806020026020018201604052801561016957816020015b6101566109b8565b81526020019060019003908161014e5790505b509250856001600160a01b0388161561026057604051632604e7a760e11b81526001600160a01b038a1690634c09cf4e906101af908a908c908890600390600401610e52565b600060405180830381865afa1580156101cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101f49190810190610edb565b8460008151811061020757610207610fef565b602002602001018190525060008460008151811061022757610227610fef565b602002602001015160000151905080600182516102449190611005565b8151811061025457610254610fef565b60200260200101519150505b60005b828160ff1610156103c95785518160ff1610156103c95760008054878360ff168151811061029357610293610fef565b6020026020010151846102a6919061101c565b6102b0919061103b565b90508015806102ec5750846001600160a01b0316888360ff16815181106102d9576102d9610fef565b60200260200101516001600160a01b0316145b156102f757506103b7565b8a6001600160a01b0316634c09cf4e82878b8660ff168151811061031d5761031d610fef565b602002602001015160036040518563ffffffff1660e01b81526004016103469493929190610e52565b600060405180830381865afa158015610363573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261038b9190810190610edb565b8661039784600161105d565b60ff16815181106103aa576103aa610fef565b6020026020010181905250505b806103c181611082565b915050610263565b5050505095945050505050565b600080846001600160a01b031663b381cf406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610e00565b90506000845190506000866001600160a01b0316636a2e87246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a791906110a1565b90506104b16109b8565b60005b838160ff16101561067557868160ff16815181106104d4576104d4610fef565b60200260200101516000031561066357846001600160a01b0316888260ff168151811061050357610503610fef565b60200260200101516001600160a01b03160361054857868160ff168151811061052e5761052e610fef565b6020026020010151866105419190610e3a565b9550610663565b886001600160a01b0316634c09cf4e888360ff168151811061056c5761056c610fef565b60200260200101518a8460ff168151811061058957610589610fef565b60200260200101518860036040518563ffffffff1660e01b81526004016105b39493929190610e52565b600060405180830381865afa1580156105d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105f89190810190610edb565b8051805191935060009161060e90600190611005565b8151811061061e5761061e610fef565b6020026020010151905060008411156106555760005461063e8582611005565b610648908361101c565b610652919061103b565b90505b61065f8188610e3a565b9650505b8061066d81611082565b9150506104b4565b50505050509392505050565b60606000856001600160a01b031663b381cf406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190610e00565b85519091506106f7816001610e3a565b6001600160401b0381111561070e5761070e6109f8565b60405190808252806020026020018201604052801561074757816020015b6107346109b8565b81526020019060019003908161072c5790505b5092506000805b828110156109075786818151811061076857610768610fef565b6020026020010151600003156108f557836001600160a01b031688828151811061079457610794610fef565b60200260200101516001600160a01b0316036107d6578681815181106107bc576107bc610fef565b6020026020010151826107cf9190610e3a565b91506108f5565b886001600160a01b0316634c09cf4e8883815181106107f7576107f7610fef565b60200260200101518a848151811061081157610811610fef565b60200260200101518760036040518563ffffffff1660e01b815260040161083b9493929190610e52565b600060405180830381865afa158015610858573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108809190810190610edb565b85828151811061089257610892610fef565b602002602001018190525060008582815181106108b1576108b1610fef565b602002602001015160000151905080600182516108ce9190611005565b815181106108de576108de610fef565b6020026020010151836108f19190610e3a565b9250505b806108ff816110ba565b91505061074e565b506001600160a01b038516156109ad57604051632604e7a760e11b81526001600160a01b03891690634c09cf4e9061094a90849087908a90600390600401610e52565b600060405180830381865afa158015610967573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098f9190810190610edb565b8483815181106109a1576109a1610fef565b60200260200101819052505b505050949350505050565b6040518060800160405280606081526020016060815260200160608152602001600081525090565b6001600160a01b03811681146109f557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610a3057610a306109f8565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610a5e57610a5e6109f8565b604052919050565b60006001600160401b03821115610a7f57610a7f6109f8565b5060051b60200190565b600082601f830112610a9a57600080fd5b81356020610aaf610aaa83610a66565b610a36565b82815260059290921b84018101918181019086841115610ace57600080fd5b8286015b84811015610af2578035610ae5816109e0565b8352918301918301610ad2565b509695505050505050565b600082601f830112610b0e57600080fd5b81356020610b1e610aaa83610a66565b82815260059290921b84018101918181019086841115610b3d57600080fd5b8286015b84811015610af25780358352918301918301610b41565b600080600080600060a08688031215610b7057600080fd5b8535610b7b816109e0565b94506020860135610b8b816109e0565b93506040860135925060608601356001600160401b0380821115610bae57600080fd5b610bba89838a01610a89565b93506080880135915080821115610bd057600080fd5b50610bdd88828901610afd565b9150509295509295909350565b600081518084526020808501945080840160005b83811015610c235781516001600160a01b031687529582019590820190600101610bfe565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610cf457898403603f19018652825180516080808752815190870181905260a08701918b019085905b80821015610ca35782518452928c0192918c019160019190910190610c83565b505050898201518682038b880152610cbb8282610bea565b915050888201518682038a880152610cd38282610bea565b60609384015197909301969096525095880195935091870191600101610c56565b50919998505050505050505050565b600080600060608486031215610d1857600080fd5b8335610d23816109e0565b925060208401356001600160401b0380821115610d3f57600080fd5b610d4b87838801610a89565b93506040860135915080821115610d6157600080fd5b50610d6e86828701610afd565b9150509250925092565b60008060008060808587031215610d8e57600080fd5b8435610d99816109e0565b935060208501356001600160401b0380821115610db557600080fd5b610dc188838901610a89565b94506040870135915080821115610dd757600080fd5b50610de487828801610afd565b9250506060850135610df5816109e0565b939692955090935050565b600060208284031215610e1257600080fd5b8151610e1d816109e0565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610e4d57610e4d610e24565b500190565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b600082601f830112610e8857600080fd5b81516020610e98610aaa83610a66565b82815260059290921b84018101918181019086841115610eb757600080fd5b8286015b84811015610af2578051610ece816109e0565b8352918301918301610ebb565b60006020808385031215610eee57600080fd5b82516001600160401b0380821115610f0557600080fd5b9084019060808287031215610f1957600080fd5b610f21610a0e565b825182811115610f3057600080fd5b8301601f81018813610f4157600080fd5b8051610f4f610aaa82610a66565b81815260059190911b8201860190868101908a831115610f6e57600080fd5b928701925b82841015610f8c57835182529287019290870190610f73565b84525050508284015182811115610fa257600080fd5b610fae88828601610e77565b85830152506040830151935081841115610fc757600080fd5b610fd387858501610e77565b6040820152606083015160608201528094505050505092915050565b634e487b7160e01b600052603260045260246000fd5b60008282101561101757611017610e24565b500390565b600081600019048311821515161561103657611036610e24565b500290565b60008261105857634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff84168060ff0382111561107a5761107a610e24565b019392505050565b600060ff821660ff810361109857611098610e24565b60010192915050565b6000602082840312156110b357600080fd5b5051919050565b6000600182016110cc576110cc610e24565b506001019056fea2646970667358221220a4c3a96996da6fd10331986ffdb0304ca9df3b7506b4c3019d8159f69d258c4964736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063b448f89a14610046578063e14a78a11461006f578063e1f7d88f14610090575b600080fd5b610059610054366004610b58565b6100a3565b6040516100669190610c2e565b60405180910390f35b61008261007d366004610d03565b6103d6565b604051908152602001610066565b61005961009e366004610d78565b610681565b60606000866001600160a01b031663b381cf406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101099190610e00565b8451909150610119816001610e3a565b6001600160401b03811115610130576101306109f8565b60405190808252806020026020018201604052801561016957816020015b6101566109b8565b81526020019060019003908161014e5790505b509250856001600160a01b0388161561026057604051632604e7a760e11b81526001600160a01b038a1690634c09cf4e906101af908a908c908890600390600401610e52565b600060405180830381865afa1580156101cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101f49190810190610edb565b8460008151811061020757610207610fef565b602002602001018190525060008460008151811061022757610227610fef565b602002602001015160000151905080600182516102449190611005565b8151811061025457610254610fef565b60200260200101519150505b60005b828160ff1610156103c95785518160ff1610156103c95760008054878360ff168151811061029357610293610fef565b6020026020010151846102a6919061101c565b6102b0919061103b565b90508015806102ec5750846001600160a01b0316888360ff16815181106102d9576102d9610fef565b60200260200101516001600160a01b0316145b156102f757506103b7565b8a6001600160a01b0316634c09cf4e82878b8660ff168151811061031d5761031d610fef565b602002602001015160036040518563ffffffff1660e01b81526004016103469493929190610e52565b600060405180830381865afa158015610363573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261038b9190810190610edb565b8661039784600161105d565b60ff16815181106103aa576103aa610fef565b6020026020010181905250505b806103c181611082565b915050610263565b5050505095945050505050565b600080846001600160a01b031663b381cf406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610e00565b90506000845190506000866001600160a01b0316636a2e87246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a791906110a1565b90506104b16109b8565b60005b838160ff16101561067557868160ff16815181106104d4576104d4610fef565b60200260200101516000031561066357846001600160a01b0316888260ff168151811061050357610503610fef565b60200260200101516001600160a01b03160361054857868160ff168151811061052e5761052e610fef565b6020026020010151866105419190610e3a565b9550610663565b886001600160a01b0316634c09cf4e888360ff168151811061056c5761056c610fef565b60200260200101518a8460ff168151811061058957610589610fef565b60200260200101518860036040518563ffffffff1660e01b81526004016105b39493929190610e52565b600060405180830381865afa1580156105d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105f89190810190610edb565b8051805191935060009161060e90600190611005565b8151811061061e5761061e610fef565b6020026020010151905060008411156106555760005461063e8582611005565b610648908361101c565b610652919061103b565b90505b61065f8188610e3a565b9650505b8061066d81611082565b9150506104b4565b50505050509392505050565b60606000856001600160a01b031663b381cf406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190610e00565b85519091506106f7816001610e3a565b6001600160401b0381111561070e5761070e6109f8565b60405190808252806020026020018201604052801561074757816020015b6107346109b8565b81526020019060019003908161072c5790505b5092506000805b828110156109075786818151811061076857610768610fef565b6020026020010151600003156108f557836001600160a01b031688828151811061079457610794610fef565b60200260200101516001600160a01b0316036107d6578681815181106107bc576107bc610fef565b6020026020010151826107cf9190610e3a565b91506108f5565b886001600160a01b0316634c09cf4e8883815181106107f7576107f7610fef565b60200260200101518a848151811061081157610811610fef565b60200260200101518760036040518563ffffffff1660e01b815260040161083b9493929190610e52565b600060405180830381865afa158015610858573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108809190810190610edb565b85828151811061089257610892610fef565b602002602001018190525060008582815181106108b1576108b1610fef565b602002602001015160000151905080600182516108ce9190611005565b815181106108de576108de610fef565b6020026020010151836108f19190610e3a565b9250505b806108ff816110ba565b91505061074e565b506001600160a01b038516156109ad57604051632604e7a760e11b81526001600160a01b03891690634c09cf4e9061094a90849087908a90600390600401610e52565b600060405180830381865afa158015610967573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098f9190810190610edb565b8483815181106109a1576109a1610fef565b60200260200101819052505b505050949350505050565b6040518060800160405280606081526020016060815260200160608152602001600081525090565b6001600160a01b03811681146109f557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610a3057610a306109f8565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610a5e57610a5e6109f8565b604052919050565b60006001600160401b03821115610a7f57610a7f6109f8565b5060051b60200190565b600082601f830112610a9a57600080fd5b81356020610aaf610aaa83610a66565b610a36565b82815260059290921b84018101918181019086841115610ace57600080fd5b8286015b84811015610af2578035610ae5816109e0565b8352918301918301610ad2565b509695505050505050565b600082601f830112610b0e57600080fd5b81356020610b1e610aaa83610a66565b82815260059290921b84018101918181019086841115610b3d57600080fd5b8286015b84811015610af25780358352918301918301610b41565b600080600080600060a08688031215610b7057600080fd5b8535610b7b816109e0565b94506020860135610b8b816109e0565b93506040860135925060608601356001600160401b0380821115610bae57600080fd5b610bba89838a01610a89565b93506080880135915080821115610bd057600080fd5b50610bdd88828901610afd565b9150509295509295909350565b600081518084526020808501945080840160005b83811015610c235781516001600160a01b031687529582019590820190600101610bfe565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610cf457898403603f19018652825180516080808752815190870181905260a08701918b019085905b80821015610ca35782518452928c0192918c019160019190910190610c83565b505050898201518682038b880152610cbb8282610bea565b915050888201518682038a880152610cd38282610bea565b60609384015197909301969096525095880195935091870191600101610c56565b50919998505050505050505050565b600080600060608486031215610d1857600080fd5b8335610d23816109e0565b925060208401356001600160401b0380821115610d3f57600080fd5b610d4b87838801610a89565b93506040860135915080821115610d6157600080fd5b50610d6e86828701610afd565b9150509250925092565b60008060008060808587031215610d8e57600080fd5b8435610d99816109e0565b935060208501356001600160401b0380821115610db557600080fd5b610dc188838901610a89565b94506040870135915080821115610dd757600080fd5b50610de487828801610afd565b9250506060850135610df5816109e0565b939692955090935050565b600060208284031215610e1257600080fd5b8151610e1d816109e0565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610e4d57610e4d610e24565b500190565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b600082601f830112610e8857600080fd5b81516020610e98610aaa83610a66565b82815260059290921b84018101918181019086841115610eb757600080fd5b8286015b84811015610af2578051610ece816109e0565b8352918301918301610ebb565b60006020808385031215610eee57600080fd5b82516001600160401b0380821115610f0557600080fd5b9084019060808287031215610f1957600080fd5b610f21610a0e565b825182811115610f3057600080fd5b8301601f81018813610f4157600080fd5b8051610f4f610aaa82610a66565b81815260059190911b8201860190868101908a831115610f6e57600080fd5b928701925b82841015610f8c57835182529287019290870190610f73565b84525050508284015182811115610fa257600080fd5b610fae88828601610e77565b85830152506040830151935081841115610fc757600080fd5b610fd387858501610e77565b6040820152606083015160608201528094505050505092915050565b634e487b7160e01b600052603260045260246000fd5b60008282101561101757611017610e24565b500390565b600081600019048311821515161561103657611036610e24565b500290565b60008261105857634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff84168060ff0382111561107a5761107a610e24565b019392505050565b600060ff821660ff810361109857611098610e24565b60010192915050565b6000602082840312156110b357600080fd5b5051919050565b6000600182016110cc576110cc610e24565b506001019056fea2646970667358221220a4c3a96996da6fd10331986ffdb0304ca9df3b7506b4c3019d8159f69d258c4964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41974,
        "contract": "contracts/indexes/BrewlabsIndexData.sol:BrewlabsIndexData",
        "label": "FEE_DENOMINATOR",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}