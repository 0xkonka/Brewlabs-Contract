{
  "address": "0xCb8C54cC0Ba6b9516a42f7A6B9b6e27B16269722",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "BaseURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "tokenIds",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MintEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SetBrewlabsToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetBrewlabsWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetFeeToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "SetMaxSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "brewsFee",
          "type": "uint256"
        }
      ],
      "name": "SetMintPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "SetMirrorNft",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staking",
          "type": "address"
        }
      ],
      "name": "SetNftStakingContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "SetOneTimeLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetStakingAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "brewsFee",
          "type": "uint256"
        }
      ],
      "name": "SetUpgradePrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "Whitelisted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OPERATOR_FILTER_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brews",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brewsMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brewsUpgradeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brewsWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "featureAccesses",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeReductions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numToMint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "payingToken",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rarity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numToMint",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorNft",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oneTimeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rarityNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rarityOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeModerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setBrewlabsToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setBrewlabsWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "brewsFee",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mirrorNft",
          "type": "address"
        }
      ],
      "name": "setMirrorNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staking",
          "type": "address"
        }
      ],
      "name": "setNftStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "setOneTimeMintLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setStakingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setTokenBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "brewsFee",
          "type": "uint256"
        }
      ],
      "name": "setUpgradePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "tokenIds",
          "type": "uint256[3]"
        },
        {
          "internalType": "contract IERC20",
          "name": "payingToken",
          "type": "address"
        }
      ],
      "name": "upgradeNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4731933dcc935384e6e06e9b40cfc4d24f143a90612f78d7864d8e5cda571d13",
  "receipt": {
    "to": null,
    "from": "0xCD3b71D65D1f03F0b2c5a4e67A17347dc71141f7",
    "contractAddress": "0xCb8C54cC0Ba6b9516a42f7A6B9b6e27B16269722",
    "transactionIndex": 160,
    "gasUsed": "4948815",
    "logsBloom": "0x
    "blockHash": "0xd9e9268949ea9d679482da4a741455baf8b0eb4a811393d9c5469984fdff8b61",
    "transactionHash": "0x4731933dcc935384e6e06e9b40cfc4d24f143a90612f78d7864d8e5cda571d13",
    "logs": [
      {
        "transactionIndex": 160,
        "blockNumber": 29550028,
        "transactionHash": "0x4731933dcc935384e6e06e9b40cfc4d24f143a90612f78d7864d8e5cda571d13",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x86d03f430c7616021073d7a71766f632f1ce19f289aa989534d9f4732253eb59",
          "0x000000000000000000000000cb8c54cc0ba6b9516a42f7a6b9b6e27b16269722",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 314,
        "blockHash": "0xd9e9268949ea9d679482da4a741455baf8b0eb4a811393d9c5469984fdff8b61"
      },
      {
        "transactionIndex": 160,
        "blockNumber": 29550028,
        "transactionHash": "0x4731933dcc935384e6e06e9b40cfc4d24f143a90612f78d7864d8e5cda571d13",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x0038c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e8",
          "0x000000000000000000000000cb8c54cc0ba6b9516a42f7a6b9b6e27b16269722",
          "0x0000000000000000000000003cc6cdda760b79bafa08df41ecfa224f810dceb6",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 315,
        "blockHash": "0xd9e9268949ea9d679482da4a741455baf8b0eb4a811393d9c5469984fdff8b61"
      },
      {
        "transactionIndex": 160,
        "blockNumber": 29550028,
        "transactionHash": "0x4731933dcc935384e6e06e9b40cfc4d24f143a90612f78d7864d8e5cda571d13",
        "address": "0xCb8C54cC0Ba6b9516a42f7A6B9b6e27B16269722",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cd3b71d65d1f03f0b2c5a4e67a17347dc71141f7"
        ],
        "data": "0x",
        "logIndex": 316,
        "blockHash": "0xd9e9268949ea9d679482da4a741455baf8b0eb4a811393d9c5469984fdff8b61"
      }
    ],
    "blockNumber": 29550028,
    "cumulativeGasUsed": "18352003",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6a5989d757faf2277c141d8971841324",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"tokenIds\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"name\":\"ItemUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetBrewlabsToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetBrewlabsWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetFeeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"SetMaxSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"brewsFee\",\"type\":\"uint256\"}],\"name\":\"SetMintPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"SetMirrorNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"SetNftStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetOneTimeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetStakingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"brewsFee\",\"type\":\"uint256\"}],\"name\":\"SetUpgradePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brews\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brewsMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brewsUpgradeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brewsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"featureAccesses\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeReductions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numToMint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"payingToken\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numToMint\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneTimeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarityNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rarityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setBrewlabsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setBrewlabsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"brewsFee\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mirrorNft\",\"type\":\"address\"}],\"name\":\"setMirrorNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"setNftStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setOneTimeMintLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"brewsFee\",\"type\":\"uint256\"}],\"name\":\"setUpgradePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"tokenIds\",\"type\":\"uint256[3]\"},{\"internalType\":\"contract IERC20\",\"name\":\"payingToken\",\"type\":\"address\"}],\"name\":\"upgradeNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"onERC721Received(address operator, address from, uint256 tokenId, bytes data) \\u2192 bytes4 It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/indexes/BrewlabsFlaskNft.sol\":\"BrewlabsFlaskNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/indexes/BrewlabsFlaskNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport {ERC721, ERC721Enumerable, IERC721} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {DefaultOperatorFilterer} from \\\"operator-filter-registry/src/DefaultOperatorFilterer.sol\\\";\\r\\n\\r\\ninterface IBrewlabsNftStaking {\\r\\n    function forceUnstake(address from, uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ncontract BrewlabsFlaskNft is ERC721Enumerable, ERC721Holder, DefaultOperatorFilterer, Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Strings for uint256;\\r\\n    using Strings for address;\\r\\n\\r\\n    bool public mintAllowed;\\r\\n    uint256 public maxSupply = 5000;\\r\\n\\r\\n    address public nftStaking;\\r\\n    address public mirrorNft;\\r\\n\\r\\n    mapping(address => bool) public tokenAllowed;\\r\\n    IERC20 public brews = IERC20(0x6aAc56305825f712Fd44599E59f2EdE51d42C3e7);\\r\\n\\r\\n    uint256 public mintFee = 100 ether;\\r\\n    uint256 public brewsMintFee = 3500 * 10 ** 9;\\r\\n    uint256 public upgradeFee = 25 ether;\\r\\n    uint256 public brewsUpgradeFee = 1500 * 10 ** 9;\\r\\n    uint256 public oneTimeLimit = 30;\\r\\n\\r\\n    address public stakingAddr = 0xE1f1dd010BBC2860F81c8F90Ea4E38dB949BB16F;\\r\\n    address public brewsWallet = 0xE1f1dd010BBC2860F81c8F90Ea4E38dB949BB16F;\\r\\n    address public treasury = 0x5Ac58191F3BBDF6D037C6C6201aDC9F99c93C53A;\\r\\n\\r\\n    uint256 private tokenIndex;\\r\\n    string private _tokenBaseURI = \\\"\\\";\\r\\n\\r\\n    // generated by alias method algorithm\\r\\n    uint256[] private probabilities = [100, 98, 50, 10, 1];\\r\\n    uint256[] private aliases = [0, 0, 0, 1, 0];\\r\\n\\r\\n    string[6] public rarityNames = [\\\"Common\\\", \\\"Uncommon\\\", \\\"Rare\\\", \\\"Epic\\\", \\\"Legendary\\\", \\\"Mods\\\"];\\r\\n    string[5] public featureAccesses = [\\\"Basic\\\", \\\"Improved\\\", \\\"Brewer\\\", \\\"Premium\\\", \\\"Premium Brewer\\\"];\\r\\n    uint256[5] public feeReductions = [5, 10, 15, 20, 30];\\r\\n    mapping(uint256 => uint256) private rarities;\\r\\n\\r\\n    mapping(address => uint256) public whitelist;\\r\\n\\r\\n    event BaseURIUpdated(string uri);\\r\\n    event MintEnabled();\\r\\n\\r\\n    event ItemUpgraded(uint256[3] tokenIds, uint256 newTokenId);\\r\\n\\r\\n    event SetBrewlabsToken(address token);\\r\\n    event SetFeeToken(address token, bool enabled);\\r\\n    event SetMintPrice(uint256 tokenFee, uint256 brewsFee);\\r\\n    event SetUpgradePrice(uint256 tokenFee, uint256 brewsFee);\\r\\n    event SetMaxSupply(uint256 supply);\\r\\n    event SetOneTimeLimit(uint256 limit);\\r\\n    event SetMirrorNft(address nft);\\r\\n    event SetNftStakingContract(address staking);\\r\\n    event SetBrewlabsWallet(address addr);\\r\\n    event SetStakingAddress(address addr);\\r\\n    event SetTreasury(address addr);\\r\\n    event Whitelisted(address indexed account, uint256 count);\\r\\n\\r\\n    modifier onlyMintable() {\\r\\n        require(mintAllowed, \\\"Mint is disabled\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() ERC721(\\\"Brewlabs Flask NFT\\\", \\\"BLF\\\") {}\\r\\n\\r\\n    function mint(uint256 numToMint, IERC20 payingToken) external onlyMintable {\\r\\n        require(numToMint > 0, \\\"Invalid amount\\\");\\r\\n        require(numToMint <= oneTimeLimit, \\\"Cannot exceed one-time limit\\\");\\r\\n        require(totalSupply() + numToMint <= maxSupply, \\\"Cannot exceed maxSupply\\\");\\r\\n        require(tokenAllowed[address(payingToken)], \\\"Not allowed for mint\\\");\\r\\n\\r\\n        // process mint fee\\r\\n        if (whitelist[msg.sender] < numToMint) {\\r\\n            uint256 precision = 10 ** (18 - IERC20Metadata(address(payingToken)).decimals());\\r\\n            uint256 feeAmount = (mintFee / precision) * (numToMint - whitelist[msg.sender]);\\r\\n            require(payingToken.balanceOf(msg.sender) >= feeAmount, \\\"Insufficient fee\\\");\\r\\n\\r\\n            brews.safeTransferFrom(msg.sender, treasury, brewsMintFee * (numToMint - whitelist[msg.sender]));\\r\\n            payingToken.safeTransferFrom(msg.sender, address(this), feeAmount);\\r\\n\\r\\n            payingToken.safeTransfer(brewsWallet, feeAmount / 4);\\r\\n            payingToken.safeTransfer(treasury, feeAmount / 4);\\r\\n            payingToken.safeTransfer(stakingAddr, feeAmount / 2);\\r\\n\\r\\n            whitelist[msg.sender] = 0;\\r\\n        } else {\\r\\n            whitelist[msg.sender] = whitelist[msg.sender] - numToMint;\\r\\n        }\\r\\n\\r\\n        // mint NFT\\r\\n        for (uint256 i = 0; i < numToMint; i++) {\\r\\n            tokenIndex++;\\r\\n            rarities[tokenIndex] = _getRarity(tokenIndex, numToMint);\\r\\n\\r\\n            _safeMint(msg.sender, tokenIndex);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintTo(address to, uint256 rarity, uint256 numToMint) external onlyOwner {\\r\\n        require(numToMint > 0, \\\"Invalid amount\\\");\\r\\n        require(numToMint <= oneTimeLimit, \\\"Cannot exceed one-time limit\\\");\\r\\n        require(rarity > 0 && rarity <= rarityNames.length, \\\"Invalid rarity\\\");\\r\\n        require(totalSupply() + numToMint <= maxSupply, \\\"Cannot exceed maxSupply\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < numToMint; i++) {\\r\\n            tokenIndex++;\\r\\n            rarities[tokenIndex] = rarity;\\r\\n\\r\\n            _safeMint(to, tokenIndex);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function upgradeNFT(uint256[3] memory tokenIds, IERC20 payingToken) external returns (uint256) {\\r\\n        require(rarities[tokenIds[0]] < 3, \\\"Only common or uncommon NFT can be upgraded\\\");\\r\\n        require(\\r\\n            rarities[tokenIds[0]] == rarities[tokenIds[1]] && rarities[tokenIds[1]] == rarities[tokenIds[2]],\\r\\n            \\\"Rarities should be same\\\"\\r\\n        );\\r\\n        require(tokenAllowed[address(payingToken)], \\\"Not allowed for upgrade NFT\\\");\\r\\n\\r\\n        // process upgrade fee\\r\\n        uint256 precision = 10 ** (18 - IERC20Metadata(address(payingToken)).decimals());\\r\\n        uint256 feeAmount = upgradeFee / precision;\\r\\n        require(payingToken.balanceOf(msg.sender) >= feeAmount, \\\"Insufficient fee\\\");\\r\\n\\r\\n        brews.safeTransferFrom(msg.sender, brewsWallet, brewsUpgradeFee);\\r\\n        payingToken.safeTransferFrom(msg.sender, stakingAddr, feeAmount);\\r\\n\\r\\n        uint256 newRarity = rarities[tokenIds[0]] + 1;\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            _safeTransfer(msg.sender, address(this), tokenIds[i], \\\"\\\");\\r\\n            _burn(tokenIds[i]);\\r\\n        }\\r\\n        tokenIndex++;\\r\\n        rarities[tokenIndex] = newRarity;\\r\\n\\r\\n        _safeMint(msg.sender, tokenIndex);\\r\\n        emit ItemUpgraded(tokenIds, tokenIndex);\\r\\n        return tokenIndex;\\r\\n    }\\r\\n\\r\\n    function removeModerator(uint256 tokenId) external onlyOwner {\\r\\n        require(rarities[tokenId] == 6, \\\"can remove only Mods token\\\");\\r\\n\\r\\n        if (nftStaking != address(0x0)) {\\r\\n            address from = ownerOf(tokenId);\\r\\n            if (from == nftStaking) {\\r\\n                from = IERC721(mirrorNft).ownerOf(tokenId);\\r\\n                IBrewlabsNftStaking(nftStaking).forceUnstake(from, tokenId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _burn(tokenId);\\r\\n        rarities[tokenId] = 0;\\r\\n    }\\r\\n\\r\\n    function _getRarity(uint256 tokenId, uint256 num) internal view returns (uint256) {\\r\\n        uint256 randomNum = uint256(\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    msg.sender, tx.gasprice, block.number, block.timestamp, blockhash(block.number - 1), num + tokenId\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        uint256 seed = randomNum % maxSupply;\\r\\n\\r\\n        uint256 index = seed % probabilities.length;\\r\\n        uint256 rarity = seed * 100 / maxSupply;\\r\\n        if (rarity < probabilities[index]) {\\r\\n            rarity = index;\\r\\n        } else {\\r\\n            rarity = aliases[index];\\r\\n        }\\r\\n\\r\\n        return rarity + 1;\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        override(ERC721, IERC721)\\r\\n        onlyAllowedOperatorApproval(operator)\\r\\n    {\\r\\n        super.setApprovalForAll(operator, approved);\\r\\n    }\\r\\n\\r\\n    function approve(address operator, uint256 tokenId)\\r\\n        public\\r\\n        override(ERC721, IERC721)\\r\\n        onlyAllowedOperatorApproval(operator)\\r\\n    {\\r\\n        super.approve(operator, tokenId);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 tokenId)\\r\\n        public\\r\\n        override(ERC721, IERC721)\\r\\n        onlyAllowedOperator(from)\\r\\n    {\\r\\n        super.transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId)\\r\\n        public\\r\\n        override(ERC721, IERC721)\\r\\n        onlyAllowedOperator(from)\\r\\n    {\\r\\n        super.safeTransferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\\r\\n        public\\r\\n        override(ERC721, IERC721)\\r\\n        onlyAllowedOperator(from)\\r\\n    {\\r\\n        super.safeTransferFrom(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize)\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        require(\\r\\n            rarities[firstTokenId] < 6 || from == address(0x0) || to == address(0x0) || from == address(nftStaking)\\r\\n                || to == address(nftStaking),\\r\\n            \\\"Cannot transfer Mods item\\\"\\r\\n        );\\r\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\r\\n    }\\r\\n\\r\\n    function rarityOf(uint256 tokenId) external view returns (uint256) {\\r\\n        return rarities[tokenId];\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _tokenBaseURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"BrewlabsFlaskNft: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory base = _baseURI();\\r\\n        string memory description = string(\\r\\n            abi.encodePacked(\\r\\n                '\\\"description\\\": \\\"Brewlabs Flask NFT collection provides fee reductions and benefits across various Brewlabs products as well as access to exclusive NFT staking pools.\\\"'\\r\\n            )\\r\\n        );\\r\\n\\r\\n        uint256 rarity = rarities[tokenId] - 1;\\r\\n        string memory rarityName = rarityNames[rarity];\\r\\n        if (rarity == 5) rarity = 4;\\r\\n\\r\\n        string memory attributes = '\\\"attributes\\\":[';\\r\\n        attributes = string(\\r\\n            abi.encodePacked(\\r\\n                attributes,\\r\\n                '{\\\"trait_type\\\":\\\"Network\\\", \\\"value\\\":\\\"BNB Chain\\\"}, {\\\"trait_type\\\":\\\"Rarity\\\", \\\"value\\\":\\\"',\\r\\n                rarityName,\\r\\n                '\\\"}, {\\\"trait_type\\\":\\\"Fee Reduction\\\", \\\"value\\\":\\\"',\\r\\n                feeReductions[rarity].toString(),\\r\\n                '.00%\\\"}, {\\\"trait_type\\\":\\\"Feature Access\\\", \\\"value\\\":\\\"',\\r\\n                featureAccesses[rarity],\\r\\n                '\\\"}]'\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // If both are set, concatenate the baseURI (via abi.encodePacked).\\r\\n        string memory imagePath = string(abi.encodePacked(base, \\\"/\\\", rarityName));\\r\\n        string memory metadata = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"name\\\": \\\"',\\r\\n                name(),\\r\\n                \\\" #\\\",\\r\\n                tokenId.toString(),\\r\\n                '\\\", ',\\r\\n                description,\\r\\n                ', \\\"external_url\\\": \\\"https://earn.brewlabs.info/nft\\\", \\\"image\\\": \\\"',\\r\\n                imagePath,\\r\\n                '.png\\\", \\\"animation_url\\\": \\\"',\\r\\n                imagePath,\\r\\n                '.mp4\\\", ',\\r\\n                attributes,\\r\\n                \\\"}\\\"\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", _base64(bytes(metadata))));\\r\\n    }\\r\\n\\r\\n    function addToWhitelist(address _addr, uint256 _count) external onlyOwner {\\r\\n        whitelist[_addr] = _count;\\r\\n        emit Whitelisted(_addr, _count);\\r\\n    }\\r\\n\\r\\n    function removeFromWhitelist(address _addr) external onlyOwner {\\r\\n        whitelist[_addr] = 0;\\r\\n        emit Whitelisted(_addr, 0);\\r\\n    }\\r\\n\\r\\n    function enableMint() external onlyOwner {\\r\\n        require(!mintAllowed, \\\"Already enabled\\\");\\r\\n\\r\\n        mintAllowed = true;\\r\\n        emit MintEnabled();\\r\\n    }\\r\\n\\r\\n    function setBrewlabsToken(IERC20 token) external onlyOwner {\\r\\n        require(address(token) != address(0x0), \\\"Invalid token\\\");\\r\\n        brews = token;\\r\\n        emit SetBrewlabsToken(address(token));\\r\\n    }\\r\\n\\r\\n    function setFeeToken(address token, bool enabled) external onlyOwner {\\r\\n        require(token != address(0x0), \\\"Invalid token\\\");\\r\\n        tokenAllowed[token] = enabled;\\r\\n        emit SetFeeToken(token, enabled);\\r\\n    }\\r\\n\\r\\n    function setMintPrice(uint256 tokenFee, uint256 brewsFee) external onlyOwner {\\r\\n        mintFee = tokenFee;\\r\\n        brewsMintFee = brewsFee;\\r\\n        emit SetMintPrice(tokenFee, brewsFee);\\r\\n    }\\r\\n\\r\\n    function setUpgradePrice(uint256 tokenFee, uint256 brewsFee) external onlyOwner {\\r\\n        upgradeFee = tokenFee;\\r\\n        brewsUpgradeFee = brewsFee;\\r\\n        emit SetUpgradePrice(tokenFee, brewsFee);\\r\\n    }\\r\\n\\r\\n    function setOneTimeMintLimit(uint256 limit) external onlyOwner {\\r\\n        oneTimeLimit = limit;\\r\\n        emit SetOneTimeLimit(limit);\\r\\n    }\\r\\n\\r\\n    function setMaxSupply(uint256 supply) external onlyOwner {\\r\\n        require(supply > maxSupply, \\\"Small amount\\\");\\r\\n        maxSupply = supply;\\r\\n        emit SetMaxSupply(supply);\\r\\n    }\\r\\n\\r\\n    function setMirrorNft(address _mirrorNft) external onlyOwner {\\r\\n        require(_mirrorNft != address(0x0), \\\"Invalid address\\\");\\r\\n\\r\\n        mirrorNft = _mirrorNft;\\r\\n        emit SetMirrorNft(mirrorNft);\\r\\n    }\\r\\n\\r\\n    function setNftStakingContract(address staking) external onlyOwner {\\r\\n        require(staking != address(0x0), \\\"Invalid address\\\");\\r\\n\\r\\n        IBrewlabsNftStaking(staking).forceUnstake(address(this), 1);\\r\\n        nftStaking = staking;\\r\\n\\r\\n        emit SetNftStakingContract(staking);\\r\\n    }\\r\\n\\r\\n    function setBrewlabsWallet(address wallet) external onlyOwner {\\r\\n        require(wallet != address(0x0), \\\"Invalid address\\\");\\r\\n        brewsWallet = wallet;\\r\\n        emit SetBrewlabsWallet(wallet);\\r\\n    }\\r\\n\\r\\n    function setStakingAddress(address wallet) external onlyOwner {\\r\\n        require(wallet != address(0x0), \\\"Invalid address\\\");\\r\\n        stakingAddr = wallet;\\r\\n        emit SetStakingAddress(wallet);\\r\\n    }\\r\\n\\r\\n    function setTreasury(address _addr) external onlyOwner {\\r\\n        require(_addr != address(0x0), \\\"Invalid address\\\");\\r\\n\\r\\n        treasury = _addr;\\r\\n        emit SetTreasury(_addr);\\r\\n    }\\r\\n\\r\\n    function setTokenBaseUri(string memory _uri) external onlyOwner {\\r\\n        _tokenBaseURI = _uri;\\r\\n        emit BaseURIUpdated(_uri);\\r\\n    }\\r\\n\\r\\n    function rescueTokens(address _token) external onlyOwner {\\r\\n        if (_token == address(0x0)) {\\r\\n            uint256 _ethAmount = address(this).balance;\\r\\n            payable(msg.sender).transfer(_ethAmount);\\r\\n        } else {\\r\\n            uint256 _tokenAmount = IERC20(_token).balanceOf(address(this));\\r\\n            IERC20(_token).safeTransfer(msg.sender, _tokenAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _base64(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {} lt(dataPtr, endPtr) {} {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\r\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * onERC721Received(address operator, address from, uint256 tokenId, bytes data) \\u2192 bytes4\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\\r\\n        public\\r\\n        override\\r\\n        returns (bytes4)\\r\\n    {\\r\\n        require(msg.sender == address(this), \\\"not enabled NFT\\\");\\r\\n        return super.onERC721Received(operator, from, tokenId, data);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x4c4584263b81f7cf72ad8a0203e37021a121b8ee97a9e4acbffc7fb81fcde592\",\"license\":\"MIT\"},\"operator-filter-registry/src/DefaultOperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {OperatorFilterer} from \\\"./OperatorFilterer.sol\\\";\\n\\n/**\\n * @title  DefaultOperatorFilterer\\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\\n */\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\\n}\\n\",\"keccak256\":\"0x1d6616260cb0fa3a3c56c9db3c29b1db6037d0f30049dca5e94b4896999df991\",\"license\":\"MIT\"},\"operator-filter-registry/src/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba\",\"license\":\"MIT\"},\"operator-filter-registry/src/OperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\n\\n/**\\n * @title  OperatorFilterer\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\n *         registrant's entries in the OperatorFilterRegistry.\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\n */\\nabstract contract OperatorFilterer {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (subscribe) {\\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcdf355575d1bd6730eab09060a2fbb2d59f2c9b92de8383d35960ecc1bfc0db3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611388600b55600f80546001600160a01b0319908116736aac56305825f712fd44599e59f2ede51d42c3e71790915568056bc75e2d6310000060105565032ee841b80060115568015af1d78b58c4000060125565015d3ef79800601355601e60145560158054821673e1f1dd010bbc2860f81c8f90ea4e38db949bb16f908117909155601680548316909117905560178054909116735ac58191f3bbdf6d037c6c6201adc9f99c93c53a17905560a0604081905260006080819052620000c89160199162000554565b506040805160a0810182526064815260626020820152603291810191909152600a6060820152600160808201526200010590601a906005620005e3565b506040805160a0810182526000808252602082018190529181018290526001606082015260808101919091526200014190601b906005620005e3565b506040805161010081018252600660c082018181526521b7b6b6b7b760d11b60e084015282528251808401845260088152672ab731b7b6b6b7b760c11b60208281019190915280840191909152835180850185526004808252635261726560e01b828401528486019190915284518086018652818152634570696360e01b8184015260608501528451808601865260098152684c6567656e6461727960b81b81840152608085015284518086019095528452634d6f647360e01b9084015260a08201929092526200021691601c919062000626565b506040805160e081018252600560a0820181815264426173696360d81b60c08401528252825180840184526008815267125b5c1c9bdd995960c21b60208281019190915280840191909152835180850185526006815265213932bbb2b960d11b81830152838501528351808501855260078152665072656d69756d60c81b8183015260608401528351808501909452600e84526d283932b6b4bab690213932bbb2b960911b908401526080820192909252620002d6916022919062000679565b506040805160a0810182526005808252600a6020830152600f9282019290925260146060820152601e6080820152620003139160279190620006be565b503480156200032157600080fd5b506040805180820182526012815271109c995ddb18589cc8119b185cdac813919560721b60208083019182528351808501909452600384526221262360e91b908401528151733cc6cdda760b79bafa08df41ecfa224f810dceb693600193929091620003909160009162000554565b508051620003a690600190602084019062000554565b5050506daaeb6d7670e522a718067333cd4e3b15620004ee5780156200043c57604051633e9f1edf60e11b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e90637d3e3dbe906044015b600060405180830381600087803b1580156200041d57600080fd5b505af115801562000432573d6000803e3d6000fd5b50505050620004ee565b6001600160a01b038216156200048d5760405163a0af290360e01b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e9063a0af29039060440162000402565b604051632210724360e11b81523060048201526daaeb6d7670e522a718067333cd4e90634420e48690602401600060405180830381600087803b158015620004d457600080fd5b505af1158015620004e9573d6000803e3d6000fd5b505050505b50620004fc90503362000502565b620007a9565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000562906200076d565b90600052602060002090601f016020900481019282620005865760008555620005d1565b82601f10620005a157805160ff1916838001178555620005d1565b82800160010185558215620005d1579182015b82811115620005d1578251825591602001919060010190620005b4565b50620005df929150620006f3565b5090565b828054828255906000526020600020908101928215620005d1579160200282015b82811115620005d1578251829060ff1690559160200191906001019062000604565b82600681019282156200066b579160200282015b828111156200066b57825180516200065a91849160209091019062000554565b50916020019190600101906200063a565b50620005df9291506200070a565b82600581019282156200066b579160200282015b828111156200066b5782518051620006ad91849160209091019062000554565b50916020019190600101906200068d565b8260058101928215620005d15791602002820182811115620005d1578251829060ff1690559160200191906001019062000604565b5b80821115620005df5760008155600101620006f4565b80821115620005df5760006200072182826200072b565b506001016200070a565b50805462000739906200076d565b6000825580601f106200074a575050565b601f0160209004906000526020600020908101906200076a9190620006f3565b50565b600181811c908216806200078257607f821691505b602082108103620007a357634e487b7160e01b600052602260045260246000fd5b50919050565b6148a380620007b96000396000f3fe60806040526004361061031a5760003560e01c80636f8b44b01161019c578063c4408c8a116100e2578063e4a76dc811610090578063e4a76dc8146109b6578063e985e9c5146109d6578063ea509411146109f6578063f0f4426014610a16578063f2fde38b14610a36578063f4e0d9ac14610a56578063f65c2d5314610a76578063f751518614610a9657600080fd5b8063c4408c8a146108dc578063c467201e146108fc578063c835ec9e1461091d578063c87b56dd1461093d578063d3bf76d31461095d578063d5abeb0114610973578063dd3b5f9a1461098957600080fd5b806395d89b411161014a57806395d89b41146107e457806398bf3143146107f95780639b19251a14610819578063a22cb46514610846578063a2cd12d214610866578063a48484fd1461087c578063a8e9ddeb1461089c578063b88d4fde146108bc57600080fd5b80636f8b44b01461071157806370a0823114610731578063715018a61461075157806383c999b9146107665780638ab1d681146107865780638da5cb5b146107a657806394bf804d146107c457600080fd5b80632f5e2b1c1161026157806344b28d591161020f57806344b28d59146106165780634acf23a31461062b5780634dfa5812146106415780634f6ccce71461066157806355219d5a1461068157806361d027b3146106b15780636352211e146106d157806364d4b23d146106f157600080fd5b80632f5e2b1c1461053e5780632f745c591461055e5780633785b0901461057e5780633f87db251461059e57806340fa61f7146105be57806341f43434146105d457806342842e0e146105f657600080fd5b806313966db5116102c957806313966db51461042c578063150b7a0214610450578063177db7211461048957806318160ddd146104a95780631a665955146104be578063214405fc146104de57806323b872dd146104fe5780632baf2acb1461051e57600080fd5b8062ae3bf81461032657806301ffc9a7146103485780630442bfa81461037d57806306fdde031461039d578063081812fc146103bf578063095ea7b3146103ec578063110ea3891461040c57600080fd5b3661032157005b600080fd5b34801561033257600080fd5b50610346610341366004613a55565b610ab6565b005b34801561035457600080fd5b50610368610363366004613a8f565b610b8b565b60405190151581526020015b60405180910390f35b34801561038957600080fd5b50610346610398366004613aac565b610bb6565b3480156103a957600080fd5b506103b2610c06565b6040516103749190613b26565b3480156103cb57600080fd5b506103df6103da366004613b39565b610c98565b6040516103749190613b52565b3480156103f857600080fd5b50610346610407366004613b66565b610cbf565b34801561041857600080fd5b506015546103df906001600160a01b031681565b34801561043857600080fd5b5061044260105481565b604051908152602001610374565b34801561045c57600080fd5b5061047061046b366004613c1e565b610cd3565b6040516001600160e01b03199091168152602001610374565b34801561049557600080fd5b506103466104a4366004613b39565b610d2d565b3480156104b557600080fd5b50600854610442565b3480156104ca57600080fd5b50600f546103df906001600160a01b031681565b3480156104ea57600080fd5b506103466104f9366004613b66565b610eb7565b34801561050a57600080fd5b50610346610519366004613c9e565b610f18565b34801561052a57600080fd5b50610346610539366004613cdf565b610f43565b34801561054a57600080fd5b50610346610559366004613a55565b611063565b34801561056a57600080fd5b50610442610579366004613b66565b6110e7565b34801561058a57600080fd5b50610442610599366004613d24565b61117d565b3480156105aa57600080fd5b506103466105b9366004613db1565b61154b565b3480156105ca57600080fd5b5061044260125481565b3480156105e057600080fd5b506103df6daaeb6d7670e522a718067333cd4e81565b34801561060257600080fd5b50610346610611366004613c9e565b611596565b34801561062257600080fd5b506103466115bb565b34801561063757600080fd5b5061044260115481565b34801561064d57600080fd5b5061034661065c366004613a55565b61164d565b34801561066d57600080fd5b5061044261067c366004613b39565b6116c7565b34801561068d57600080fd5b5061036861069c366004613a55565b600e6020526000908152604090205460ff1681565b3480156106bd57600080fd5b506017546103df906001600160a01b031681565b3480156106dd57600080fd5b506103df6106ec366004613b39565b61175a565b3480156106fd57600080fd5b5061034661070c366004613b39565b61178f565b34801561071d57600080fd5b5061034661072c366004613b39565b6117cc565b34801561073d57600080fd5b5061044261074c366004613a55565b611849565b34801561075d57600080fd5b506103466118cf565b34801561077257600080fd5b50600d546103df906001600160a01b031681565b34801561079257600080fd5b506103466107a1366004613a55565b6118e3565b3480156107b257600080fd5b50600a546001600160a01b03166103df565b3480156107d057600080fd5b506103466107df366004613dfa565b61193b565b3480156107f057600080fd5b506103b2611d18565b34801561080557600080fd5b506103b2610814366004613b39565b611d27565b34801561082557600080fd5b50610442610834366004613a55565b602d6020526000908152604090205481565b34801561085257600080fd5b50610346610861366004613e38565b611dc7565b34801561087257600080fd5b5061044260145481565b34801561088857600080fd5b50610346610897366004613aac565b611ddb565b3480156108a857600080fd5b506103466108b7366004613a55565b611e23565b3480156108c857600080fd5b506103466108d7366004613c1e565b611efd565b3480156108e857600080fd5b50600c546103df906001600160a01b031681565b34801561090857600080fd5b50600a5461036890600160a01b900460ff1681565b34801561092957600080fd5b50610442610938366004613b39565b611f2a565b34801561094957600080fd5b506103b2610958366004613b39565b611f41565b34801561096957600080fd5b5061044260135481565b34801561097f57600080fd5b50610442600b5481565b34801561099557600080fd5b506104426109a4366004613b39565b6000908152602c602052604090205490565b3480156109c257600080fd5b506016546103df906001600160a01b031681565b3480156109e257600080fd5b506103686109f1366004613e66565b61228d565b348015610a0257600080fd5b506103b2610a11366004613b39565b6122bb565b348015610a2257600080fd5b50610346610a31366004613a55565b6122cb565b348015610a4257600080fd5b50610346610a51366004613a55565b612344565b348015610a6257600080fd5b50610346610a71366004613a55565b6123ba565b348015610a8257600080fd5b50610346610a91366004613e38565b612433565b348015610aa257600080fd5b50610346610ab1366004613a55565b6124bd565b610abe612536565b6001600160a01b038116610b00576040514790339082156108fc029083906000818181858888f19350505050158015610afb573d6000803e3d6000fd5b505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610b2f903090600401613b52565b602060405180830381865afa158015610b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b709190613e94565b9050610b866001600160a01b0383163383612590565b505b50565b60006001600160e01b0319821663780e9d6360e01b1480610bb05750610bb0826125e6565b92915050565b610bbe612536565b6010829055601181905560408051838152602081018390527f44d4a06d863160370919caa06915c580288234ffbd37e330623be1d73574dea291015b60405180910390a15050565b606060008054610c1590613ead565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4190613ead565b8015610c8e5780601f10610c6357610100808354040283529160200191610c8e565b820191906000526020600020905b815481529060010190602001808311610c7157829003601f168201915b5050505050905090565b6000610ca382612636565b506000908152600460205260409020546001600160a01b031690565b81610cc98161265b565b610afb838361270b565b6000333014610d1b5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b98589b195908139195608a1b60448201526064015b60405180910390fd5b50630a85bd0160e11b5b949350505050565b610d35612536565b6000818152602c6020526040902054600614610d935760405162461bcd60e51b815260206004820152601a60248201527f63616e2072656d6f7665206f6e6c79204d6f647320746f6b656e0000000000006044820152606401610d12565b600c546001600160a01b031615610e9d576000610daf8261175a565b600c549091506001600160a01b0390811690821603610e9b57600d546040516331a9108f60e11b8152600481018490526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e359190613ee7565b600c5460405163a93a019f60e01b81529192506001600160a01b03169063a93a019f90610e689084908690600401613f04565b600060405180830381600087803b158015610e8257600080fd5b505af1158015610e96573d6000803e3d6000fd5b505050505b505b610ea68161281b565b6000908152602c6020526040812055565b610ebf612536565b6001600160a01b0382166000818152602d602052604090819020839055517f6ea640312e182de387819fbeb13be00db3171a445412852248559054871c419990610f0c9084815260200190565b60405180910390a25050565b826001600160a01b0381163314610f3257610f323361265b565b610f3d8484846128ad565b50505050565b610f4b612536565b60008111610f6b5760405162461bcd60e51b8152600401610d1290613f1d565b601454811115610f8d5760405162461bcd60e51b8152600401610d1290613f45565b600082118015610f9e575060068211155b610fdb5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642072617269747960901b6044820152606401610d12565b600b5481610fe860085490565b610ff29190613f92565b11156110105760405162461bcd60e51b8152600401610d1290613faa565b60005b81811015610f3d576018805490600061102b83613fdb565b9091555050601880546000908152602c60205260409020849055546110519085906128de565b8061105b81613fdb565b915050611013565b61106b612536565b6001600160a01b0381166110915760405162461bcd60e51b8152600401610d1290613ff4565b601680546001600160a01b0319166001600160a01b0383161790556040517f04d877fc28d5266225dad2da3d458a663d3853e0d3505280c683cc9e0610b544906110dc908390613b52565b60405180910390a150565b60006110f283611849565b82106111545760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610d12565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b81516000908152602c60205260408120546003116111f15760405162461bcd60e51b815260206004820152602b60248201527f4f6e6c7920636f6d6d6f6e206f7220756e636f6d6d6f6e204e46542063616e2060448201526a1899481d5c19dc9859195960aa1b6064820152608401610d12565b6020838101516000908152602c9091526040808220548551835291205414801561123857506040838101516000908152602c60209081528282205490860151825291902054145b61127e5760405162461bcd60e51b815260206004820152601760248201527652617269746965732073686f756c642062652073616d6560481b6044820152606401610d12565b6001600160a01b0382166000908152600e602052604090205460ff166112e65760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420616c6c6f77656420666f722075706772616465204e465400000000006044820152606401610d12565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a9190614033565b611355906012614056565b61136090600a61415d565b90506000816012546113729190614182565b905080846001600160a01b03166370a08231336040518263ffffffff1660e01b81526004016113a19190613b52565b602060405180830381865afa1580156113be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e29190613e94565b10156114005760405162461bcd60e51b8152600401610d1290614196565b601654601354600f54611424926001600160a01b03918216923392909116906128f8565b601554611440906001600160a01b0386811691339116846128f8565b84516000908152602c602052604081205461145c906001613f92565b905060005b60038110156114cc5761149b33308984600381106114815761148161401d565b602002015160405180602001604052806000815250612930565b6114ba8782600381106114b0576114b061401d565b602002015161281b565b806114c481613fdb565b915050611461565b50601880549060006114dd83613fdb565b9091555050601880546000908152602c60205260409020829055546115039033906128de565b7fa3d4aa96764ae47791cf7b8bbdf866a220c9cb6c72e55e39e62c1bb88d688cd6866018546040516115369291906141c0565b60405180910390a15050601854949350505050565b611553612536565b80516115669060199060208401906139a7565b507f6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad816040516110dc9190613b26565b826001600160a01b03811633146115b0576115b03361265b565b610f3d848484612963565b6115c3612536565b600a54600160a01b900460ff161561160f5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e48195b98589b1959608a1b6044820152606401610d12565b600a805460ff60a01b1916600160a01b1790556040517f7d4c15f0a1a76cde938e0b5d3a1c1e9905f57401c4aed53ae344801d156736e690600090a1565b611655612536565b6001600160a01b03811661167b5760405162461bcd60e51b8152600401610d1290613ff4565b600d80546001600160a01b0319166001600160a01b0383169081179091556040517fffaaae2d53073be489935fc1d4320de5c29942766bf4c667adaf8f60e2897d40916110dc91613b52565b60006116d260085490565b82106117355760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610d12565b600882815481106117485761174861401d565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b031680610bb05760405162461bcd60e51b8152600401610d12906141f8565b611797612536565b60148190556040518181527fe2829e0b58973a393a64fea85d3ecff10b2cce5a330ce077046a0aa39a580d36906020016110dc565b6117d4612536565b600b5481116118145760405162461bcd60e51b815260206004820152600c60248201526b14db585b1b08185b5bdd5b9d60a21b6044820152606401610d12565b600b8190556040518181527f3f8118fc46e72ecde0c5e090803cad8c88e817b2f1e93e820aa9bfbf51f2468d906020016110dc565b60006001600160a01b0382166118b35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610d12565b506001600160a01b031660009081526003602052604090205490565b6118d7612536565b6118e1600061297e565b565b6118eb612536565b6001600160a01b0381166000818152602d60209081526040808320839055519182527f6ea640312e182de387819fbeb13be00db3171a445412852248559054871c4199910160405180910390a250565b600a54600160a01b900460ff166119875760405162461bcd60e51b815260206004820152601060248201526f135a5b9d081a5cc8191a5cd8589b195960821b6044820152606401610d12565b600082116119a75760405162461bcd60e51b8152600401610d1290613f1d565b6014548211156119c95760405162461bcd60e51b8152600401610d1290613f45565b600b54826119d660085490565b6119e09190613f92565b11156119fe5760405162461bcd60e51b8152600401610d1290613faa565b6001600160a01b0381166000908152600e602052604090205460ff16611a5d5760405162461bcd60e51b8152602060048201526014602482015273139bdd08185b1b1bddd95908199bdc881b5a5b9d60621b6044820152606401610d12565b336000908152602d6020526040902054821115611c8c576000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad89190614033565b611ae3906012614056565b611aee90600a61415d565b336000908152602d602052604081205491925090611b0c908561422a565b82601054611b1a9190614182565b611b249190614241565b905080836001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401611b539190613b52565b602060405180830381865afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b949190613e94565b1015611bb25760405162461bcd60e51b8152600401610d1290614196565b601754336000818152602d6020526040902054611bfe926001600160a01b031690611bdd908861422a565b601154611bea9190614241565b600f546001600160a01b03169291906128f8565b611c136001600160a01b0384163330846128f8565b601654611c3f906001600160a01b0316611c2e600484614182565b6001600160a01b0386169190612590565b601754611c5a906001600160a01b0316611c2e600484614182565b601554611c75906001600160a01b0316611c2e600284614182565b5050336000908152602d6020526040812055611cb8565b336000908152602d6020526040902054611ca790839061422a565b336000908152602d60205260409020555b60005b82811015610afb5760188054906000611cd383613fdb565b9190505550611ce4601854846129d0565b601880546000908152602c602052604090209190915554611d069033906128de565b80611d1081613fdb565b915050611cbb565b606060018054610c1590613ead565b601c8160068110611d3757600080fd5b018054909150611d4690613ead565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7290613ead565b8015611dbf5780601f10611d9457610100808354040283529160200191611dbf565b820191906000526020600020905b815481529060010190602001808311611da257829003601f168201915b505050505081565b81611dd18161265b565b610afb8383612ae2565b611de3612536565b6012829055601381905560408051838152602081018390527fe0659b795874c6fb3d1b606fd69a7d75b3070a5844be489f48a1923a38e6235b9101610bfa565b611e2b612536565b6001600160a01b038116611e515760405162461bcd60e51b8152600401610d1290613ff4565b60405163a93a019f60e01b81526001600160a01b0382169063a93a019f90611e80903090600190600401613f04565b600060405180830381600087803b158015611e9a57600080fd5b505af1158015611eae573d6000803e3d6000fd5b5050600c80546001600160a01b0319166001600160a01b03851617905550506040517f6a9882c578a664a414e2b8fed6fde87ed8eb96123b53f892d8f3964e03e4fa6c906110dc908390613b52565b836001600160a01b0381163314611f1757611f173361265b565b611f2385858585612aed565b5050505050565b60278160058110611f3a57600080fd5b0154905081565b6060611f4c82612b1f565b611fb25760405162461bcd60e51b815260206004820152603160248201527f427265776c616273466c61736b4e66743a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610d12565b6000611fbc612b3c565b9050600060405160200161209a907f226465736372697074696f6e223a2022427265776c61627320466c61736b204e81527f465420636f6c6c656374696f6e2070726f76696465732066656520726564756360208201527f74696f6e7320616e642062656e6566697473206163726f737320766172696f7560408201527f7320427265776c6162732070726f64756374732061732077656c6c206173206160608201527f636365737320746f206578636c7573697665204e4654207374616b696e67207060808201526537b7b639971160d11b60a082015260a60190565b60408051601f198184030181529181526000868152602c60205290812054919250906120c89060019061422a565b90506000601c82600681106120df576120df61401d565b0180546120eb90613ead565b80601f016020809104026020016040519081016040528092919081815260200182805461211790613ead565b80156121645780601f1061213957610100808354040283529160200191612164565b820191906000526020600020905b81548152906001019060200180831161214757829003601f168201915b505050505090508160050361217857600491505b60408051808201909152600e81526d2261747472696275746573223a5b60901b602082015280826121bc602786600581106121b5576121b561401d565b0154612b4b565b602286600581106121cf576121cf61401d565b016040516020016121e3949392919061427c565b604051602081830303815290604052905060008583604051602001612209929190614457565b60405160208183030381529060405290506000612224610c06565b61222d8a612b4b565b8784858760405160200161224696959493929190614493565b604051602081830303815290604052905061226081612bde565b60405160200161227091906145c9565b604051602081830303815290604052975050505050505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60228160058110611d3757600080fd5b6122d3612536565b6001600160a01b0381166122f95760405162461bcd60e51b8152600401610d1290613ff4565b601780546001600160a01b0319166001600160a01b0383161790556040517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef3906110dc908390613b52565b61234c612536565b6001600160a01b0381166123b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d12565b610b888161297e565b6123c2612536565b6001600160a01b0381166123e85760405162461bcd60e51b8152600401610d1290613ff4565b601580546001600160a01b0319166001600160a01b0383161790556040517fd6912e103d1553f15e77ffc98e99da32c9ce0d21d8be27cbb38437b1afe30928906110dc908390613b52565b61243b612536565b6001600160a01b0382166124615760405162461bcd60e51b8152600401610d129061460e565b6001600160a01b0382166000818152600e6020908152604091829020805460ff19168515159081179091558251938452908301527fcdaaca9eba749e91abd338e3b4c0eeb514d7bc059e7ba5dd8c0dea5be8d2c9049101610bfa565b6124c5612536565b6001600160a01b0381166124eb5760405162461bcd60e51b8152600401610d129061460e565b600f80546001600160a01b0319166001600160a01b0383161790556040517f61e4f1c8d3c68e8f5f4c85567de53396ef1c8f25803b33147d87232e8c55dcfb906110dc908390613b52565b600a546001600160a01b031633146118e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d12565b610afb8363a9059cbb60e01b84846040516024016125af929190613f04565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d45565b60006001600160e01b031982166380ac58cd60e01b148061261757506001600160e01b03198216635b5e139f60e01b145b80610bb057506301ffc9a760e01b6001600160e01b0319831614610bb0565b61263f81612b1f565b610b885760405162461bcd60e51b8152600401610d12906141f8565b6daaeb6d7670e522a718067333cd4e3b15610b8857604051633185c44d60e21b81523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa1580156126c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ec9190614635565b610b885780604051633b79c77360e21b8152600401610d129190613b52565b60006127168261175a565b9050806001600160a01b0316836001600160a01b0316036127835760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610d12565b336001600160a01b038216148061279f575061279f813361228d565b6128115760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610d12565b610afb8383612e17565b60006128268261175a565b9050612836816000846001612e85565b61283f8261175a565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b03851680855260038452828520805460001901905587855260029093528184208054909116905551929350849260008051602061484e833981519152908390a4610b86565b6128b73382612f3f565b6128d35760405162461bcd60e51b8152600401610d1290614652565b610afb838383612f9d565b610b868282604051806020016040528060008152506130fc565b6040516001600160a01b0380851660248301528316604482015260648101829052610f3d9085906323b872dd60e01b906084016125af565b61293b848484612f9d565b6129478484848461312f565b610f3d5760405162461bcd60e51b8152600401610d129061469f565b610afb83838360405180602001604052806000815250611efd565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080333a43426129e260018361422a565b406129ed8989613f92565b604080516001600160a01b0390971660208801528601949094526060850192909252608084015260a083015260c082015260e0016040516020818303038152906040528051906020012060001c90506000600b5482612a4c91906146f1565b601a54909150600090612a5f90836146f1565b90506000600b54836064612a739190614241565b612a7d9190614182565b9050601a8281548110612a9257612a9261401d565b9060005260206000200154811015612aab575080612acc565b601b8281548110612abe57612abe61401d565b906000526020600020015490505b612ad7816001613f92565b979650505050505050565b610b8633838361322d565b612af73383612f3f565b612b135760405162461bcd60e51b8152600401610d1290614652565b610f3d84848484612930565b6000908152600260205260409020546001600160a01b0316151590565b606060198054610c1590613ead565b60606000612b58836132f7565b600101905060008167ffffffffffffffff811115612b7857612b78613b92565b6040519080825280601f01601f191660200182016040528015612ba2576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612bac57509392505050565b60608151600003612bfd57505060408051602081019091526000815290565b600060405180606001604052806040815260200161480e6040913990506000600384516002612c2c9190613f92565b612c369190614182565b612c41906004614241565b90506000612c50826020613f92565b67ffffffffffffffff811115612c6857612c68613b92565b6040519080825280601f01601f191660200182016040528015612c92576020820181803683370190505b509050818152600183018586518101602084015b81831015612d005760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401612ca6565b600389510660018114612d1a5760028114612d2b57612d37565b613d3d60f01b600119830152612d37565b603d60f81b6000198301525b509398975050505050505050565b6000612d9a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133cf9092919063ffffffff16565b805190915015610afb5780806020019051810190612db89190614635565b610afb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d12565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612e4c8261175a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000828152602c602052604090205460061180612ea957506001600160a01b038416155b80612ebb57506001600160a01b038316155b80612ed35750600c546001600160a01b038581169116145b80612eeb5750600c546001600160a01b038481169116145b612f335760405162461bcd60e51b815260206004820152601960248201527843616e6e6f74207472616e73666572204d6f6473206974656d60381b6044820152606401610d12565b610f3d848484846133de565b600080612f4b8361175a565b9050806001600160a01b0316846001600160a01b03161480612f725750612f72818561228d565b80610d255750836001600160a01b0316612f8b84610c98565b6001600160a01b031614949350505050565b826001600160a01b0316612fb08261175a565b6001600160a01b031614612fd65760405162461bcd60e51b8152600401610d1290614705565b6001600160a01b0382166130385760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610d12565b6130458383836001612e85565b826001600160a01b03166130588261175a565b6001600160a01b03161461307e5760405162461bcd60e51b8152600401610d1290614705565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652600385528386208054600019019055908716808652838620805460010190558686526002909452828520805490921684179091559051849360008051602061484e83398151915291a4505050565b6131068383613517565b613113600084848461312f565b610afb5760405162461bcd60e51b8152600401610d129061469f565b60006001600160a01b0384163b1561322557604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061317390339089908890889060040161474a565b6020604051808303816000875af19250505080156131ae575060408051601f3d908101601f191682019092526131ab91810190614787565b60015b61320b573d8080156131dc576040519150601f19603f3d011682016040523d82523d6000602084013e6131e1565b606091505b5080516000036132035760405162461bcd60e51b8152600401610d129061469f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610d25565b506001610d25565b816001600160a01b0316836001600160a01b03160361328a5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610d12565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106133365772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613362576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061338057662386f26fc10000830492506010015b6305f5e1008310613398576305f5e100830492506008015b61271083106133ac57612710830492506004015b606483106133be576064830492506002015b600a8310610bb05760010192915050565b6060610d258484600085613621565b6133ea848484846136f1565b60018111156134595760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610d12565b816001600160a01b0385166134b5576134b081600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6134d8565b836001600160a01b0316856001600160a01b0316146134d8576134d88582613779565b6001600160a01b0384166134f4576134ef81613816565b611f23565b846001600160a01b0316846001600160a01b031614611f2357611f2384826138c5565b6001600160a01b03821661356d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610d12565b61357681612b1f565b156135935760405162461bcd60e51b8152600401610d12906147a4565b6135a1600083836001612e85565b6135aa81612b1f565b156135c75760405162461bcd60e51b8152600401610d12906147a4565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b03191684179055518392919060008051602061484e833981519152908290a4610b86565b6060824710156136825760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d12565b600080866001600160a01b0316858760405161369e91906147db565b60006040518083038185875af1925050503d80600081146136db576040519150601f19603f3d011682016040523d82523d6000602084013e6136e0565b606091505b5091509150612ad787838387613909565b6001811115610f3d576001600160a01b03841615613737576001600160a01b0384166000908152600360205260408120805483929061373190849061422a565b90915550505b6001600160a01b03831615610f3d576001600160a01b0383166000908152600360205260408120805483929061376e908490613f92565b909155505050505050565b6000600161378684611849565b613790919061422a565b6000838152600760205260409020549091508082146137e3576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906138289060019061422a565b600083815260096020526040812054600880549394509092849081106138505761385061401d565b9060005260206000200154905080600883815481106138715761387161401d565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806138a9576138a96147f7565b6001900381819060005260206000200160009055905550505050565b60006138d083611849565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60608315613978578251600003613971576001600160a01b0385163b6139715760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d12565b5081610d25565b610d25838381511561398d5781518083602001fd5b8060405162461bcd60e51b8152600401610d129190613b26565b8280546139b390613ead565b90600052602060002090601f0160209004810192826139d55760008555613a1b565b82601f106139ee57805160ff1916838001178555613a1b565b82800160010185558215613a1b579182015b82811115613a1b578251825591602001919060010190613a00565b50613a27929150613a2b565b5090565b5b80821115613a275760008155600101613a2c565b6001600160a01b0381168114610b8857600080fd5b600060208284031215613a6757600080fd5b8135613a7281613a40565b9392505050565b6001600160e01b031981168114610b8857600080fd5b600060208284031215613aa157600080fd5b8135613a7281613a79565b60008060408385031215613abf57600080fd5b50508035926020909101359150565b60005b83811015613ae9578181015183820152602001613ad1565b83811115610f3d5750506000910152565b60008151808452613b12816020860160208601613ace565b601f01601f19169290920160200192915050565b602081526000613a726020830184613afa565b600060208284031215613b4b57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060408385031215613b7957600080fd5b8235613b8481613a40565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115613bc357613bc3613b92565b604051601f8501601f19908116603f01168101908282118183101715613beb57613beb613b92565b81604052809350858152868686011115613c0457600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215613c3457600080fd5b8435613c3f81613a40565b93506020850135613c4f81613a40565b925060408501359150606085013567ffffffffffffffff811115613c7257600080fd5b8501601f81018713613c8357600080fd5b613c9287823560208401613ba8565b91505092959194509250565b600080600060608486031215613cb357600080fd5b8335613cbe81613a40565b92506020840135613cce81613a40565b929592945050506040919091013590565b600080600060608486031215613cf457600080fd5b8335613cff81613a40565b95602085013595506040909401359392505050565b8035613d1f81613a40565b919050565b60008060808385031215613d3757600080fd5b83601f840112613d4657600080fd5b6040516060810181811067ffffffffffffffff82111715613d6957613d69613b92565b604052806060850186811115613d7e57600080fd5b855b81811015613d98578035835260209283019201613d80565b50829450613da581613d14565b93505050509250929050565b600060208284031215613dc357600080fd5b813567ffffffffffffffff811115613dda57600080fd5b8201601f81018413613deb57600080fd5b610d2584823560208401613ba8565b60008060408385031215613e0d57600080fd5b823591506020830135613e1f81613a40565b809150509250929050565b8015158114610b8857600080fd5b60008060408385031215613e4b57600080fd5b8235613e5681613a40565b91506020830135613e1f81613e2a565b60008060408385031215613e7957600080fd5b8235613e8481613a40565b91506020830135613e1f81613a40565b600060208284031215613ea657600080fd5b5051919050565b600181811c90821680613ec157607f821691505b602082108103613ee157634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215613ef957600080fd5b8151613a7281613a40565b6001600160a01b03929092168252602082015260400190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6020808252601c908201527f43616e6e6f7420657863656564206f6e652d74696d65206c696d697400000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115613fa557613fa5613f7c565b500190565b60208082526017908201527643616e6e6f7420657863656564206d6178537570706c7960481b604082015260600190565b600060018201613fed57613fed613f7c565b5060010190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561404557600080fd5b815160ff81168114613a7257600080fd5b600060ff821660ff84168082101561407057614070613f7c565b90039392505050565b600181815b808511156140b457816000190482111561409a5761409a613f7c565b808516156140a757918102915b93841c939080029061407e565b509250929050565b6000826140cb57506001610bb0565b816140d857506000610bb0565b81600181146140ee57600281146140f857614114565b6001915050610bb0565b60ff84111561410957614109613f7c565b50506001821b610bb0565b5060208310610133831016604e8410600b8410161715614137575081810a610bb0565b6141418383614079565b806000190482111561415557614155613f7c565b029392505050565b6000613a7260ff8416836140bc565b634e487b7160e01b600052601260045260246000fd5b6000826141915761419161416c565b500490565b60208082526010908201526f496e73756666696369656e742066656560801b604082015260600190565b60808101818460005b60038110156141e85781518352602092830192909101906001016141c9565b5050508260608301529392505050565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60008282101561423c5761423c613f7c565b500390565b600081600019048311821515161561425b5761425b613f7c565b500290565b60008151614272818560208601613ace565b9290920192915050565b60008551602061428f8285838b01613ace565b7f7b2274726169745f74797065223a224e6574776f726b222c202276616c7565229184019182527f3a22424e4220436861696e227d2c207b2274726169745f74797065223a225261818301526f3934ba3c911610113b30b63ab2911d1160811b6040830152865161430681605085018a8501613ace565b7f227d2c207b2274726169745f74797065223a2246656520526564756374696f6e605093909101928301526b111610113b30b63ab2911d1160a11b6070830152855161435881607c8501848a01613ace565b7f2e303025227d2c207b2274726169745f74797065223a22466561747572652041607c93909101928301527031b1b2b9b9911610113b30b63ab2911d1160791b609c830152845460ad90600090600181811c90808316806143ba57607f831692505b86831081036143d757634e487b7160e01b85526022600452602485fd5b8080156143eb576001811461440057614431565b60ff1985168988015283890187019550614431565b60008c81526020902060005b858110156144275781548b82018a015290840190890161440c565b505086848a010195505b50505050506144498162227d5d60e81b815260030190565b9a9950505050505050505050565b60008351614469818460208801613ace565b602f60f81b9083019081528351614487816001840160208801613ace565b01600101949350505050565b693d913730b6b2911d101160b11b815286516000906144b981600a850160208c01613ace565b61202360f01b600a9184019182015287516144db81600c840160208c01613ace565b6201116160ed1b600c929091019182015286516144ff81600f840160208b01613ace565b7f2c202265787465726e616c5f75726c223a202268747470733a2f2f6561726e2e600f92909101918201527f627265776c6162732e696e666f2f6e6674222c2022696d616765223a20220000602f820152855161456381604d840160208a01613ace565b6144496145bc6145b66145a361459d604d8688010178173837339116101130b734b6b0ba34b7b72fbab936111d101160391b815260190190565b8a614260565b6601736b81a1116160cd1b815260070190565b87614260565b607d60f81b815260010190565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161460181601d850160208701613ace565b91909101601d0192915050565b6020808252600d908201526c24b73b30b634b2103a37b5b2b760991b604082015260600190565b60006020828403121561464757600080fd5b8151613a7281613e2a565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000826147005761470061416c565b500690565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061477d90830184613afa565b9695505050505050565b60006020828403121561479957600080fd5b8151613a7281613a79565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b600082516147ed818460208701613ace565b9190910192915050565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220d13b946021afa32dd9d2f7f701e47421d983a03523f7505fb14960fde25596d364736f6c634300080e0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "onERC721Received(address operator, address from, uint256 tokenId, bytes data) → bytes4 It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3708,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3710,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3714,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3718,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3722,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3728,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4776,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4780,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4783,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4787,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 883,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 33208,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "mintAllowed",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 33211,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "maxSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 33213,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "nftStaking",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 33215,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "mirrorNft",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 33219,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "tokenAllowed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 33225,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "brews",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IERC20)3296"
      },
      {
        "astId": 33228,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "mintFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 33235,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "brewsMintFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 33238,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "upgradeFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 33245,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "brewsUpgradeFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 33248,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "oneTimeLimit",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 33251,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "stakingAddr",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 33254,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "brewsWallet",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 33257,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "treasury",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 33259,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "tokenIndex",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 33262,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "_tokenBaseURI",
        "offset": 0,
        "slot": "25",
        "type": "t_string_storage"
      },
      {
        "astId": 33271,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "probabilities",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 33280,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "aliases",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 33291,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "rarityNames",
        "offset": 0,
        "slot": "28",
        "type": "t_array(t_string_storage)6_storage"
      },
      {
        "astId": 33301,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "featureAccesses",
        "offset": 0,
        "slot": "34",
        "type": "t_array(t_string_storage)5_storage"
      },
      {
        "astId": 33311,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "feeReductions",
        "offset": 0,
        "slot": "39",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 33315,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "rarities",
        "offset": 0,
        "slot": "44",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 33319,
        "contract": "contracts/indexes/BrewlabsFlaskNft.sol:BrewlabsFlaskNft",
        "label": "whitelist",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)5_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_string_storage)6_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3296": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}