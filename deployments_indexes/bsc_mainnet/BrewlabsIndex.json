{
  "address": "0xC3283Fc210Ba6c4C9597860D2f7b3aB99cD339A0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "CommissionClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DeployerNftMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DeployerNftStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DeployerNftUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ServiceInfoChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newNftAddr",
          "type": "address"
        }
      ],
      "name": "SetDeployerNft",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "SetFeeWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        }
      ],
      "name": "SetFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newNftAddr",
          "type": "address"
        }
      ],
      "name": "SetIndexNft",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "SetSwapAggregator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        }
      ],
      "name": "TokenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenUnLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "percents",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amountOuts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        }
      ],
      "name": "TokenZappedIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        }
      ],
      "name": "TokenZappedOut",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUM_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WNATIVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commissionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commissionWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployerNft",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployerNftId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "estimateEthforNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "estimateEthforUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IBrewlabsIndexFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingCommissions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFromChainlink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexNft",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC721",
          "name": "_indexNft",
          "type": "address"
        },
        {
          "internalType": "contract IERC721",
          "name": "_deployerNft",
          "type": "address"
        },
        {
          "internalType": "uint256[2]",
          "name": "_fees",
          "type": "uint256[2]"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_deployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_commissionWallet",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintDeployerNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "nftInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_percents",
          "type": "uint256[]"
        }
      ],
      "name": "precomputeZapIn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBrewlabsAggregator.FormattedOffer[]",
          "name": "queries",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "precomputeZapOut",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBrewlabsAggregator.FormattedOffer[]",
          "name": "queries",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "newNftAddr",
          "type": "address"
        }
      ],
      "name": "setDeployerNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeWallet",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositfee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commissionFee",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "newNftAddr",
          "type": "address"
        }
      ],
      "name": "setIndexNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setServiceInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "setSwapAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDeployerNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakeNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAggregator",
      "outputs": [
        {
          "internalType": "contract IBrewlabsAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCommissions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeDeployerNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_percents",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct IBrewlabsAggregator.Trade[]",
          "name": "_trades",
          "type": "tuple[]"
        }
      ],
      "name": "zapIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct IBrewlabsAggregator.Trade[]",
          "name": "_trades",
          "type": "tuple[]"
        }
      ],
      "name": "zapOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2c1cc00c1abfaabfe2f369d1649e8523f1ec7e0e8c81caab35cbf3646dd6c714",
  "receipt": {
    "to": null,
    "from": "0xCD3b71D65D1f03F0b2c5a4e67A17347dc71141f7",
    "contractAddress": "0xC3283Fc210Ba6c4C9597860D2f7b3aB99cD339A0",
    "transactionIndex": 119,
    "gasUsed": "5393441",
    "logsBloom": "0x
    "blockHash": "0x23daa8a02215272eb6bb6ae1e39b6f1b49aca8426f7a13cd51c1ef00d983b88b",
    "transactionHash": "0x2c1cc00c1abfaabfe2f369d1649e8523f1ec7e0e8c81caab35cbf3646dd6c714",
    "logs": [
      {
        "transactionIndex": 119,
        "blockNumber": 29553677,
        "transactionHash": "0x2c1cc00c1abfaabfe2f369d1649e8523f1ec7e0e8c81caab35cbf3646dd6c714",
        "address": "0xC3283Fc210Ba6c4C9597860D2f7b3aB99cD339A0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cd3b71d65d1f03f0b2c5a4e67a17347dc71141f7"
        ],
        "data": "0x",
        "logIndex": 317,
        "blockHash": "0x23daa8a02215272eb6bb6ae1e39b6f1b49aca8426f7a13cd51c1ef00d983b88b"
      }
    ],
    "blockNumber": 29553677,
    "cumulativeGasUsed": "16811048",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0260463c7c8cf539a785493e0f5dd08b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CommissionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeployerNftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeployerNftStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeployerNftUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ServiceInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newNftAddr\",\"type\":\"address\"}],\"name\":\"SetDeployerNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SetFeeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newNftAddr\",\"type\":\"address\"}],\"name\":\"SetIndexNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SetSwapAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenUnLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountOuts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"TokenZappedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"TokenZappedOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WNATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployerNft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployerNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"estimateEthforNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"estimateEthforUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IBrewlabsIndexFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingCommissions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFromChainlink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexNft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721\",\"name\":\"_indexNft\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_deployerNft\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_fees\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_commissionWallet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintDeployerNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_percents\",\"type\":\"uint256[]\"}],\"name\":\"precomputeZapIn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct IBrewlabsAggregator.FormattedOffer[]\",\"name\":\"queries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"precomputeZapOut\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct IBrewlabsAggregator.FormattedOffer[]\",\"name\":\"queries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"newNftAddr\",\"type\":\"address\"}],\"name\":\"setDeployerNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"newNftAddr\",\"type\":\"address\"}],\"name\":\"setIndexNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setServiceInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"setSwapAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDeployerNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAggregator\",\"outputs\":[{\"internalType\":\"contract IBrewlabsAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeDeployerNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_percents\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct IBrewlabsAggregator.Trade[]\",\"name\":\"_trades\",\"type\":\"tuple[]\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct IBrewlabsAggregator.Trade[]\",\"name\":\"_trades\",\"type\":\"tuple[]\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"estimateEthforNft(uint256)\":{\"params\":{\"_tokenId\":\": token Id of BrewlabsIndex NFT\"}},\"estimateEthforUser(address)\":{\"params\":{\"_user\":\": user address\"}},\"initialize(string,address,address[],address,address,uint256[2],address,address,address)\":{\"params\":{\"_commissionWallet\":\": index commission wallet\",\"_deployer\":\": index deployer address\",\"_deployerNft\":\": Deployer NFT address\",\"_fees\":\": additional fee for deployer\",\"_indexNft\":\": Index NFT address\",\"_name\":\": index name\",\"_owner\":\": index owner address\",\"_tokens\":\": token list that user can buy in a transaction\"}},\"nftInfo(uint256)\":{\"params\":{\"_tokenId\":\": owned tokenId\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueTokens(address)\":{\"params\":{\"_token\":\": token address\"}},\"setFeeWallet(address)\":{\"params\":{\"_feeWallet\":\": address to receive deposit/commission fee\"}},\"setFees(uint256,uint256)\":{\"params\":{\"_commissionFee\":\": commission fee in point\",\"_depositfee\":\": deposit fee in point\"}},\"setServiceInfo(address,uint256)\":{\"params\":{\"_addr\":\": new treasury address\",\"_fee\":\": percentage in point\"}},\"setSwapAggregator(address)\":{\"params\":{\"_aggregator\":\": swap Aggregator address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userInfo(address)\":{\"params\":{\"_user\":\": user address\"}},\"zapIn(address,uint256,uint256[],(uint256,uint256,address[],address[])[])\":{\"params\":{\"_percents\":\": list of ETH allocation points to buy tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimTokens(uint256)\":{\"notice\":\"Claim tokens from contract.         If the user exits the index in a loss then there is no fee.         If the user exists the index in a profit, processing fee will be applied.\"},\"estimateEthforNft(uint256)\":{\"notice\":\"Returns estimated eth amount that can get from NFT item.\"},\"estimateEthforUser(address)\":{\"notice\":\"Returns estimated eth amount when user zapout.\"},\"initialize(string,address,address[],address,address,uint256[2],address,address,address)\":{\"notice\":\"Initialize index contract.\"},\"mintNft()\":{\"notice\":\"Once the user purchases the tokens through the contract, the user can then choose to at anytime  to mint an NFT that would represent the ownership of their tokens in the contract. The purpose of this is to allow users to mint an NFT that represents their value in the index and at their discretion,  transfer or sell that NFT to another wallet.\"},\"nftInfo(uint256)\":{\"notice\":\"Returns tokens locked in NFT and ETH amount at the time when bought tokens.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"onERC721Received(address operator, address from, uint256 tokenId, bytes data) \\u2192 bytes4 It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\"},\"rescueTokens(address)\":{\"notice\":\"Emergency withdraw tokens.\"},\"setFeeWallet(address)\":{\"notice\":\"Update fee wallet.\"},\"setFees(uint256,uint256)\":{\"notice\":\"Update processing fee.\"},\"setServiceInfo(address,uint256)\":{\"notice\":\"This method can be called by treasury.Update treasury wallet and performance fee.\"},\"setSwapAggregator(address)\":{\"notice\":\"Update swap aggregator.\"},\"stakeNft(uint256)\":{\"notice\":\"Stake the NFT back into the index to claim/zap out their tokens.\"},\"userInfo(address)\":{\"notice\":\"Returns purchased tokens and ETH amount at the time when bought tokens.\"},\"zapIn(address,uint256,uint256[],(uint256,uint256,address[],address[])[])\":{\"notice\":\"Buy tokens by paying ETH and lock tokens in contract.         When buy tokens, should pay processing fee(brewlabs fixed fee + deployer fee).\"},\"zapOut(address,(uint256,uint256,address[],address[])[])\":{\"notice\":\"Sale tokens from contract and claim ETH.         If the user exits the index in a loss then there is no fee.         If the user exists the index in a profit, processing fee will be applied.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/indexes/BrewlabsIndex.sol\":\"BrewlabsIndex\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/indexes/BrewlabsIndex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\n\\r\\nimport {AggregatorV3Interface} from \\\"../libs/AggregatorV3Interface.sol\\\";\\r\\nimport {IBrewlabsAggregator} from \\\"../libs/IBrewlabsAggregator.sol\\\";\\r\\nimport {IWETH} from \\\"../libs/IWETH.sol\\\";\\r\\nimport {IWrapper} from \\\"../libs/IWrapper.sol\\\";\\r\\n\\r\\ninterface IBrewlabsIndexFactory {\\r\\n    function brewlabsFee() external view returns (uint256);\\r\\n    function feeLimits(uint256 index) external view returns (uint256);\\r\\n    function brewlabsWallet() external view returns (address);\\r\\n    function discountMgr() external view returns (address);\\r\\n    function allowedTokens(address token) external view returns (uint8);\\r\\n    function wrappers(address token) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IBrewlabsIndexNft {\\r\\n    function mint(address to) external returns (uint256);\\r\\n    function burn(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface IBrewlabsDiscountMgr {\\r\\n    function discountOf(address user) external view returns (uint256);\\r\\n}\\r\\n\\r\\n// BrewlabsIndex is index contracts that offer a range of token collections to buy as \\\"Brewlabs Index\\\"\\r\\n// most likely top 100 tokens that do not require tax slippage.\\r\\n// Ideally the index tokens will buy 2-4 tokens (they will mostly be pegged tokens of the top 100 tokens that we will choose).\\r\\n//\\r\\n// Note User may select an index that will contain PEGGED-ETH + BTCB,\\r\\n// the will determine how much (by a sliding scale) BNB they will allocate to each token.\\r\\n// For example 1 BNB buy:\\r\\n//    User chooses 30%; 0.30 BNB to buy PEGGED-ETH (BEP20)\\r\\n//    User chooses 70%, 0.70BNB to buy BTCB.\\r\\ncontract BrewlabsIndex is Ownable, ERC721Holder, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Whether it is initialized\\r\\n    bool private isInitialized;\\r\\n\\r\\n    uint256 private FEE_DENOMINATOR;\\r\\n    address private PRICE_FEED;\\r\\n    address public WNATIVE;\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    IBrewlabsIndexFactory public factory;\\r\\n    IERC721 public indexNft;\\r\\n    IERC721 public deployerNft;\\r\\n\\r\\n    uint256 public NUM_TOKENS;\\r\\n    IERC20[] public tokens;\\r\\n\\r\\n    IBrewlabsAggregator public swapAggregator;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256[] amounts; // How many tokens that user has bought\\r\\n        uint256 usdAmount; // USD amount that user sold\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) private users;\\r\\n\\r\\n    struct NftInfo {\\r\\n        uint256 level;\\r\\n        uint256[] amounts; // locked token amounts in NFT\\r\\n        uint256 usdAmount; // USD amount that sold for above tokens\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => NftInfo) private nfts;\\r\\n    uint256[] public totalStaked;\\r\\n\\r\\n    uint256 public depositFee;\\r\\n    uint256 public commissionFee;\\r\\n    uint256 public performanceFee;\\r\\n    address public treasury;\\r\\n    address public deployer;\\r\\n    address public commissionWallet;\\r\\n\\r\\n    uint256 public totalEarned;\\r\\n    uint256 public totalCommissions;\\r\\n    uint256[] private pendingCommissions;\\r\\n\\r\\n    uint256 public deployerNftId;\\r\\n\\r\\n    event TokenZappedIn(\\r\\n        address indexed user,\\r\\n        uint256 ethAmount,\\r\\n        uint256[] percents,\\r\\n        uint256[] amountOuts,\\r\\n        uint256 usdAmount,\\r\\n        uint256 commission\\r\\n    );\\r\\n    event TokenZappedOut(address indexed user, uint256[] amounts, uint256 ethAmount, uint256 commission);\\r\\n    event TokenClaimed(address indexed user, uint256[] amounts, uint256 usdAmount, uint256 commission);\\r\\n    event TokenLocked(address indexed user, uint256[] amounts, uint256 usdAmount, uint256 tokenId);\\r\\n    event TokenUnLocked(address indexed user, uint256[] amounts, uint256 usdAmount, uint256 tokenId);\\r\\n\\r\\n    event DeployerNftMinted(address indexed user, address nft, uint256 tokenId);\\r\\n    event DeployerNftStaked(address indexed user, uint256 tokenId);\\r\\n    event DeployerNftUnstaked(address indexed user, uint256 tokenId);\\r\\n    event CommissionClaimed(address indexed user);\\r\\n\\r\\n    event SetIndexNft(address newNftAddr);\\r\\n    event SetDeployerNft(address newNftAddr);\\r\\n    event SetFees(uint256 fee0, uint256 fee1);\\r\\n    event SetFeeWallet(address wallet);\\r\\n    event SetSwapAggregator(address aggregator);\\r\\n    event ServiceInfoChanged(address addr, uint256 fee);\\r\\n\\r\\n    modifier onlyInitialized() {\\r\\n        require(isInitialized, \\\"Not initialized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize index contract.\\r\\n     * @param _name: index name\\r\\n     * @param _tokens: token list that user can buy in a transaction\\r\\n     * @param _indexNft: Index NFT address\\r\\n     * @param _deployerNft: Deployer NFT address\\r\\n     * @param _fees: additional fee for deployer\\r\\n     * @param _owner: index owner address\\r\\n     * @param _deployer: index deployer address\\r\\n     * @param _commissionWallet: index commission wallet\\r\\n     */\\r\\n    function initialize(\\r\\n        string memory _name,\\r\\n        address _aggregator,\\r\\n        IERC20[] memory _tokens,\\r\\n        IERC721 _indexNft,\\r\\n        IERC721 _deployerNft,\\r\\n        uint256[2] memory _fees,\\r\\n        address _owner,\\r\\n        address _deployer,\\r\\n        address _commissionWallet\\r\\n    ) external {\\r\\n        require(!isInitialized, \\\"Already initialized\\\");\\r\\n        require(owner() == address(0x0) || msg.sender == owner(), \\\"Not allowed\\\");\\r\\n        require(_tokens.length <= 5, \\\"Exceed maximum tokens\\\");\\r\\n\\r\\n        isInitialized = true;\\r\\n\\r\\n        name = _name;\\r\\n\\r\\n        // initialize default variables\\r\\n        FEE_DENOMINATOR = 10000;\\r\\n        PRICE_FEED = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE; // BNB-USD FEED\\r\\n        swapAggregator = IBrewlabsAggregator(_aggregator);\\r\\n        WNATIVE = swapAggregator.WNATIVE();\\r\\n        NUM_TOKENS = _tokens.length;\\r\\n\\r\\n        depositFee = _fees[0];\\r\\n        commissionFee = _fees[1];\\r\\n        performanceFee = 0.01 ether;\\r\\n        treasury = 0x5Ac58191F3BBDF6D037C6C6201aDC9F99c93C53A;\\r\\n        deployer = _deployer;\\r\\n        commissionWallet = _commissionWallet;\\r\\n\\r\\n        factory = IBrewlabsIndexFactory(msg.sender);\\r\\n\\r\\n        indexNft = _indexNft;\\r\\n        deployerNft = _deployerNft;\\r\\n        tokens = _tokens;\\r\\n\\r\\n        totalStaked = new uint256[](NUM_TOKENS);\\r\\n        pendingCommissions = new uint256[](NUM_TOKENS + 1);\\r\\n\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    function precomputeZapIn(address _token, uint256 _amount, uint256[] memory _percents)\\r\\n        external\\r\\n        view\\r\\n        returns (IBrewlabsAggregator.FormattedOffer[] memory queries)\\r\\n    {\\r\\n        queries = new IBrewlabsAggregator.FormattedOffer[](NUM_TOKENS + 1);\\r\\n        uint256 ethAmount = _amount;\\r\\n        if (_token != address(0x0)) {\\r\\n            queries[0] = swapAggregator.findBestPath(_amount, _token, WNATIVE, 3);\\r\\n            uint256[] memory _amounts = queries[0].amounts;\\r\\n            ethAmount = _amounts[_amounts.length - 1];\\r\\n        }\\r\\n\\r\\n        for (uint8 i = 0; i < NUM_TOKENS; i++) {\\r\\n            if (i >= _percents.length) break;\\r\\n\\r\\n            uint256 amountIn = (ethAmount * _percents[i]) / FEE_DENOMINATOR;\\r\\n            if (amountIn == 0 || address(tokens[i]) == WNATIVE) continue;\\r\\n\\r\\n            queries[i + 1] = swapAggregator.findBestPath(amountIn, WNATIVE, address(tokens[i]), 3);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Buy tokens by paying ETH and lock tokens in contract.\\r\\n     *         When buy tokens, should pay processing fee(brewlabs fixed fee + deployer fee).\\r\\n     * @param _percents: list of ETH allocation points to buy tokens\\r\\n     */\\r\\n    function zapIn(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256[] memory _percents,\\r\\n        IBrewlabsAggregator.Trade[] memory _trades\\r\\n    ) external payable onlyInitialized nonReentrant {\\r\\n        require(_percents.length == NUM_TOKENS, \\\"Invalid percents\\\");\\r\\n        require(_trades.length == NUM_TOKENS + 1, \\\"Invalid trade config\\\");\\r\\n\\r\\n        uint256 totalPercentage = 0;\\r\\n        for (uint8 i = 0; i < NUM_TOKENS; i++) {\\r\\n            totalPercentage += _percents[i];\\r\\n        }\\r\\n        require(totalPercentage <= FEE_DENOMINATOR, \\\"Total percentage cannot exceed 10000\\\");\\r\\n\\r\\n        uint256 ethAmount = _beforeZapIn(_token, _amount, _trades[0]);\\r\\n\\r\\n        uint256 price = getPriceFromChainlink();\\r\\n        uint256 discount = _getDiscount(msg.sender);\\r\\n\\r\\n        // pay brewlabs fee\\r\\n        uint256 brewsFee = (ethAmount * factory.brewlabsFee() * discount) / FEE_DENOMINATOR ** 2;\\r\\n        payable(factory.brewlabsWallet()).transfer(brewsFee);\\r\\n        // pay deployer fee\\r\\n        uint256 deployerFee = (ethAmount * depositFee * discount) / FEE_DENOMINATOR ** 2;\\r\\n        if (commissionWallet == address(0x0)) {\\r\\n            pendingCommissions[NUM_TOKENS] += deployerFee;\\r\\n            totalCommissions += deployerFee * price / 1 ether;\\r\\n        } else {\\r\\n            payable(commissionWallet).transfer(deployerFee);\\r\\n        }\\r\\n        ethAmount -= brewsFee + deployerFee;\\r\\n        totalEarned += deployerFee * price / 1 ether;\\r\\n\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        if (user.usdAmount == 0) {\\r\\n            user.amounts = new uint256[](NUM_TOKENS);\\r\\n        }\\r\\n\\r\\n        // buy tokens\\r\\n        uint256 amount;\\r\\n        uint256[] memory amountOuts = new uint256[](NUM_TOKENS);\\r\\n        for (uint8 i = 0; i < NUM_TOKENS; i++) {\\r\\n            uint256 amountIn = (ethAmount * _percents[i]) / FEE_DENOMINATOR;\\r\\n            if (amountIn == 0) continue;\\r\\n\\r\\n            if (address(tokens[i]) == WNATIVE) {\\r\\n                IWETH(WNATIVE).deposit{value: amountIn}();\\r\\n                amountOuts[i] = amountIn;\\r\\n            } else {\\r\\n                amountOuts[i] = _safeSwapEth(amountIn, address(tokens[i]), address(this), _trades[i + 1]);\\r\\n            }\\r\\n\\r\\n            user.amounts[i] += amountOuts[i];\\r\\n            totalStaked[i] += amountOuts[i];\\r\\n\\r\\n            amount += amountIn;\\r\\n        }\\r\\n        uint256 usdAmount = amount * price / 1 ether;\\r\\n\\r\\n        user.usdAmount += usdAmount;\\r\\n        emit TokenZappedIn(msg.sender, amount, _percents, amountOuts, usdAmount, brewsFee + deployerFee);\\r\\n\\r\\n        if (totalPercentage < FEE_DENOMINATOR) {\\r\\n            payable(msg.sender).transfer(ethAmount - amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _beforeZapIn(address _token, uint256 _amount, IBrewlabsAggregator.Trade memory _trade)\\r\\n        internal\\r\\n        returns (uint256 amount)\\r\\n    {\\r\\n        if (_token == address(0x0)) return msg.value;\\r\\n\\r\\n        uint8 allowedMethod = factory.allowedTokens(_token);\\r\\n        require(allowedMethod > 0, \\\"Cannot zap in with unsupported token\\\");\\r\\n        require(_amount > 1000, \\\"Not enough amount\\\");\\r\\n\\r\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        if (allowedMethod == 1) {\\r\\n            amount = _safeSwapForETH(_amount, _token, _trade);\\r\\n        } else {\\r\\n            amount = _amount;\\r\\n\\r\\n            address wrapper = factory.wrappers(_token);\\r\\n            if (_token == WNATIVE) {\\r\\n                IWETH(WNATIVE).withdraw(_amount);\\r\\n            } else {\\r\\n                IERC20(_token).approve(wrapper, _amount);\\r\\n                amount = IWrapper(wrapper).withdraw(_amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim tokens from contract.\\r\\n     *         If the user exits the index in a loss then there is no fee.\\r\\n     *         If the user exists the index in a profit, processing fee will be applied.\\r\\n     */\\r\\n    function claimTokens(uint256 _percent) external onlyInitialized nonReentrant {\\r\\n        require(_percent > 0 && _percent <= FEE_DENOMINATOR, \\\"Invalid percent\\\");\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        require(user.usdAmount > 0, \\\"No available tokens\\\");\\r\\n\\r\\n        uint256 discount = _getDiscount(msg.sender);\\r\\n        uint256 price = getPriceFromChainlink();\\r\\n        uint256 expectedAmt = _expectedEth(user.amounts);\\r\\n        uint256 expectedUsdAmt = (expectedAmt * price / 1 ether);\\r\\n\\r\\n        bool bCommission = expectedUsdAmt > user.usdAmount;\\r\\n        uint256 profit = bCommission ? (expectedUsdAmt - user.usdAmount) : 0;\\r\\n\\r\\n        address _brewsWallet = factory.brewlabsWallet();\\r\\n        uint256 _brewsFee = factory.brewlabsFee();\\r\\n        uint256 _commissionDenominator = user.usdAmount * (FEE_DENOMINATOR ** 2);\\r\\n\\r\\n        uint256[] memory amounts = new uint256[](NUM_TOKENS);\\r\\n        for (uint256 i = 0; i < NUM_TOKENS; i++) {\\r\\n            uint256 claimAmount = (user.amounts[i] * _percent) / FEE_DENOMINATOR;\\r\\n            amounts[i] = claimAmount;\\r\\n\\r\\n            uint256 claimFee = 0;\\r\\n            uint256 brewsFee = 0;\\r\\n            if (bCommission) {\\r\\n                uint256 _profit = claimAmount * profit * discount;\\r\\n                brewsFee = (_profit * _brewsFee) / _commissionDenominator;\\r\\n                _transferToken(tokens[i], _brewsWallet, brewsFee);\\r\\n\\r\\n                claimFee = (_profit * commissionFee) / _commissionDenominator;\\r\\n                if (commissionWallet == address(0x0)) {\\r\\n                    pendingCommissions[i] += claimFee;\\r\\n                } else {\\r\\n                    _transferToken(tokens[i], commissionWallet, claimFee);\\r\\n                }\\r\\n            }\\r\\n            _transferToken(tokens[i], msg.sender, claimAmount - claimFee - brewsFee);\\r\\n\\r\\n            user.amounts[i] -= claimAmount;\\r\\n            totalStaked[i] -= claimAmount;\\r\\n        }\\r\\n\\r\\n        uint256 commission = 0;\\r\\n        if (bCommission) {\\r\\n            commission = (expectedAmt * _percent * profit) / FEE_DENOMINATOR;\\r\\n            commission = (commission * commissionFee * discount) / _commissionDenominator;\\r\\n\\r\\n            if (commissionWallet == address(0x0)) {\\r\\n                totalCommissions += commission * price / 1 ether;\\r\\n            }\\r\\n            totalEarned += commission * price / 1 ether;\\r\\n        }\\r\\n\\r\\n        uint256 claimedUsdAmount = (user.usdAmount * _percent) / FEE_DENOMINATOR;\\r\\n        user.usdAmount -= claimedUsdAmount;\\r\\n        emit TokenClaimed(msg.sender, amounts, claimedUsdAmount, commission);\\r\\n    }\\r\\n\\r\\n    function precomputeZapOut(address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (IBrewlabsAggregator.FormattedOffer[] memory queries)\\r\\n    {\\r\\n        queries = new IBrewlabsAggregator.FormattedOffer[](NUM_TOKENS + 1);\\r\\n\\r\\n        UserInfo memory user = users[msg.sender];\\r\\n\\r\\n        uint256 ethAmount = 0;\\r\\n        uint256[] memory amounts = user.amounts;\\r\\n        for (uint256 i = 0; i < NUM_TOKENS; i++) {\\r\\n            if (amounts[i] == 0) continue;\\r\\n            if (address(tokens[i]) == WNATIVE) {\\r\\n                ethAmount += amounts[i];\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            queries[i] = swapAggregator.findBestPath(amounts[i], address(tokens[i]), WNATIVE, 3);\\r\\n            uint256[] memory _amounts = queries[i].amounts;\\r\\n            ethAmount += _amounts[_amounts.length - 1];\\r\\n        }\\r\\n\\r\\n        if (_token != address(0x0)) {\\r\\n            queries[NUM_TOKENS] = swapAggregator.findBestPath(ethAmount, WNATIVE, _token, 3);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sale tokens from contract and claim ETH.\\r\\n     *         If the user exits the index in a loss then there is no fee.\\r\\n     *         If the user exists the index in a profit, processing fee will be applied.\\r\\n     */\\r\\n    function zapOut(address _token, IBrewlabsAggregator.Trade[] memory _trades) external onlyInitialized nonReentrant {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        require(user.usdAmount > 0, \\\"No available tokens\\\");\\r\\n        require(_trades.length == NUM_TOKENS + 1, \\\"Invalid trade config\\\");\\r\\n\\r\\n        uint256 ethAmount;\\r\\n        for (uint256 i = 0; i < NUM_TOKENS; i++) {\\r\\n            uint256 claimAmount = user.amounts[i];\\r\\n            totalStaked[i] -= claimAmount;\\r\\n            if (user.amounts[i] == 0) continue;\\r\\n\\r\\n            uint256 amountOut;\\r\\n            if (address(tokens[i]) == WNATIVE) {\\r\\n                amountOut = claimAmount;\\r\\n                IWETH(WNATIVE).withdraw(amountOut);\\r\\n            } else {\\r\\n                amountOut = _safeSwapForETH(claimAmount, address(tokens[i]), _trades[i]);\\r\\n            }\\r\\n            ethAmount += amountOut;\\r\\n        }\\r\\n\\r\\n        uint256 commission = 0;\\r\\n        uint256 discount = _getDiscount(msg.sender);\\r\\n        uint256 price = getPriceFromChainlink();\\r\\n        if ((ethAmount * price / 1 ether) > user.usdAmount) {\\r\\n            uint256 profit = ((ethAmount * price / 1 ether) - user.usdAmount) * 1e18 / price;\\r\\n\\r\\n            uint256 brewsFee = (profit * factory.brewlabsFee() * discount) / FEE_DENOMINATOR ** 2;\\r\\n            payable(factory.brewlabsWallet()).transfer(brewsFee);\\r\\n\\r\\n            commission = (profit * commissionFee * discount) / FEE_DENOMINATOR ** 2;\\r\\n            if (commissionWallet == address(0x0)) {\\r\\n                pendingCommissions[NUM_TOKENS] += commission;\\r\\n                totalCommissions += commission * price / 1 ether;\\r\\n            } else {\\r\\n                payable(commissionWallet).transfer(commission);\\r\\n            }\\r\\n            totalEarned += commission * price / 1 ether;\\r\\n            ethAmount -= commission + brewsFee;\\r\\n        }\\r\\n        emit TokenZappedOut(msg.sender, user.amounts, ethAmount, commission);\\r\\n        delete users[msg.sender];\\r\\n\\r\\n        _afterZapOut(_token, msg.sender, ethAmount, _trades[NUM_TOKENS]);\\r\\n    }\\r\\n\\r\\n    function _afterZapOut(address _token, address _to, uint256 _amount, IBrewlabsAggregator.Trade memory _trade)\\r\\n        internal\\r\\n    {\\r\\n        if (_token == address(0x0)) {\\r\\n            payable(_to).transfer(_amount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint8 allowedMethod = factory.allowedTokens(_token);\\r\\n        require(allowedMethod > 0, \\\"Cannot zap out with this token\\\");\\r\\n\\r\\n        if (allowedMethod == 1) {\\r\\n            _safeSwapEth(_amount, _token, _to, _trade);\\r\\n        } else {\\r\\n            uint256 amount = _amount;\\r\\n            if (_token == WNATIVE) {\\r\\n                IWETH(WNATIVE).deposit{value: _amount}();\\r\\n            } else {\\r\\n                address wrapper = factory.wrappers(_token);\\r\\n                amount = IWrapper(wrapper).deposit{value: _amount}();\\r\\n            }\\r\\n            IERC20(_token).safeTransfer(_to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Once the user purchases the tokens through the contract, the user can then choose to at anytime\\r\\n     *  to mint an NFT that would represent the ownership of their tokens in the contract.\\r\\n     * The purpose of this is to allow users to mint an NFT that represents their value in the index and at their discretion,\\r\\n     *  transfer or sell that NFT to another wallet.\\r\\n     */\\r\\n    function mintNft() external payable onlyInitialized nonReentrant returns (uint256) {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        require(user.usdAmount > 0, \\\"No available tokens\\\");\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n\\r\\n        // mint NFT\\r\\n        uint256 tokenId = IBrewlabsIndexNft(address(indexNft)).mint(msg.sender);\\r\\n\\r\\n        // lock available tokens for NFT\\r\\n        NftInfo storage nftData = nfts[tokenId];\\r\\n        nftData.amounts = user.amounts;\\r\\n        nftData.usdAmount = user.usdAmount;\\r\\n\\r\\n        nftData.level = 1;\\r\\n        if (nftData.usdAmount < 1000 ether) nftData.level = 0;\\r\\n        if (nftData.usdAmount > 5000 ether) nftData.level = 2;\\r\\n\\r\\n        delete users[msg.sender];\\r\\n        emit TokenLocked(msg.sender, nftData.amounts, nftData.usdAmount, tokenId);\\r\\n\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake the NFT back into the index to claim/zap out their tokens.\\r\\n     */\\r\\n    function stakeNft(uint256 tokenId) external payable onlyInitialized nonReentrant {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n\\r\\n        // burn NFT\\r\\n        indexNft.safeTransferFrom(msg.sender, address(this), tokenId);\\r\\n        IBrewlabsIndexNft(address(indexNft)).burn(tokenId);\\r\\n\\r\\n        NftInfo memory nftData = nfts[tokenId];\\r\\n        if (user.amounts.length == 0) {\\r\\n            user.amounts = nftData.amounts;\\r\\n        } else {\\r\\n            for (uint8 i = 0; i < NUM_TOKENS; i++) {\\r\\n                user.amounts[i] += nftData.amounts[i];\\r\\n            }\\r\\n        }\\r\\n        user.usdAmount += nftData.usdAmount;\\r\\n\\r\\n        emit TokenUnLocked(msg.sender, nftData.amounts, nftData.usdAmount, tokenId);\\r\\n        delete nfts[tokenId];\\r\\n    }\\r\\n\\r\\n    function mintDeployerNft() external payable onlyInitialized nonReentrant returns (uint256) {\\r\\n        require(msg.sender == deployer, \\\"Caller is not the deployer\\\");\\r\\n        require(deployerNftId == 0, \\\"Already Mint\\\");\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n\\r\\n        commissionWallet = address(0x0);\\r\\n        deployerNftId = IBrewlabsIndexNft(address(deployerNft)).mint(msg.sender);\\r\\n        emit DeployerNftMinted(msg.sender, address(deployerNft), deployerNftId);\\r\\n        return deployerNftId;\\r\\n    }\\r\\n\\r\\n    function stakeDeployerNft() external payable onlyInitialized nonReentrant {\\r\\n        commissionWallet = msg.sender;\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _claimPendingCommission();\\r\\n\\r\\n        deployerNft.safeTransferFrom(msg.sender, address(this), deployerNftId);\\r\\n        emit DeployerNftStaked(msg.sender, deployerNftId);\\r\\n    }\\r\\n\\r\\n    function unstakeDeployerNft() external payable onlyInitialized nonReentrant {\\r\\n        require(msg.sender == commissionWallet, \\\"Caller is not operator\\\");\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n\\r\\n        commissionWallet = address(0x0);\\r\\n\\r\\n        deployerNft.safeTransferFrom(address(this), msg.sender, deployerNftId);\\r\\n        emit DeployerNftUnstaked(msg.sender, deployerNftId);\\r\\n    }\\r\\n\\r\\n    function _claimPendingCommission() internal {\\r\\n        for (uint256 i = 0; i <= NUM_TOKENS; i++) {\\r\\n            if (pendingCommissions[i] == 0) continue;\\r\\n            if (i < NUM_TOKENS) {\\r\\n                _transferToken(tokens[i], commissionWallet, pendingCommissions[i]);\\r\\n            } else {\\r\\n                payable(commissionWallet).transfer(pendingCommissions[i]);\\r\\n            }\\r\\n            pendingCommissions[i] = 0;\\r\\n        }\\r\\n        totalCommissions = 0;\\r\\n        emit CommissionClaimed(commissionWallet);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns purchased tokens and ETH amount at the time when bought tokens.\\r\\n     * @param _user: user address\\r\\n     */\\r\\n    function userInfo(address _user) external view returns (uint256[] memory amounts, uint256 usdAmount) {\\r\\n        UserInfo memory _userData = users[_user];\\r\\n        if (_userData.usdAmount == 0) return (new uint256[](NUM_TOKENS), 0);\\r\\n        return (_userData.amounts, _userData.usdAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns tokens locked in NFT and ETH amount at the time when bought tokens.\\r\\n     * @param _tokenId: owned tokenId\\r\\n     */\\r\\n    function nftInfo(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 level, uint256[] memory amounts, uint256 usdAmount)\\r\\n    {\\r\\n        NftInfo memory _nftData = nfts[_tokenId];\\r\\n        if (_nftData.usdAmount == 0) return (1, new uint256[](NUM_TOKENS), 0);\\r\\n        return (_nftData.level, _nftData.amounts, _nftData.usdAmount);\\r\\n    }\\r\\n\\r\\n    function getPendingCommissions() external view returns (uint256[] memory) {\\r\\n        return pendingCommissions;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns estimated eth amount when user zapout.\\r\\n     * @param _user: user address\\r\\n     */\\r\\n    function estimateEthforUser(address _user) external view returns (uint256) {\\r\\n        return _expectedEth(users[_user].amounts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns estimated eth amount that can get from NFT item.\\r\\n     * @param _tokenId: token Id of BrewlabsIndex NFT\\r\\n     */\\r\\n    function estimateEthforNft(uint256 _tokenId) external view returns (uint256) {\\r\\n        return _expectedEth(nfts[_tokenId].amounts);\\r\\n    }\\r\\n\\r\\n    function getPriceFromChainlink() public view returns (uint256) {\\r\\n        if (PRICE_FEED == address(0x0)) return 0;\\r\\n\\r\\n        (, int256 answer,,,) = AggregatorV3Interface(PRICE_FEED).latestRoundData();\\r\\n        // It's fine for price to be 0. We have two price feeds.\\r\\n        if (answer == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Extend the decimals to 1e18.\\r\\n        uint256 retVal = uint256(answer);\\r\\n        uint256 price = retVal * (10 ** (18 - uint256(AggregatorV3Interface(PRICE_FEED).decimals())));\\r\\n\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update swap aggregator.\\r\\n     * @param _aggregator: swap Aggregator address\\r\\n     */\\r\\n    function setSwapAggregator(address _aggregator) external onlyOwner onlyInitialized {\\r\\n        require(_aggregator != address(0x0), \\\"Invalid address\\\");\\r\\n        require(IBrewlabsAggregator(_aggregator).WNATIVE() != address(0x0), \\\"Invalid swap aggregator\\\");\\r\\n\\r\\n        swapAggregator = IBrewlabsAggregator(_aggregator);\\r\\n        WNATIVE = IBrewlabsAggregator(_aggregator).WNATIVE();\\r\\n        emit SetSwapAggregator(_aggregator);\\r\\n    }\\r\\n\\r\\n    function setIndexNft(IERC721 newNftAddr) external onlyOwner {\\r\\n        require(address(newNftAddr) != address(0x0), \\\"Invalid NFT\\\");\\r\\n        indexNft = newNftAddr;\\r\\n        emit SetIndexNft(address(newNftAddr));\\r\\n    }\\r\\n\\r\\n    function setDeployerNft(IERC721 newNftAddr) external onlyOwner {\\r\\n        require(deployerNftId == 0, \\\"Deployer NFT already minted\\\");\\r\\n        require(address(newNftAddr) != address(0x0), \\\"Invalid NFT\\\");\\r\\n        deployerNft = newNftAddr;\\r\\n        emit SetDeployerNft(address(newNftAddr));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update processing fee.\\r\\n     * @param _depositfee: deposit fee in point\\r\\n     * @param _commissionFee: commission fee in point\\r\\n     */\\r\\n    function setFees(uint256 _depositfee, uint256 _commissionFee) external payable {\\r\\n        require(msg.sender == commissionWallet || msg.sender == owner(), \\\"Caller is not the operator\\\");\\r\\n        require(\\r\\n            _depositfee <= factory.feeLimits(0) && _commissionFee <= factory.feeLimits(1),\\r\\n            \\\"Cannot exceed fee limit of factory\\\"\\r\\n        );\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n\\r\\n        depositFee = _depositfee;\\r\\n        commissionFee = _commissionFee;\\r\\n        emit SetFees(depositFee, commissionFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update fee wallet.\\r\\n     * @param _feeWallet: address to receive deposit/commission fee\\r\\n     */\\r\\n    function setFeeWallet(address _feeWallet) external payable {\\r\\n        require(msg.sender == commissionWallet || msg.sender == owner(), \\\"Caller is not the operator\\\");\\r\\n        require(_feeWallet != address(0x0), \\\"Invalid wallet\\\");\\r\\n\\r\\n        commissionWallet = _feeWallet;\\r\\n        emit SetFeeWallet(_feeWallet);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This method can be called by treasury.\\r\\n     * @notice Update treasury wallet and performance fee.\\r\\n     * @param _addr: new treasury address\\r\\n     * @param _fee: percentage in point\\r\\n     */\\r\\n    function setServiceInfo(address _addr, uint256 _fee) external {\\r\\n        require(msg.sender == treasury, \\\"setServiceInfo: FORBIDDEN\\\");\\r\\n        require(_addr != address(0x0), \\\"Invalid address\\\");\\r\\n\\r\\n        treasury = _addr;\\r\\n        performanceFee = _fee;\\r\\n\\r\\n        emit ServiceInfoChanged(_addr, _fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Emergency withdraw tokens.\\r\\n     * @param _token: token address\\r\\n     */\\r\\n    function rescueTokens(address _token) external onlyOwner {\\r\\n        if (_token == address(0x0)) {\\r\\n            uint256 _ethAmount = address(this).balance;\\r\\n            payable(msg.sender).transfer(_ethAmount);\\r\\n        } else {\\r\\n            uint256 _tokenAmount = IERC20(_token).balanceOf(address(this));\\r\\n            IERC20(_token).safeTransfer(msg.sender, _tokenAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Process performance fee.\\r\\n     */\\r\\n    function _transferPerformanceFee() internal {\\r\\n        require(msg.value >= performanceFee, \\\"Should pay small gas to call method\\\");\\r\\n        payable(treasury).transfer(performanceFee);\\r\\n    }\\r\\n\\r\\n    function _transferToken(IERC20 _token, address _to, uint256 _amount) internal {\\r\\n        if (address(_token) == WNATIVE) {\\r\\n            IWETH(WNATIVE).withdraw(_amount);\\r\\n            payable(_to).transfer(_amount);\\r\\n        } else {\\r\\n            _token.safeTransfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the expected eth amount by swapping provided tokens.\\r\\n     * @param amounts: amounts to swap\\r\\n     */\\r\\n    function _expectedEth(uint256[] memory amounts) internal view returns (uint256 amountOut) {\\r\\n        uint256 aggregatorFee = swapAggregator.BREWS_FEE();\\r\\n\\r\\n        IBrewlabsAggregator.FormattedOffer memory query;\\r\\n        for (uint8 i = 0; i < NUM_TOKENS; i++) {\\r\\n            if (amounts[i] == 0) continue;\\r\\n\\r\\n            if (address(tokens[i]) == WNATIVE) {\\r\\n                amountOut += amounts[i];\\r\\n            } else {\\r\\n                query = swapAggregator.findBestPath(amounts[i], address(tokens[i]), WNATIVE, 3);\\r\\n                uint256 _amountOut = query.amounts[query.amounts.length - 1];\\r\\n                if (aggregatorFee > 0) _amountOut = _amountOut * (10000 - aggregatorFee) / 10000;\\r\\n                amountOut += _amountOut;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getDiscount(address _user) internal view returns (uint256) {\\r\\n        address discountMgr = factory.discountMgr();\\r\\n        if (discountMgr == address(0x0)) return FEE_DENOMINATOR;\\r\\n\\r\\n        return FEE_DENOMINATOR - IBrewlabsDiscountMgr(discountMgr).discountOf(_user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get token from ETH via swap.\\r\\n     * @param _amountIn: eth amount to swap\\r\\n     * @param _token: to token\\r\\n     * @param _to: receiver address\\r\\n     */\\r\\n    function _safeSwapEth(uint256 _amountIn, address _token, address _to, IBrewlabsAggregator.Trade memory _trade)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        _trade.amountIn = _amountIn;\\r\\n\\r\\n        uint256 beforeAmt = IERC20(_token).balanceOf(_to);\\r\\n        swapAggregator.swapNoSplitFromETH{value: _amountIn}(_trade, _to);\\r\\n        uint256 afterAmt = IERC20(_token).balanceOf(_to);\\r\\n\\r\\n        return afterAmt - beforeAmt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice swap tokens to ETH.\\r\\n     * @param _amountIn: token amount to swap\\r\\n     * @param _token: from token\\r\\n     */\\r\\n    function _safeSwapForETH(uint256 _amountIn, address _token, IBrewlabsAggregator.Trade memory _trade)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        _trade.amountIn = _amountIn;\\r\\n\\r\\n        IERC20(_token).safeApprove(address(swapAggregator), _amountIn);\\r\\n\\r\\n        uint256 beforeAmt = address(this).balance;\\r\\n        swapAggregator.swapNoSplitToETH(_trade, address(this));\\r\\n\\r\\n        return address(this).balance - beforeAmt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * onERC721Received(address operator, address from, uint256 tokenId, bytes data) \\u2192 bytes4\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\\r\\n        public\\r\\n        override\\r\\n        returns (bytes4)\\r\\n    {\\r\\n        require(msg.sender == address(indexNft) || msg.sender == address(deployerNft), \\\"not enabled NFT\\\");\\r\\n        return super.onERC721Received(operator, from, tokenId, data);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xc816e609c0d4a643a53328ae18a97f0283165d611023ef9fafff827f0fda969d\",\"license\":\"MIT\"},\"contracts/libs/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n    function description() external view returns (string memory);\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x3f0f562aea873c8bc7e79015d3dd371fb5e214aa8e10bddfe8b259ed45f44298\",\"license\":\"UNLICENSED\"},\"contracts/libs/IBrewlabsAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBrewlabsAggregator {\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address[] adapters;\\n    }\\n\\n    struct FormattedOffer {\\n        uint256[] amounts;\\n        address[] adapters;\\n        address[] path;\\n        uint256 gasEstimate;\\n    }\\n\\n    function WNATIVE() external view returns (address);\\n    function BREWS_FEE() external view returns (uint256);\\n    function findBestPath(uint256 _amountIn, address _tokenIn, address _tokenOut, uint256 _maxSteps)\\n        external\\n        view\\n        returns (FormattedOffer memory);\\n\\n    function swapNoSplit(Trade memory _trade, address _to) external;\\n    function swapNoSplitFromETH(Trade memory _trade, address _to) external payable;\\n    function swapNoSplitToETH(Trade memory _trade, address _to) external;\\n}\\n\",\"keccak256\":\"0x1541688e911c9666b39ccf8b64b8b69ce8891a485f4739a5488b990bcad4a36b\",\"license\":\"MIT\"},\"contracts/libs/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x0c67ca1a5f9148aba05eb0ed20f5c5cc9c82a9be7d43196d7f03adafc08d6866\",\"license\":\"MIT\"},\"contracts/libs/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWrapper {\\n    function deposit() external payable returns (uint256);\\n    function withdraw(uint256) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xa64889bd9bc2f2c2d7bf37fa7e391d33ab15d1c78c3ec3939ff6e703a0e9834b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000027565b6001805562000077565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b615fd080620000876000396000f3fe6080604052600436106102805760003560e01c80636fb1eb0c1161014f57806395abdb52116100c1578063c4c715421161007a578063c4c7154214610704578063d26c07ce14610724578063d5f394881461073a578063dddc9ede1461075a578063ed7f79cf1461077a578063f2fde38b1461079a57600080fd5b806395abdb521461067457806397c0262a14610694578063b381cf40146106b4578063bd8dc381146106d4578063c2229fea146106dc578063c45a0155146106e457600080fd5b806376917ca01161011357806376917ca0146105de57806381b619481461060057806387788782146106205780638792e303146106365780638da5cb5b1461064c57806390d49b9d1461066157600080fd5b80636fb1eb0c14610576578063715018a61461058c5780637404b844146105a157806374e353b3146105c157806375923d39146105c957600080fd5b806320e55fbc116101f35780634f64b2be116101ac5780634f64b2be146104ca5780635ace5813146104ea57806361d027b31461050a578063649cc8d21461052a57806367a527931461054a5780636dfa8d991461056057600080fd5b806320e55fbc1461041457806335130677146104415780634149db481461046157806341cb8c20146104775780634300f5e11461049757806346e04a2f146104aa57600080fd5b80630b78f9c0116102455780630b78f9c01461031e578063150b7a02146103315780631959a0021461036a57806319fca468146103985780631b7c7152146103c55780631f8bc790146103e557600080fd5b8062ae3bf81461028c57806306bb00fa146102ae57806306fdde03146102e157806307c38132146103035780630ae2f3211461030b57600080fd5b3661028757005b600080fd5b34801561029857600080fd5b506102ac6102a736600461504b565b6107ba565b005b3480156102ba57600080fd5b506102ce6102c936600461504b565b61088f565b6040519081526020015b60405180910390f35b3480156102ed57600080fd5b506102f66108fe565b6040516102d89190615094565b6102ce61098c565b6102ac61031936600461531c565b610b43565b6102ac61032c36600461539b565b61135e565b34801561033d57600080fd5b5061035161034c366004615414565b61153a565b6040516001600160e01b031990911681526020016102d8565b34801561037657600080fd5b5061038a61038536600461504b565b6115b0565b6040516102d89291906154c2565b3480156103a457600080fd5b506009546103b8906001600160a01b031681565b6040516102d891906154e4565b3480156103d157600080fd5b506102ce6103e03660046154f8565b61169f565b3480156103f157600080fd5b506104056104003660046154f8565b6116ff565b6040516102d893929190615511565b34801561042057600080fd5b5061043461042f36600461553a565b611801565b6040516102d891906155cb565b34801561044d57600080fd5b506102ac61045c366004615677565b611b00565b34801561046d57600080fd5b506102ce600a5481565b34801561048357600080fd5b506102ce6104923660046154f8565b6120e6565b6102ac6104a53660046154f8565b612107565b3480156104b657600080fd5b506102ac6104c53660046154f8565b6123c6565b3480156104d657600080fd5b506103b86104e53660046154f8565b612a1f565b3480156104f657600080fd5b50600c546103b8906001600160a01b031681565b34801561051657600080fd5b506013546103b8906001600160a01b031681565b34801561053657600080fd5b506102ac61054536600461504b565b612a49565b34801561055657600080fd5b506102ce60105481565b34801561056c57600080fd5b506102ce60165481565b34801561058257600080fd5b506102ce60115481565b34801561059857600080fd5b506102ac612c2e565b3480156105ad57600080fd5b506102ac6105bc36600461504b565b612c42565b6102ac612cbb565b3480156105d557600080fd5b506102ce612db0565b3480156105ea57600080fd5b506105f3612ee8565b6040516102d891906156c6565b34801561060c57600080fd5b506102ac61061b3660046156d9565b612f40565b34801561062c57600080fd5b506102ce60125481565b34801561064257600080fd5b506102ce60175481565b34801561065857600080fd5b506103b861300e565b6102ac61066f36600461504b565b61301d565b34801561068057600080fd5b506102ac61068f366004615774565b6130fc565b3480156106a057600080fd5b506015546103b8906001600160a01b031681565b3480156106c057600080fd5b506005546103b8906001600160a01b031681565b6102ac613440565b6102ce613571565b3480156106f057600080fd5b506007546103b8906001600160a01b031681565b34801561071057600080fd5b506102ac61071f36600461504b565b613722565b34801561073057600080fd5b506102ce60195481565b34801561074657600080fd5b506014546103b8906001600160a01b031681565b34801561076657600080fd5b506008546103b8906001600160a01b031681565b34801561078657600080fd5b5061043461079536600461504b565b6137eb565b3480156107a657600080fd5b506102ac6107b536600461504b565b613b6c565b6107c2613be2565b6001600160a01b038116610804576040514790339082156108fc029083906000818181858888f193505050501580156107ff573d6000803e3d6000fd5b505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906108339030906004016154e4565b602060405180830381865afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190615865565b905061088a6001600160a01b0383163383613c41565b505b50565b6001600160a01b0381166000908152600d6020908152604080832080548251818502810185019093528083526108f8938301828280156108ee57602002820191906000526020600020905b8154815260200190600101908083116108da575b5050505050613c97565b92915050565b6006805461090b9061587e565b80601f01602080910402602001604051908101604052809291908181526020018280546109379061587e565b80156109845780601f1061095957610100808354040283529160200191610984565b820191906000526020600020905b81548152906001019060200180831161096757829003601f168201915b505050505081565b60025460009060ff166109ba5760405162461bcd60e51b81526004016109b1906158b8565b60405180910390fd5b6109c2613f0c565b6014546001600160a01b03163314610a1c5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865206465706c6f79657200000000000060448201526064016109b1565b60195415610a5b5760405162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e48135a5b9d60a21b60448201526064016109b1565b610a63613f65565b601580546001600160a01b03191690556009546040516335313c2160e11b81526001600160a01b0390911690636a62784290610aa39033906004016154e4565b6020604051808303816000875af1158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190615865565b601981905560095460405133927f27eca3b28413ace90047223e775d01bfec4b39b666590555f818761ff53566c092610b2b926001600160a01b0390911691906158e1565b60405180910390a250601954610b4060018055565b90565b60025460ff16610b655760405162461bcd60e51b81526004016109b1906158b8565b610b6d613f0c565b600a54825114610bb25760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642070657263656e747360801b60448201526064016109b1565b600a54610bc0906001615910565b815114610bdf5760405162461bcd60e51b81526004016109b190615928565b6000805b600a548160ff161015610c2c57838160ff1681518110610c0557610c05615956565b602002602001015182610c189190615910565b915080610c248161596c565b915050610be3565b50600354811115610c8b5760405162461bcd60e51b8152602060048201526024808201527f546f74616c2070657263656e746167652063616e6e6f742065786365656420316044820152630303030360e41b60648201526084016109b1565b6000610cb2868685600081518110610ca557610ca5615956565b6020026020010151613fff565b90506000610cbe612db0565b90506000610ccb3361433b565b905060006002600354610cde9190615a6f565b60075460408051634cd2c83b60e01b8152905185926001600160a01b031691634cd2c83b9160048083019260209291908290030181865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190615865565b610d559087615a7e565b610d5f9190615a7e565b610d699190615a9d565b9050600760009054906101000a90046001600160a01b03166001600160a01b031663ba64248e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190615abf565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610e1a573d6000803e3d6000fd5b5060006002600354610e2c9190615a6f565b8360105487610e3b9190615a7e565b610e459190615a7e565b610e4f9190615a9d565b6015549091506001600160a01b0316610ed057806018600a5481548110610e7857610e78615956565b906000526020600020016000828254610e919190615910565b90915550670de0b6b3a76400009050610eaa8583615a7e565b610eb49190615a9d565b60176000828254610ec59190615910565b90915550610f0c9050565b6015546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610f0a573d6000803e3d6000fd5b505b610f168183615910565b610f209086615adc565b9450670de0b6b3a7640000610f358583615a7e565b610f3f9190615a9d565b60166000828254610f509190615910565b9091555050336000908152600d602052604081206001810154909103610fc957600a546001600160401b03811115610f8a57610f8a6150c7565b604051908082528060200260200182016040528015610fb3578160200160208202803683370190505b508051610fc7918391602090910190614e78565b505b600080600a546001600160401b03811115610fe657610fe66150c7565b60405190808252806020026020018201604052801561100f578160200160208202803683370190505b50905060005b600a548160ff16101561127e5760006003548d8360ff168151811061103c5761103c615956565b60200260200101518b61104f9190615a7e565b6110599190615a9d565b905080600003611069575061126c565b600554600b80546001600160a01b039092169160ff851690811061108f5761108f615956565b6000918252602090912001546001600160a01b03160361113957600560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110f957600080fd5b505af115801561110d573d6000803e3d6000fd5b505050505080838360ff168151811061112857611128615956565b6020026020010181815250506111b7565b61119581600b8460ff168154811061115357611153615956565b6000918252602090912001546001600160a01b0316308f611175876001615af3565b60ff168151811061118857611188615956565b6020026020010151614449565b838360ff16815181106111aa576111aa615956565b6020026020010181815250505b828260ff16815181106111cc576111cc615956565b6020026020010151856000018360ff16815481106111ec576111ec615956565b9060005260206000200160008282546112059190615910565b92505081905550828260ff168151811061122157611221615956565b6020026020010151600f8360ff168154811061123f5761123f615956565b9060005260206000200160008282546112589190615910565b9091555061126890508185615910565b9350505b806112768161596c565b915050611015565b506000670de0b6b3a76400006112948985615a7e565b61129e9190615a9d565b9050808460010160008282546112b49190615910565b909155503390507fe75ca9244dc39a5b3080920dd7b2eb2ce5f58b95da665a3d4fd11c89f7766302848e85856112ea8b8d615910565b6040516112fb959493929190615b18565b60405180910390a26003548a101561134557336108fc61131b858c615adc565b6040518115909202916000818181858888f19350505050158015611343573d6000803e3d6000fd5b505b5050505050505050505061135860018055565b50505050565b6015546001600160a01b031633148061138f575061137a61300e565b6001600160a01b0316336001600160a01b0316145b6113ab5760405162461bcd60e51b81526004016109b190615b58565b60075460405163350c910b60e21b8152600060048201526001600160a01b039091169063d432442c90602401602060405180830381865afa1580156113f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114189190615865565b8211158015611493575060075460405163350c910b60e21b8152600160048201526001600160a01b039091169063d432442c90602401602060405180830381865afa15801561146b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148f9190615865565b8111155b6114ea5760405162461bcd60e51b815260206004820152602260248201527f43616e6e6f742065786365656420666565206c696d6974206f6620666163746f604482015261727960f01b60648201526084016109b1565b6114f2613f65565b6010829055601181905560408051838152602081018390527f3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d153291015b60405180910390a15050565b6008546000906001600160a01b031633148061156057506009546001600160a01b031633145b61159e5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b98589b195908139195608a1b60448201526064016109b1565b50630a85bd0160e11b5b949350505050565b6001600160a01b0381166000908152600d60209081526040808320815181549384028101606090810184529281018481529294938493919291839183908389018282801561161d57602002820191906000526020600020905b815481526020019060010190808311611609575b505050505081526020016001820154815250509050806020015160000361168d57600a546001600160401b03811115611658576116586150c7565b604051908082528060200260200182016040528015611681578160200160208202803683370190505b50946000945092505050565b80516020909101519094909350915050565b6000818152600e6020908152604080832060010180548251818502810185019093528083526108f8938301828280156108ee57602002820191906000526020600020908154815260200190600101908083116108da575050505050613c97565b6000818152600e60209081526040808320815160608181018452825482526001830180548551818802810188019096528086529195879586959385830193919283018282801561176e57602002820191906000526020600020905b81548152602001906001019080831161175a575b50505050508152602001600282015481525050905080604001516000036117e3576001600a546001600160401b038111156117ab576117ab6150c7565b6040519080825280602002602001820160405280156117d4578160200160208202803683370190505b506000935093509350506117fa565b806000015181602001518260400151935093509350505b9193909250565b6060600a5460016118129190615910565b6001600160401b03811115611829576118296150c7565b60405190808252806020026020018201604052801561186257816020015b61184f614ec3565b8152602001906001900390816118475790505b509050826001600160a01b0385161561196057600c54600554604051632604e7a760e11b81526001600160a01b0392831692634c09cf4e926118af9289928b921690600390600401615b8f565b600060405180830381865afa1580156118cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118f49190810190615c18565b8260008151811061190757611907615956565b602002602001018190525060008260008151811061192757611927615956565b602002602001015160000151905080600182516119449190615adc565b8151811061195457611954615956565b60200260200101519150505b60005b600a548160ff161015611af75783518160ff161015611af7576000600354858360ff168151811061199657611996615956565b6020026020010151846119a99190615a7e565b6119b39190615a9d565b90508015806119fa5750600554600b80546001600160a01b039092169160ff85169081106119e3576119e3615956565b6000918252602090912001546001600160a01b0316145b15611a055750611ae5565b600c54600554600b80546001600160a01b0393841693634c09cf4e93869391169160ff8816908110611a3957611a39615956565b6000918252602090912001546040516001600160e01b031960e086901b168152611a749392916001600160a01b031690600390600401615b8f565b600060405180830381865afa158015611a91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ab99190810190615c18565b84611ac5846001615af3565b60ff1681518110611ad857611ad8615956565b6020026020010181905250505b80611aef8161596c565b915050611963565b50509392505050565b60025460ff16611b225760405162461bcd60e51b81526004016109b1906158b8565b611b2a613f0c565b336000908152600d602052604090206001810154611b5a5760405162461bcd60e51b81526004016109b190615d2c565b600a54611b68906001615910565b825114611b875760405162461bcd60e51b81526004016109b190615928565b6000805b600a54811015611d32576000836000018281548110611bac57611bac615956565b9060005260206000200154905080600f8381548110611bcd57611bcd615956565b906000526020600020016000828254611be69190615adc565b90915550508354849083908110611bff57611bff615956565b9060005260206000200154600003611c175750611d20565b600554600b80546000926001600160a01b0316919085908110611c3c57611c3c615956565b6000918252602090912001546001600160a01b031603611cba5750600554604051632e1a7d4d60e01b81526004810183905282916001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611c9d57600080fd5b505af1158015611cb1573d6000803e3d6000fd5b50505050611d11565b611d0e82600b8581548110611cd157611cd1615956565b9060005260206000200160009054906101000a90046001600160a01b0316888681518110611d0157611d01615956565b60200260200101516145ac565b90505b611d1b8185615910565b935050505b80611d2a81615d59565b915050611b8b565b50600080611d3f3361433b565b90506000611d4b612db0565b6001860154909150670de0b6b3a7640000611d668387615a7e565b611d709190615a9d565b111561204f576000818660010154670de0b6b3a76400008488611d939190615a7e565b611d9d9190615a9d565b611da79190615adc565b611db990670de0b6b3a7640000615a7e565b611dc39190615a9d565b905060006002600354611dd69190615a6f565b60075460408051634cd2c83b60e01b8152905187926001600160a01b031691634cd2c83b9160048083019260209291908290030181865afa158015611e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e439190615865565b611e4d9085615a7e565b611e579190615a7e565b611e619190615a9d565b9050600760009054906101000a90046001600160a01b03166001600160a01b031663ba64248e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eda9190615abf565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015611f12573d6000803e3d6000fd5b506002600354611f229190615a6f565b8460115484611f319190615a7e565b611f3b9190615a7e565b611f459190615a9d565b6015549095506001600160a01b0316611fc657846018600a5481548110611f6e57611f6e615956565b906000526020600020016000828254611f879190615910565b90915550670de0b6b3a76400009050611fa08487615a7e565b611faa9190615a9d565b60176000828254611fbb9190615910565b909155506120029050565b6015546040516001600160a01b039091169086156108fc029087906000818181858888f19350505050158015612000573d6000803e3d6000fd5b505b670de0b6b3a76400006120158487615a7e565b61201f9190615a9d565b601660008282546120309190615910565b9091555061204090508186615910565b61204a9087615adc565b955050505b60405133907fd4e556fd296fc0834606f2c7b26c79a95ca9d47e20661228079f52b2de00357b9061208590889088908890615d72565b60405180910390a2336000908152600d60205260408120906120a78282614eeb565b600182016000905550506120d887338689600a54815181106120cb576120cb615956565b6020026020010151614645565b505050505061088a60018055565b600f81815481106120f657600080fd5b600091825260209091200154905081565b60025460ff166121295760405162461bcd60e51b81526004016109b1906158b8565b612131613f0c565b336000908152600d60205260409020612148613f65565b600854604051632142170760e11b81526001600160a01b03909116906342842e0e9061217c90339030908790600401615dc7565b600060405180830381600087803b15801561219657600080fd5b505af11580156121aa573d6000803e3d6000fd5b5050600854604051630852cd8d60e31b8152600481018690526001600160a01b0390911692506342966c689150602401600060405180830381600087803b1580156121f457600080fd5b505af1158015612208573d6000803e3d6000fd5b5050506000838152600e602090815260408083208151606081018352815481526001820180548451818702810187019095528085529596509094919385810193929083018282801561227957602002820191906000526020600020905b815481526020019060010190808311612265575b50505091835250506002919091015460209091015282549091506000036122b55760208082015180516122af9285920190614e78565b50612331565b60005b600a548160ff16101561232f5781602001518160ff16815181106122de576122de615956565b6020026020010151836000018260ff16815481106122fe576122fe615956565b9060005260206000200160008282546123179190615910565b909155508190506123278161596c565b9150506122b8565b505b80604001518260010160008282546123499190615910565b90915550506020810151604080830151905133927f96bec10adb343aa10807f2b30b777bbe09e0fe1c8610fe422decfc71ba88ec9f9261238a928890615deb565b60405180910390a26000838152600e60205260408120818155906123b16001830182614eeb565b60028201600090555050505061088c60018055565b60025460ff166123e85760405162461bcd60e51b81526004016109b1906158b8565b6123f0613f0c565b60008111801561240257506003548111155b6124405760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c195c98d95b9d608a1b60448201526064016109b1565b336000908152600d6020526040902060018101546124705760405162461bcd60e51b81526004016109b190615d2c565b600061247b3361433b565b90506000612487612db0565b905060006124e4846000018054806020026020016040519081016040528092919081815260200182805480156108ee57602002820191906000526020600020908154815260200190600101908083116108da575050505050613c97565b90506000670de0b6b3a76400006124fb8484615a7e565b6125059190615a9d565b6001860154909150811160008161251d57600061252c565b600187015461252c9084615adc565b90506000600760009054906101000a90046001600160a01b03166001600160a01b031663ba64248e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a79190615abf565b90506000600760009054906101000a90046001600160a01b03166001600160a01b0316634cd2c83b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126229190615865565b9050600060026003546126359190615a6f565b8a600101546126449190615a7e565b90506000600a546001600160401b03811115612662576126626150c7565b60405190808252806020026020018201604052801561268b578160200160208202803683370190505b50905060005b600a548110156128c55760006003548e8e60000184815481106126b6576126b6615956565b90600052602060002001546126cb9190615a7e565b6126d59190615a9d565b9050808383815181106126ea576126ea615956565b60200260200101818152505060008089156127ff5760008e61270c8b86615a7e565b6127169190615a7e565b9050866127238983615a7e565b61272d9190615a9d565b9150612761600b868154811061274557612745615956565b6000918252602090912001546001600160a01b03168a846148f3565b86601154826127709190615a7e565b61277a9190615a9d565b6015549093506001600160a01b03166127c55782601886815481106127a1576127a1615956565b9060005260206000200160008282546127ba9190615910565b909155506127fd9050565b6127fd600b86815481106127db576127db615956565b6000918252602090912001546015546001600160a01b039182169116856148f3565b505b612845600b858154811061281557612815615956565b6000918252602090912001546001600160a01b031633836128368688615adc565b6128409190615adc565b6148f3565b828f600001858154811061285b5761285b615956565b9060005260206000200160008282546128749190615adc565b9250508190555082600f858154811061288f5761288f615956565b9060005260206000200160008282546128a89190615adc565b9250508190555050505080806128bd90615d59565b915050612691565b506000861561299157600354866128dc8f8c615a7e565b6128e69190615a7e565b6128f09190615a9d565b9050828b601154836129029190615a7e565b61290c9190615a7e565b6129169190615a9d565b6015549091506001600160a01b031661295d57670de0b6b3a764000061293c8b83615a7e565b6129469190615a9d565b601760008282546129579190615910565b90915550505b670de0b6b3a76400006129708b83615a7e565b61297a9190615a9d565b6016600082825461298b9190615910565b90915550505b60006003548e8e600101546129a69190615a7e565b6129b09190615a9d565b9050808d60010160008282546129c69190615adc565b909155505060405133907fc7261db8b412ba6a79185449eee1fb190f1ccdcd00dacebd6bad09b4e033b33f90612a0190869085908790615deb565b60405180910390a25050505050505050505050505061088c60018055565b600b8181548110612a2f57600080fd5b6000918252602090912001546001600160a01b0316905081565b612a51613be2565b60025460ff16612a735760405162461bcd60e51b81526004016109b1906158b8565b6001600160a01b038116612a995760405162461bcd60e51b81526004016109b190615e10565b60006001600160a01b0316816001600160a01b031663b381cf406040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b069190615abf565b6001600160a01b031603612b565760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b21039bbb0b81030b3b3b932b3b0ba37b960491b60448201526064016109b1565b600c80546001600160a01b0319166001600160a01b038316908117909155604080516302ce073d60e61b8152905163b381cf40916004808201926020929091908290030181865afa158015612baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd39190615abf565b600580546001600160a01b0319166001600160a01b03929092169190911790556040517feffeb6d84590144cbff5304be4487d09001a14ab33344037bafcf8129f1cb85190612c239083906154e4565b60405180910390a150565b612c36613be2565b612c4060006149b1565b565b612c4a613be2565b6001600160a01b038116612c705760405162461bcd60e51b81526004016109b190615e39565b600880546001600160a01b0319166001600160a01b0383161790556040517ff7b003cc430c1bd951f3513f1b4524bd8974b4ccf0f8173e04c8672c3174bea990612c239083906154e4565b60025460ff16612cdd5760405162461bcd60e51b81526004016109b1906158b8565b612ce5613f0c565b601580546001600160a01b03191633179055612cff613f65565b612d07614a01565b600954601954604051632142170760e11b81526001600160a01b03909216916342842e0e91612d3c9133913091600401615dc7565b600060405180830381600087803b158015612d5657600080fd5b505af1158015612d6a573d6000803e3d6000fd5b50506019546040519081523392507fbb06f8d9e44b84f4104ab4ebb7f6f8a690e4c48b21c28c34453cbbd5d268e87a91506020015b60405180910390a2612c4060018055565b6004546000906001600160a01b0316612dc95750600090565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e429190615e78565b50505091505080600003612e5857600091505090565b600480546040805163313ce56760e01b8152905184936000936001600160a01b03169263313ce56792818301926020928290030181865afa158015612ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec59190615ec8565b612ed39060ff166012615adc565b612ede90600a615eeb565b6115a89083615a7e565b60606018805480602002602001604051908101604052809291908181526020018280548015612f3657602002820191906000526020600020905b815481526020019060010190808311612f22575b5050505050905090565b6013546001600160a01b03163314612f965760405162461bcd60e51b815260206004820152601960248201527839b2ba29b2b93b34b1b2a4b733379d102327a92124a22222a760391b60448201526064016109b1565b6001600160a01b038216612fbc5760405162461bcd60e51b81526004016109b190615e10565b601380546001600160a01b0319166001600160a01b03841617905560128190556040517fc208076e24c8758b41e972b01aa2abe614d7962b6d0a645f0e57b4161dd5141c9061152e90849084906158e1565b6000546001600160a01b031690565b6015546001600160a01b031633148061304e575061303961300e565b6001600160a01b0316336001600160a01b0316145b61306a5760405162461bcd60e51b81526004016109b190615b58565b6001600160a01b0381166130b15760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081dd85b1b195d60921b60448201526064016109b1565b601580546001600160a01b0319166001600160a01b0383161790556040517f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da4190612c239083906154e4565b60025460ff16156131455760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016109b1565b600061314f61300e565b6001600160a01b0316148061317c575061316761300e565b6001600160a01b0316336001600160a01b0316145b6131b65760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b60448201526064016109b1565b6005875111156132005760405162461bcd60e51b8152602060048201526015602482015274457863656564206d6178696d756d20746f6b656e7360581b60448201526064016109b1565b6002805460ff1916600117905588516132209060069060208c0190614f09565b50612710600355600480546001600160a01b0319908116730567f2323251f0aab15c8dfb1967e4e8a7d42aee178255600c80546001600160a01b038c16921682179055604080516302ce073d60e61b81529051919263b381cf409282820192602092908290030181865afa15801561329c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c09190615abf565b600580546001600160a01b03199081166001600160a01b03938416179091558851600a8190558651601055602080880151601155662386f26fc1000060125560138054735ac58191f3bbdf6d037c6c6201adc9f99c93c53a90851617905560148054841687861617905560158054841686861617905560078054339085161790556008805484168b8616179055600980549093169389169390931790915561336e91600b91908a0190614f7c565b50600a546001600160401b03811115613389576133896150c7565b6040519080825280602002602001820160405280156133b2578160200160208202803683370190505b5080516133c791600f91602090910190614e78565b50600a546133d6906001615910565b6001600160401b038111156133ed576133ed6150c7565b604051908082528060200260200182016040528015613416578160200160208202803683370190505b50805161342b91601891602090910190614e78565b50613435836149b1565b505050505050505050565b60025460ff166134625760405162461bcd60e51b81526004016109b1906158b8565b61346a613f0c565b6015546001600160a01b031633146134bd5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1037b832b930ba37b960511b60448201526064016109b1565b6134c5613f65565b601580546001600160a01b0319169055600954601954604051632142170760e11b81526001600160a01b03909216916342842e0e9161350a9130913391600401615dc7565b600060405180830381600087803b15801561352457600080fd5b505af1158015613538573d6000803e3d6000fd5b50506019546040519081523392507f7170d2ec5a07b199ad85a9a215df5614ccf55dd24983b06e9913141b12d549189150602001612d9f565b60025460009060ff166135965760405162461bcd60e51b81526004016109b1906158b8565b61359e613f0c565b336000908152600d6020526040902060018101546135ce5760405162461bcd60e51b81526004016109b190615d2c565b6135d6613f65565b6008546040516335313c2160e11b81526000916001600160a01b031690636a627842906136079033906004016154e4565b6020604051808303816000875af1158015613626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364a9190615865565b6000818152600e6020526040902083549192509061366e9060018301908590614fd1565b5060018084015460028301819055908255683635c9adc5dea00000111561369457600081555b69010f0cf064dd59200000816002015411156136af57600281555b336000908152600d60205260408120906136c98282614eeb565b506000600191820155600282015460405133927f23a7eea526d8a3a3e31ee796d6571345c8faf8fcfc6e509a67d85f97ffcd6de99261370d92918601918790615d72565b60405180910390a250915050610b4060018055565b61372a613be2565b6019541561377a5760405162461bcd60e51b815260206004820152601b60248201527f4465706c6f796572204e465420616c7265616479206d696e746564000000000060448201526064016109b1565b6001600160a01b0381166137a05760405162461bcd60e51b81526004016109b190615e39565b600980546001600160a01b0319166001600160a01b0383161790556040517fd9b677b9c9b93164c658b14fa5a5d48912dbd03c690acb1cff638697159aabcd90612c239083906154e4565b6060600a5460016137fc9190615910565b6001600160401b03811115613813576138136150c7565b60405190808252806020026020018201604052801561384c57816020015b613839614ec3565b8152602001906001900390816138315790505b50336000908152600d6020908152604080832081518154606094810282018501845292810183815295965093949092849284918401828280156138ae57602002820191906000526020600020905b81548152602001906001019080831161389a575b5050509183525050600191909101546020909101528051909150600090815b600a54811015613ab3578181815181106138e9576138e9615956565b602002602001015160000315613aa157600554600b80546001600160a01b03909216918390811061391c5761391c615956565b6000918252602090912001546001600160a01b0316036139625781818151811061394857613948615956565b60200260200101518361395b9190615910565b9250613aa1565b600c5482516001600160a01b0390911690634c09cf4e9084908490811061398b5761398b615956565b6020026020010151600b84815481106139a6576139a6615956565b6000918252602090912001546005546040516001600160e01b031960e086901b1681526139e793926001600160a01b03908116921690600390600401615b8f565b600060405180830381865afa158015613a04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a2c9190810190615c18565b858281518110613a3e57613a3e615956565b60200260200101819052506000858281518110613a5d57613a5d615956565b60200260200101516000015190508060018251613a7a9190615adc565b81518110613a8a57613a8a615956565b602002602001015184613a9d9190615910565b9350505b80613aab81615d59565b9150506138cd565b506001600160a01b03851615613b6457600c54600554604051632604e7a760e11b81526001600160a01b0392831692634c09cf4e92613aff928792909116908a90600390600401615b8f565b600060405180830381865afa158015613b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613b449190810190615c18565b84600a5481518110613b5857613b58615956565b60200260200101819052505b505050919050565b613b74613be2565b6001600160a01b038116613bd95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109b1565b61088c816149b1565b33613beb61300e565b6001600160a01b031614612c405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109b1565b6107ff8363a9059cbb60e01b8484604051602401613c609291906158e1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614b6e565b600080600c60009054906101000a90046001600160a01b03166001600160a01b0316636a2e87246040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d119190615865565b9050613d1b614ec3565b60005b600a548160ff161015613b6457848160ff1681518110613d4057613d40615956565b602002602001015160000315613efa57600554600b80546001600160a01b039092169160ff8416908110613d7657613d76615956565b6000918252602090912001546001600160a01b031603613dbf57848160ff1681518110613da557613da5615956565b602002602001015184613db89190615910565b9350613efa565b600c5485516001600160a01b0390911690634c09cf4e90879060ff8516908110613deb57613deb615956565b6020026020010151600b8460ff1681548110613e0957613e09615956565b6000918252602090912001546005546040516001600160e01b031960e086901b168152613e4a93926001600160a01b03908116921690600390600401615b8f565b600060405180830381865afa158015613e67573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e8f9190810190615c18565b80518051919350600091613ea590600190615adc565b81518110613eb557613eb5615956565b602002602001015190506000841115613eec57612710613ed58582615adc565b613edf9083615a7e565b613ee99190615a9d565b90505b613ef68186615910565b9450505b80613f048161596c565b915050613d1e565b600260015403613f5e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109b1565b6002600155565b601254341015613fc35760405162461bcd60e51b815260206004820152602360248201527f53686f756c642070617920736d616c6c2067617320746f2063616c6c206d65746044820152621a1bd960ea1b60648201526084016109b1565b6013546012546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561088c573d6000803e3d6000fd5b60006001600160a01b038416614016575034614334565b6007546040516373a2049760e11b81526000916001600160a01b03169063e744092e906140479088906004016154e4565b602060405180830381865afa158015614064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140889190615ec8565b905060008160ff16116140e95760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f74207a617020696e207769746820756e737570706f72746564207460448201526337b5b2b760e11b60648201526084016109b1565b6103e8841161412e5760405162461bcd60e51b8152602060048201526011602482015270139bdd08195b9bdd59da08185b5bdd5b9d607a1b60448201526064016109b1565b6141436001600160a01b038616333087614c40565b8060ff16600103614160576141598486856145ac565b9150614332565b600754604051635a0f4c8d60e11b81528593506000916001600160a01b03169063b41e991a906141949089906004016154e4565b602060405180830381865afa1580156141b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d59190615abf565b6005549091506001600160a01b039081169087160361425157600554604051632e1a7d4d60e01b8152600481018790526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561423457600080fd5b505af1158015614248573d6000803e3d6000fd5b50505050611af7565b60405163095ea7b360e01b81526001600160a01b0387169063095ea7b39061427f90849089906004016158e1565b6020604051808303816000875af115801561429e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c29190615ef7565b50604051632e1a7d4d60e01b8152600481018690526001600160a01b03821690632e1a7d4d906024016020604051808303816000875af115801561430a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061432e9190615865565b9250505b505b9392505050565b600080600760009054906101000a90046001600160a01b03166001600160a01b03166301a362a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015614391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143b59190615abf565b90506001600160a01b0381166143cf575050600354919050565b604051635f7d4b6760e11b81526001600160a01b0382169063befa96ce906143fb9086906004016154e4565b602060405180830381865afa158015614418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061443c9190615865565b6003546143349190615adc565b8381526040516370a0823160e01b815260009081906001600160a01b038616906370a082319061447d9087906004016154e4565b602060405180830381865afa15801561449a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144be9190615865565b600c5460405163298b2cd760e01b81529192506001600160a01b03169063298b2cd79088906144f39087908990600401615f19565b6000604051808303818588803b15801561450c57600080fd5b505af1158015614520573d6000803e3d6000fd5b50506040516370a0823160e01b8152600093506001600160a01b03891692506370a0823191506145549088906004016154e4565b602060405180830381865afa158015614571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145959190615865565b90506145a18282615adc565b979650505050505050565b828152600c546000906145cc906001600160a01b03858116911686614c61565b600c5460405163987b37bd60e01b815247916001600160a01b03169063987b37bd906145fe9086903090600401615f19565b600060405180830381600087803b15801561461857600080fd5b505af115801561462c573d6000803e3d6000fd5b50505050804761463c9190615adc565b95945050505050565b6001600160a01b03841661468f576040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015614689573d6000803e3d6000fd5b50611358565b6007546040516373a2049760e11b81526000916001600160a01b03169063e744092e906146c09088906004016154e4565b602060405180830381865afa1580156146dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147019190615ec8565b905060008160ff16116147565760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207a6170206f75742077697468207468697320746f6b656e000060448201526064016109b1565b8060ff166001036147735761476d83868685614449565b506148ec565b60055483906001600160a01b03908116908716036147f957600560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156147db57600080fd5b505af11580156147ef573d6000803e3d6000fd5b50505050506148d6565b600754604051635a0f4c8d60e11b81526000916001600160a01b03169063b41e991a9061482a908a906004016154e4565b602060405180830381865afa158015614847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061486b9190615abf565b9050806001600160a01b031663d0e30db0866040518263ffffffff1660e01b815260040160206040518083038185885af11580156148ad573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906148d29190615865565b9150505b6148ea6001600160a01b0387168683613c41565b505b5050505050565b6005546001600160a01b039081169084160361499d57600554604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561494f57600080fd5b505af1158015614963573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f19350505050158015611358573d6000803e3d6000fd5b6107ff6001600160a01b0384168383613c41565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b600a548111614b2f5760188181548110614a2057614a20615956565b906000526020600020015460000315614b1d57600a54811015614a9b57614a96600b8281548110614a5357614a53615956565b600091825260209091200154601554601880546001600160a01b03938416939092169185908110614a8657614a86615956565b90600052602060002001546148f3565b614afb565b601554601880546001600160a01b03909216916108fc919084908110614ac357614ac3615956565b90600052602060002001549081150290604051600060405180830381858888f19350505050158015614af9573d6000803e3d6000fd5b505b600060188281548110614b1057614b10615956565b6000918252602090912001555b80614b2781615d59565b915050614a04565b50600060178190556015546040516001600160a01b03909116917fac13ae50ed2f466efe15ec017279d84440c99a3e8df4f16e5cc459e6da5999a991a2565b6000614bc3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614d659092919063ffffffff16565b8051909150156107ff5780806020019051810190614be19190615ef7565b6107ff5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109b1565b611358846323b872dd60e01b858585604051602401613c6093929190615dc7565b801580614cdb5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015614cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cd99190615865565b155b614d465760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016109b1565b6107ff8363095ea7b360e01b8484604051602401613c609291906158e1565b60606115a8848460008585600080866001600160a01b03168587604051614d8c9190615f7e565b60006040518083038185875af1925050503d8060008114614dc9576040519150601f19603f3d011682016040523d82523d6000602084013e614dce565b606091505b50915091506145a18783838760608315614e49578251600003614e42576001600160a01b0385163b614e425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109b1565b50816115a8565b6115a88383815115614e5e5781518083602001fd5b8060405162461bcd60e51b81526004016109b19190615094565b828054828255906000526020600020908101928215614eb3579160200282015b82811115614eb3578251825591602001919060010190614e98565b50614ebf929150615011565b5090565b6040518060800160405280606081526020016060815260200160608152602001600081525090565b508054600082559060005260206000209081019061088c9190615011565b828054614f159061587e565b90600052602060002090601f016020900481019282614f375760008555614eb3565b82601f10614f5057805160ff1916838001178555614eb3565b82800160010185558215614eb35791820182811115614eb3578251825591602001919060010190614e98565b828054828255906000526020600020908101928215614eb3579160200282015b82811115614eb357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614f9c565b828054828255906000526020600020908101928215614eb35760005260206000209182015b82811115614eb3578254825591600101919060010190614ff6565b5b80821115614ebf5760008155600101615012565b6001600160a01b038116811461088c57600080fd5b803561504681615026565b919050565b60006020828403121561505d57600080fd5b813561433481615026565b60005b8381101561508357818101518382015260200161506b565b838111156113585750506000910152565b60208152600082518060208401526150b3816040850160208701615068565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156150ff576150ff6150c7565b60405290565b604051601f8201601f191681016001600160401b038111828210171561512d5761512d6150c7565b604052919050565b60006001600160401b0382111561514e5761514e6150c7565b5060051b60200190565b600082601f83011261516957600080fd5b8135602061517e61517983615135565b615105565b82815260059290921b8401810191818101908684111561519d57600080fd5b8286015b848110156151b857803583529183019183016151a1565b509695505050505050565b600082601f8301126151d457600080fd5b813560206151e461517983615135565b82815260059290921b8401810191818101908684111561520357600080fd5b8286015b848110156151b857803561521a81615026565b8352918301918301615207565b600082601f83011261523857600080fd5b8135602061524861517983615135565b82815260059290921b8401810191818101908684111561526757600080fd5b8286015b848110156151b85780356001600160401b038082111561528b5760008081fd5b908801906080828b03601f19018113156152a55760008081fd5b6152ad6150dd565b87840135815260408085013589830152606080860135858111156152d15760008081fd5b6152df8f8c838a01016151c3565b84840152509285013592848411156152f957600091508182fd5b6153078e8b868901016151c3565b9083015250865250505091830191830161526b565b6000806000806080858703121561533257600080fd5b843561533d81615026565b93506020850135925060408501356001600160401b038082111561536057600080fd5b61536c88838901615158565b9350606087013591508082111561538257600080fd5b5061538f87828801615227565b91505092959194509250565b600080604083850312156153ae57600080fd5b50508035926020909101359150565b60006001600160401b038311156153d6576153d66150c7565b6153e9601f8401601f1916602001615105565b90508281528383830111156153fd57600080fd5b828260208301376000602084830101529392505050565b6000806000806080858703121561542a57600080fd5b843561543581615026565b9350602085013561544581615026565b92506040850135915060608501356001600160401b0381111561546757600080fd5b8501601f8101871361547857600080fd5b61538f878235602084016153bd565b600081518084526020808501945080840160005b838110156154b75781518752958201959082019060010161549b565b509495945050505050565b6040815260006154d56040830185615487565b90508260208301529392505050565b6001600160a01b0391909116815260200190565b60006020828403121561550a57600080fd5b5035919050565b83815260606020820152600061552a6060830185615487565b9050826040830152949350505050565b60008060006060848603121561554f57600080fd5b833561555a81615026565b92506020840135915060408401356001600160401b0381111561557c57600080fd5b61558886828701615158565b9150509250925092565b600081518084526020808501945080840160005b838110156154b75781516001600160a01b0316875295820195908201906001016155a6565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561566957603f1989840301855281516080815181865261561882870182615487565b915050888201518582038a8701526156308282615592565b91505087820151858203898701526156488282615592565b606093840151969093019590955250948701949250908601906001016155f2565b509098975050505050505050565b6000806040838503121561568a57600080fd5b823561569581615026565b915060208301356001600160401b038111156156b057600080fd5b6156bc85828601615227565b9150509250929050565b6020815260006143346020830184615487565b600080604083850312156156ec57600080fd5b82356156f781615026565b946020939093013593505050565b600082601f83011261571657600080fd5b604051604081018181106001600160401b0382111715615738576157386150c7565b806040525080604084018581111561574f57600080fd5b845b81811015615769578035835260209283019201615751565b509195945050505050565b60008060008060008060008060006101408a8c03121561579357600080fd5b89356001600160401b03808211156157aa57600080fd5b818c0191508c601f8301126157be57600080fd5b6157cd8d8335602085016153bd565b9a506157db60208d0161503b565b995060408c01359150808211156157f157600080fd5b506157fe8c828d016151c3565b97505061580d60608b0161503b565b955061581b60808b0161503b565b945061582a8b60a08c01615705565b935061583860e08b0161503b565b92506158476101008b0161503b565b91506158566101208b0161503b565b90509295985092959850929598565b60006020828403121561587757600080fd5b5051919050565b600181811c9082168061589257607f821691505b6020821081036158b257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600f908201526e139bdd081a5b9a5d1a585b1a5e9959608a1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601160045260246000fd5b60008219821115615923576159236158fa565b500190565b602080825260149082015273496e76616c696420747261646520636f6e66696760601b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8103615982576159826158fa565b60010192915050565b600181815b808511156159c65781600019048211156159ac576159ac6158fa565b808516156159b957918102915b93841c9390800290615990565b509250929050565b6000826159dd575060016108f8565b816159ea575060006108f8565b8160018114615a005760028114615a0a57615a26565b60019150506108f8565b60ff841115615a1b57615a1b6158fa565b50506001821b6108f8565b5060208310610133831016604e8410600b8410161715615a49575081810a6108f8565b615a53838361598b565b8060001904821115615a6757615a676158fa565b029392505050565b600061433460ff8416836159ce565b6000816000190483118215151615615a9857615a986158fa565b500290565b600082615aba57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615ad157600080fd5b815161433481615026565b600082821015615aee57615aee6158fa565b500390565b600060ff821660ff84168060ff03821115615b1057615b106158fa565b019392505050565b85815260a060208201526000615b3160a0830187615487565b8281036040840152615b438187615487565b60608401959095525050608001529392505050565b6020808252601a908201527f43616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b600082601f830112615bc557600080fd5b81516020615bd561517983615135565b82815260059290921b84018101918181019086841115615bf457600080fd5b8286015b848110156151b8578051615c0b81615026565b8352918301918301615bf8565b60006020808385031215615c2b57600080fd5b82516001600160401b0380821115615c4257600080fd5b9084019060808287031215615c5657600080fd5b615c5e6150dd565b825182811115615c6d57600080fd5b8301601f81018813615c7e57600080fd5b8051615c8c61517982615135565b81815260059190911b8201860190868101908a831115615cab57600080fd5b928701925b82841015615cc957835182529287019290870190615cb0565b84525050508284015182811115615cdf57600080fd5b615ceb88828601615bb4565b85830152506040830151935081841115615d0457600080fd5b615d1087858501615bb4565b6040820152606083015160608201528094505050505092915050565b6020808252601390820152724e6f20617661696c61626c6520746f6b656e7360681b604082015260600190565b600060018201615d6b57615d6b6158fa565b5060010190565b6000606082016060835280865480835260808501915087600052602092508260002060005b82811015615db357815484529284019260019182019101615d97565b505050908301949094525060400152919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b606081526000615dfe6060830186615487565b60208301949094525060400152919050565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b6020808252600b908201526a125b9d985b1a590813919560aa1b604082015260600190565b805169ffffffffffffffffffff8116811461504657600080fd5b600080600080600060a08688031215615e9057600080fd5b615e9986615e5e565b9450602086015193506040860151925060608601519150615ebc60808701615e5e565b90509295509295909350565b600060208284031215615eda57600080fd5b815160ff8116811461433457600080fd5b600061433483836159ce565b600060208284031215615f0957600080fd5b8151801515811461433457600080fd5b60408152825160408201526020830151606082015260006040840151608080840152615f4860c0840182615592565b90506060850151603f198483030160a0850152615f658282615592565b9250505060018060a01b03831660208301529392505050565b60008251615f90818460208701615068565b919091019291505056fea26469706673582212209c2cd299cdb5fef55b3e8807e3d1d6f1edd96aaeff2a53756146871aa5d0035664736f6c634300080e0033",
  "deployedBytecode": "0x6080604052600436106102805760003560e01c80636fb1eb0c1161014f57806395abdb52116100c1578063c4c715421161007a578063c4c7154214610704578063d26c07ce14610724578063d5f394881461073a578063dddc9ede1461075a578063ed7f79cf1461077a578063f2fde38b1461079a57600080fd5b806395abdb521461067457806397c0262a14610694578063b381cf40146106b4578063bd8dc381146106d4578063c2229fea146106dc578063c45a0155146106e457600080fd5b806376917ca01161011357806376917ca0146105de57806381b619481461060057806387788782146106205780638792e303146106365780638da5cb5b1461064c57806390d49b9d1461066157600080fd5b80636fb1eb0c14610576578063715018a61461058c5780637404b844146105a157806374e353b3146105c157806375923d39146105c957600080fd5b806320e55fbc116101f35780634f64b2be116101ac5780634f64b2be146104ca5780635ace5813146104ea57806361d027b31461050a578063649cc8d21461052a57806367a527931461054a5780636dfa8d991461056057600080fd5b806320e55fbc1461041457806335130677146104415780634149db481461046157806341cb8c20146104775780634300f5e11461049757806346e04a2f146104aa57600080fd5b80630b78f9c0116102455780630b78f9c01461031e578063150b7a02146103315780631959a0021461036a57806319fca468146103985780631b7c7152146103c55780631f8bc790146103e557600080fd5b8062ae3bf81461028c57806306bb00fa146102ae57806306fdde03146102e157806307c38132146103035780630ae2f3211461030b57600080fd5b3661028757005b600080fd5b34801561029857600080fd5b506102ac6102a736600461504b565b6107ba565b005b3480156102ba57600080fd5b506102ce6102c936600461504b565b61088f565b6040519081526020015b60405180910390f35b3480156102ed57600080fd5b506102f66108fe565b6040516102d89190615094565b6102ce61098c565b6102ac61031936600461531c565b610b43565b6102ac61032c36600461539b565b61135e565b34801561033d57600080fd5b5061035161034c366004615414565b61153a565b6040516001600160e01b031990911681526020016102d8565b34801561037657600080fd5b5061038a61038536600461504b565b6115b0565b6040516102d89291906154c2565b3480156103a457600080fd5b506009546103b8906001600160a01b031681565b6040516102d891906154e4565b3480156103d157600080fd5b506102ce6103e03660046154f8565b61169f565b3480156103f157600080fd5b506104056104003660046154f8565b6116ff565b6040516102d893929190615511565b34801561042057600080fd5b5061043461042f36600461553a565b611801565b6040516102d891906155cb565b34801561044d57600080fd5b506102ac61045c366004615677565b611b00565b34801561046d57600080fd5b506102ce600a5481565b34801561048357600080fd5b506102ce6104923660046154f8565b6120e6565b6102ac6104a53660046154f8565b612107565b3480156104b657600080fd5b506102ac6104c53660046154f8565b6123c6565b3480156104d657600080fd5b506103b86104e53660046154f8565b612a1f565b3480156104f657600080fd5b50600c546103b8906001600160a01b031681565b34801561051657600080fd5b506013546103b8906001600160a01b031681565b34801561053657600080fd5b506102ac61054536600461504b565b612a49565b34801561055657600080fd5b506102ce60105481565b34801561056c57600080fd5b506102ce60165481565b34801561058257600080fd5b506102ce60115481565b34801561059857600080fd5b506102ac612c2e565b3480156105ad57600080fd5b506102ac6105bc36600461504b565b612c42565b6102ac612cbb565b3480156105d557600080fd5b506102ce612db0565b3480156105ea57600080fd5b506105f3612ee8565b6040516102d891906156c6565b34801561060c57600080fd5b506102ac61061b3660046156d9565b612f40565b34801561062c57600080fd5b506102ce60125481565b34801561064257600080fd5b506102ce60175481565b34801561065857600080fd5b506103b861300e565b6102ac61066f36600461504b565b61301d565b34801561068057600080fd5b506102ac61068f366004615774565b6130fc565b3480156106a057600080fd5b506015546103b8906001600160a01b031681565b3480156106c057600080fd5b506005546103b8906001600160a01b031681565b6102ac613440565b6102ce613571565b3480156106f057600080fd5b506007546103b8906001600160a01b031681565b34801561071057600080fd5b506102ac61071f36600461504b565b613722565b34801561073057600080fd5b506102ce60195481565b34801561074657600080fd5b506014546103b8906001600160a01b031681565b34801561076657600080fd5b506008546103b8906001600160a01b031681565b34801561078657600080fd5b5061043461079536600461504b565b6137eb565b3480156107a657600080fd5b506102ac6107b536600461504b565b613b6c565b6107c2613be2565b6001600160a01b038116610804576040514790339082156108fc029083906000818181858888f193505050501580156107ff573d6000803e3d6000fd5b505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906108339030906004016154e4565b602060405180830381865afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190615865565b905061088a6001600160a01b0383163383613c41565b505b50565b6001600160a01b0381166000908152600d6020908152604080832080548251818502810185019093528083526108f8938301828280156108ee57602002820191906000526020600020905b8154815260200190600101908083116108da575b5050505050613c97565b92915050565b6006805461090b9061587e565b80601f01602080910402602001604051908101604052809291908181526020018280546109379061587e565b80156109845780601f1061095957610100808354040283529160200191610984565b820191906000526020600020905b81548152906001019060200180831161096757829003601f168201915b505050505081565b60025460009060ff166109ba5760405162461bcd60e51b81526004016109b1906158b8565b60405180910390fd5b6109c2613f0c565b6014546001600160a01b03163314610a1c5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865206465706c6f79657200000000000060448201526064016109b1565b60195415610a5b5760405162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e48135a5b9d60a21b60448201526064016109b1565b610a63613f65565b601580546001600160a01b03191690556009546040516335313c2160e11b81526001600160a01b0390911690636a62784290610aa39033906004016154e4565b6020604051808303816000875af1158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190615865565b601981905560095460405133927f27eca3b28413ace90047223e775d01bfec4b39b666590555f818761ff53566c092610b2b926001600160a01b0390911691906158e1565b60405180910390a250601954610b4060018055565b90565b60025460ff16610b655760405162461bcd60e51b81526004016109b1906158b8565b610b6d613f0c565b600a54825114610bb25760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642070657263656e747360801b60448201526064016109b1565b600a54610bc0906001615910565b815114610bdf5760405162461bcd60e51b81526004016109b190615928565b6000805b600a548160ff161015610c2c57838160ff1681518110610c0557610c05615956565b602002602001015182610c189190615910565b915080610c248161596c565b915050610be3565b50600354811115610c8b5760405162461bcd60e51b8152602060048201526024808201527f546f74616c2070657263656e746167652063616e6e6f742065786365656420316044820152630303030360e41b60648201526084016109b1565b6000610cb2868685600081518110610ca557610ca5615956565b6020026020010151613fff565b90506000610cbe612db0565b90506000610ccb3361433b565b905060006002600354610cde9190615a6f565b60075460408051634cd2c83b60e01b8152905185926001600160a01b031691634cd2c83b9160048083019260209291908290030181865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190615865565b610d559087615a7e565b610d5f9190615a7e565b610d699190615a9d565b9050600760009054906101000a90046001600160a01b03166001600160a01b031663ba64248e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190615abf565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610e1a573d6000803e3d6000fd5b5060006002600354610e2c9190615a6f565b8360105487610e3b9190615a7e565b610e459190615a7e565b610e4f9190615a9d565b6015549091506001600160a01b0316610ed057806018600a5481548110610e7857610e78615956565b906000526020600020016000828254610e919190615910565b90915550670de0b6b3a76400009050610eaa8583615a7e565b610eb49190615a9d565b60176000828254610ec59190615910565b90915550610f0c9050565b6015546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610f0a573d6000803e3d6000fd5b505b610f168183615910565b610f209086615adc565b9450670de0b6b3a7640000610f358583615a7e565b610f3f9190615a9d565b60166000828254610f509190615910565b9091555050336000908152600d602052604081206001810154909103610fc957600a546001600160401b03811115610f8a57610f8a6150c7565b604051908082528060200260200182016040528015610fb3578160200160208202803683370190505b508051610fc7918391602090910190614e78565b505b600080600a546001600160401b03811115610fe657610fe66150c7565b60405190808252806020026020018201604052801561100f578160200160208202803683370190505b50905060005b600a548160ff16101561127e5760006003548d8360ff168151811061103c5761103c615956565b60200260200101518b61104f9190615a7e565b6110599190615a9d565b905080600003611069575061126c565b600554600b80546001600160a01b039092169160ff851690811061108f5761108f615956565b6000918252602090912001546001600160a01b03160361113957600560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110f957600080fd5b505af115801561110d573d6000803e3d6000fd5b505050505080838360ff168151811061112857611128615956565b6020026020010181815250506111b7565b61119581600b8460ff168154811061115357611153615956565b6000918252602090912001546001600160a01b0316308f611175876001615af3565b60ff168151811061118857611188615956565b6020026020010151614449565b838360ff16815181106111aa576111aa615956565b6020026020010181815250505b828260ff16815181106111cc576111cc615956565b6020026020010151856000018360ff16815481106111ec576111ec615956565b9060005260206000200160008282546112059190615910565b92505081905550828260ff168151811061122157611221615956565b6020026020010151600f8360ff168154811061123f5761123f615956565b9060005260206000200160008282546112589190615910565b9091555061126890508185615910565b9350505b806112768161596c565b915050611015565b506000670de0b6b3a76400006112948985615a7e565b61129e9190615a9d565b9050808460010160008282546112b49190615910565b909155503390507fe75ca9244dc39a5b3080920dd7b2eb2ce5f58b95da665a3d4fd11c89f7766302848e85856112ea8b8d615910565b6040516112fb959493929190615b18565b60405180910390a26003548a101561134557336108fc61131b858c615adc565b6040518115909202916000818181858888f19350505050158015611343573d6000803e3d6000fd5b505b5050505050505050505061135860018055565b50505050565b6015546001600160a01b031633148061138f575061137a61300e565b6001600160a01b0316336001600160a01b0316145b6113ab5760405162461bcd60e51b81526004016109b190615b58565b60075460405163350c910b60e21b8152600060048201526001600160a01b039091169063d432442c90602401602060405180830381865afa1580156113f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114189190615865565b8211158015611493575060075460405163350c910b60e21b8152600160048201526001600160a01b039091169063d432442c90602401602060405180830381865afa15801561146b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148f9190615865565b8111155b6114ea5760405162461bcd60e51b815260206004820152602260248201527f43616e6e6f742065786365656420666565206c696d6974206f6620666163746f604482015261727960f01b60648201526084016109b1565b6114f2613f65565b6010829055601181905560408051838152602081018390527f3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d153291015b60405180910390a15050565b6008546000906001600160a01b031633148061156057506009546001600160a01b031633145b61159e5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b98589b195908139195608a1b60448201526064016109b1565b50630a85bd0160e11b5b949350505050565b6001600160a01b0381166000908152600d60209081526040808320815181549384028101606090810184529281018481529294938493919291839183908389018282801561161d57602002820191906000526020600020905b815481526020019060010190808311611609575b505050505081526020016001820154815250509050806020015160000361168d57600a546001600160401b03811115611658576116586150c7565b604051908082528060200260200182016040528015611681578160200160208202803683370190505b50946000945092505050565b80516020909101519094909350915050565b6000818152600e6020908152604080832060010180548251818502810185019093528083526108f8938301828280156108ee57602002820191906000526020600020908154815260200190600101908083116108da575050505050613c97565b6000818152600e60209081526040808320815160608181018452825482526001830180548551818802810188019096528086529195879586959385830193919283018282801561176e57602002820191906000526020600020905b81548152602001906001019080831161175a575b50505050508152602001600282015481525050905080604001516000036117e3576001600a546001600160401b038111156117ab576117ab6150c7565b6040519080825280602002602001820160405280156117d4578160200160208202803683370190505b506000935093509350506117fa565b806000015181602001518260400151935093509350505b9193909250565b6060600a5460016118129190615910565b6001600160401b03811115611829576118296150c7565b60405190808252806020026020018201604052801561186257816020015b61184f614ec3565b8152602001906001900390816118475790505b509050826001600160a01b0385161561196057600c54600554604051632604e7a760e11b81526001600160a01b0392831692634c09cf4e926118af9289928b921690600390600401615b8f565b600060405180830381865afa1580156118cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118f49190810190615c18565b8260008151811061190757611907615956565b602002602001018190525060008260008151811061192757611927615956565b602002602001015160000151905080600182516119449190615adc565b8151811061195457611954615956565b60200260200101519150505b60005b600a548160ff161015611af75783518160ff161015611af7576000600354858360ff168151811061199657611996615956565b6020026020010151846119a99190615a7e565b6119b39190615a9d565b90508015806119fa5750600554600b80546001600160a01b039092169160ff85169081106119e3576119e3615956565b6000918252602090912001546001600160a01b0316145b15611a055750611ae5565b600c54600554600b80546001600160a01b0393841693634c09cf4e93869391169160ff8816908110611a3957611a39615956565b6000918252602090912001546040516001600160e01b031960e086901b168152611a749392916001600160a01b031690600390600401615b8f565b600060405180830381865afa158015611a91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ab99190810190615c18565b84611ac5846001615af3565b60ff1681518110611ad857611ad8615956565b6020026020010181905250505b80611aef8161596c565b915050611963565b50509392505050565b60025460ff16611b225760405162461bcd60e51b81526004016109b1906158b8565b611b2a613f0c565b336000908152600d602052604090206001810154611b5a5760405162461bcd60e51b81526004016109b190615d2c565b600a54611b68906001615910565b825114611b875760405162461bcd60e51b81526004016109b190615928565b6000805b600a54811015611d32576000836000018281548110611bac57611bac615956565b9060005260206000200154905080600f8381548110611bcd57611bcd615956565b906000526020600020016000828254611be69190615adc565b90915550508354849083908110611bff57611bff615956565b9060005260206000200154600003611c175750611d20565b600554600b80546000926001600160a01b0316919085908110611c3c57611c3c615956565b6000918252602090912001546001600160a01b031603611cba5750600554604051632e1a7d4d60e01b81526004810183905282916001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611c9d57600080fd5b505af1158015611cb1573d6000803e3d6000fd5b50505050611d11565b611d0e82600b8581548110611cd157611cd1615956565b9060005260206000200160009054906101000a90046001600160a01b0316888681518110611d0157611d01615956565b60200260200101516145ac565b90505b611d1b8185615910565b935050505b80611d2a81615d59565b915050611b8b565b50600080611d3f3361433b565b90506000611d4b612db0565b6001860154909150670de0b6b3a7640000611d668387615a7e565b611d709190615a9d565b111561204f576000818660010154670de0b6b3a76400008488611d939190615a7e565b611d9d9190615a9d565b611da79190615adc565b611db990670de0b6b3a7640000615a7e565b611dc39190615a9d565b905060006002600354611dd69190615a6f565b60075460408051634cd2c83b60e01b8152905187926001600160a01b031691634cd2c83b9160048083019260209291908290030181865afa158015611e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e439190615865565b611e4d9085615a7e565b611e579190615a7e565b611e619190615a9d565b9050600760009054906101000a90046001600160a01b03166001600160a01b031663ba64248e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eda9190615abf565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015611f12573d6000803e3d6000fd5b506002600354611f229190615a6f565b8460115484611f319190615a7e565b611f3b9190615a7e565b611f459190615a9d565b6015549095506001600160a01b0316611fc657846018600a5481548110611f6e57611f6e615956565b906000526020600020016000828254611f879190615910565b90915550670de0b6b3a76400009050611fa08487615a7e565b611faa9190615a9d565b60176000828254611fbb9190615910565b909155506120029050565b6015546040516001600160a01b039091169086156108fc029087906000818181858888f19350505050158015612000573d6000803e3d6000fd5b505b670de0b6b3a76400006120158487615a7e565b61201f9190615a9d565b601660008282546120309190615910565b9091555061204090508186615910565b61204a9087615adc565b955050505b60405133907fd4e556fd296fc0834606f2c7b26c79a95ca9d47e20661228079f52b2de00357b9061208590889088908890615d72565b60405180910390a2336000908152600d60205260408120906120a78282614eeb565b600182016000905550506120d887338689600a54815181106120cb576120cb615956565b6020026020010151614645565b505050505061088a60018055565b600f81815481106120f657600080fd5b600091825260209091200154905081565b60025460ff166121295760405162461bcd60e51b81526004016109b1906158b8565b612131613f0c565b336000908152600d60205260409020612148613f65565b600854604051632142170760e11b81526001600160a01b03909116906342842e0e9061217c90339030908790600401615dc7565b600060405180830381600087803b15801561219657600080fd5b505af11580156121aa573d6000803e3d6000fd5b5050600854604051630852cd8d60e31b8152600481018690526001600160a01b0390911692506342966c689150602401600060405180830381600087803b1580156121f457600080fd5b505af1158015612208573d6000803e3d6000fd5b5050506000838152600e602090815260408083208151606081018352815481526001820180548451818702810187019095528085529596509094919385810193929083018282801561227957602002820191906000526020600020905b815481526020019060010190808311612265575b50505091835250506002919091015460209091015282549091506000036122b55760208082015180516122af9285920190614e78565b50612331565b60005b600a548160ff16101561232f5781602001518160ff16815181106122de576122de615956565b6020026020010151836000018260ff16815481106122fe576122fe615956565b9060005260206000200160008282546123179190615910565b909155508190506123278161596c565b9150506122b8565b505b80604001518260010160008282546123499190615910565b90915550506020810151604080830151905133927f96bec10adb343aa10807f2b30b777bbe09e0fe1c8610fe422decfc71ba88ec9f9261238a928890615deb565b60405180910390a26000838152600e60205260408120818155906123b16001830182614eeb565b60028201600090555050505061088c60018055565b60025460ff166123e85760405162461bcd60e51b81526004016109b1906158b8565b6123f0613f0c565b60008111801561240257506003548111155b6124405760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c195c98d95b9d608a1b60448201526064016109b1565b336000908152600d6020526040902060018101546124705760405162461bcd60e51b81526004016109b190615d2c565b600061247b3361433b565b90506000612487612db0565b905060006124e4846000018054806020026020016040519081016040528092919081815260200182805480156108ee57602002820191906000526020600020908154815260200190600101908083116108da575050505050613c97565b90506000670de0b6b3a76400006124fb8484615a7e565b6125059190615a9d565b6001860154909150811160008161251d57600061252c565b600187015461252c9084615adc565b90506000600760009054906101000a90046001600160a01b03166001600160a01b031663ba64248e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a79190615abf565b90506000600760009054906101000a90046001600160a01b03166001600160a01b0316634cd2c83b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126229190615865565b9050600060026003546126359190615a6f565b8a600101546126449190615a7e565b90506000600a546001600160401b03811115612662576126626150c7565b60405190808252806020026020018201604052801561268b578160200160208202803683370190505b50905060005b600a548110156128c55760006003548e8e60000184815481106126b6576126b6615956565b90600052602060002001546126cb9190615a7e565b6126d59190615a9d565b9050808383815181106126ea576126ea615956565b60200260200101818152505060008089156127ff5760008e61270c8b86615a7e565b6127169190615a7e565b9050866127238983615a7e565b61272d9190615a9d565b9150612761600b868154811061274557612745615956565b6000918252602090912001546001600160a01b03168a846148f3565b86601154826127709190615a7e565b61277a9190615a9d565b6015549093506001600160a01b03166127c55782601886815481106127a1576127a1615956565b9060005260206000200160008282546127ba9190615910565b909155506127fd9050565b6127fd600b86815481106127db576127db615956565b6000918252602090912001546015546001600160a01b039182169116856148f3565b505b612845600b858154811061281557612815615956565b6000918252602090912001546001600160a01b031633836128368688615adc565b6128409190615adc565b6148f3565b828f600001858154811061285b5761285b615956565b9060005260206000200160008282546128749190615adc565b9250508190555082600f858154811061288f5761288f615956565b9060005260206000200160008282546128a89190615adc565b9250508190555050505080806128bd90615d59565b915050612691565b506000861561299157600354866128dc8f8c615a7e565b6128e69190615a7e565b6128f09190615a9d565b9050828b601154836129029190615a7e565b61290c9190615a7e565b6129169190615a9d565b6015549091506001600160a01b031661295d57670de0b6b3a764000061293c8b83615a7e565b6129469190615a9d565b601760008282546129579190615910565b90915550505b670de0b6b3a76400006129708b83615a7e565b61297a9190615a9d565b6016600082825461298b9190615910565b90915550505b60006003548e8e600101546129a69190615a7e565b6129b09190615a9d565b9050808d60010160008282546129c69190615adc565b909155505060405133907fc7261db8b412ba6a79185449eee1fb190f1ccdcd00dacebd6bad09b4e033b33f90612a0190869085908790615deb565b60405180910390a25050505050505050505050505061088c60018055565b600b8181548110612a2f57600080fd5b6000918252602090912001546001600160a01b0316905081565b612a51613be2565b60025460ff16612a735760405162461bcd60e51b81526004016109b1906158b8565b6001600160a01b038116612a995760405162461bcd60e51b81526004016109b190615e10565b60006001600160a01b0316816001600160a01b031663b381cf406040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b069190615abf565b6001600160a01b031603612b565760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b21039bbb0b81030b3b3b932b3b0ba37b960491b60448201526064016109b1565b600c80546001600160a01b0319166001600160a01b038316908117909155604080516302ce073d60e61b8152905163b381cf40916004808201926020929091908290030181865afa158015612baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd39190615abf565b600580546001600160a01b0319166001600160a01b03929092169190911790556040517feffeb6d84590144cbff5304be4487d09001a14ab33344037bafcf8129f1cb85190612c239083906154e4565b60405180910390a150565b612c36613be2565b612c4060006149b1565b565b612c4a613be2565b6001600160a01b038116612c705760405162461bcd60e51b81526004016109b190615e39565b600880546001600160a01b0319166001600160a01b0383161790556040517ff7b003cc430c1bd951f3513f1b4524bd8974b4ccf0f8173e04c8672c3174bea990612c239083906154e4565b60025460ff16612cdd5760405162461bcd60e51b81526004016109b1906158b8565b612ce5613f0c565b601580546001600160a01b03191633179055612cff613f65565b612d07614a01565b600954601954604051632142170760e11b81526001600160a01b03909216916342842e0e91612d3c9133913091600401615dc7565b600060405180830381600087803b158015612d5657600080fd5b505af1158015612d6a573d6000803e3d6000fd5b50506019546040519081523392507fbb06f8d9e44b84f4104ab4ebb7f6f8a690e4c48b21c28c34453cbbd5d268e87a91506020015b60405180910390a2612c4060018055565b6004546000906001600160a01b0316612dc95750600090565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e429190615e78565b50505091505080600003612e5857600091505090565b600480546040805163313ce56760e01b8152905184936000936001600160a01b03169263313ce56792818301926020928290030181865afa158015612ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec59190615ec8565b612ed39060ff166012615adc565b612ede90600a615eeb565b6115a89083615a7e565b60606018805480602002602001604051908101604052809291908181526020018280548015612f3657602002820191906000526020600020905b815481526020019060010190808311612f22575b5050505050905090565b6013546001600160a01b03163314612f965760405162461bcd60e51b815260206004820152601960248201527839b2ba29b2b93b34b1b2a4b733379d102327a92124a22222a760391b60448201526064016109b1565b6001600160a01b038216612fbc5760405162461bcd60e51b81526004016109b190615e10565b601380546001600160a01b0319166001600160a01b03841617905560128190556040517fc208076e24c8758b41e972b01aa2abe614d7962b6d0a645f0e57b4161dd5141c9061152e90849084906158e1565b6000546001600160a01b031690565b6015546001600160a01b031633148061304e575061303961300e565b6001600160a01b0316336001600160a01b0316145b61306a5760405162461bcd60e51b81526004016109b190615b58565b6001600160a01b0381166130b15760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081dd85b1b195d60921b60448201526064016109b1565b601580546001600160a01b0319166001600160a01b0383161790556040517f3d21e5a2b633291bd1ff5f9c654e402d063783c95759d2ea521b31fb30e4da4190612c239083906154e4565b60025460ff16156131455760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016109b1565b600061314f61300e565b6001600160a01b0316148061317c575061316761300e565b6001600160a01b0316336001600160a01b0316145b6131b65760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b60448201526064016109b1565b6005875111156132005760405162461bcd60e51b8152602060048201526015602482015274457863656564206d6178696d756d20746f6b656e7360581b60448201526064016109b1565b6002805460ff1916600117905588516132209060069060208c0190614f09565b50612710600355600480546001600160a01b0319908116730567f2323251f0aab15c8dfb1967e4e8a7d42aee178255600c80546001600160a01b038c16921682179055604080516302ce073d60e61b81529051919263b381cf409282820192602092908290030181865afa15801561329c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c09190615abf565b600580546001600160a01b03199081166001600160a01b03938416179091558851600a8190558651601055602080880151601155662386f26fc1000060125560138054735ac58191f3bbdf6d037c6c6201adc9f99c93c53a90851617905560148054841687861617905560158054841686861617905560078054339085161790556008805484168b8616179055600980549093169389169390931790915561336e91600b91908a0190614f7c565b50600a546001600160401b03811115613389576133896150c7565b6040519080825280602002602001820160405280156133b2578160200160208202803683370190505b5080516133c791600f91602090910190614e78565b50600a546133d6906001615910565b6001600160401b038111156133ed576133ed6150c7565b604051908082528060200260200182016040528015613416578160200160208202803683370190505b50805161342b91601891602090910190614e78565b50613435836149b1565b505050505050505050565b60025460ff166134625760405162461bcd60e51b81526004016109b1906158b8565b61346a613f0c565b6015546001600160a01b031633146134bd5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1037b832b930ba37b960511b60448201526064016109b1565b6134c5613f65565b601580546001600160a01b0319169055600954601954604051632142170760e11b81526001600160a01b03909216916342842e0e9161350a9130913391600401615dc7565b600060405180830381600087803b15801561352457600080fd5b505af1158015613538573d6000803e3d6000fd5b50506019546040519081523392507f7170d2ec5a07b199ad85a9a215df5614ccf55dd24983b06e9913141b12d549189150602001612d9f565b60025460009060ff166135965760405162461bcd60e51b81526004016109b1906158b8565b61359e613f0c565b336000908152600d6020526040902060018101546135ce5760405162461bcd60e51b81526004016109b190615d2c565b6135d6613f65565b6008546040516335313c2160e11b81526000916001600160a01b031690636a627842906136079033906004016154e4565b6020604051808303816000875af1158015613626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364a9190615865565b6000818152600e6020526040902083549192509061366e9060018301908590614fd1565b5060018084015460028301819055908255683635c9adc5dea00000111561369457600081555b69010f0cf064dd59200000816002015411156136af57600281555b336000908152600d60205260408120906136c98282614eeb565b506000600191820155600282015460405133927f23a7eea526d8a3a3e31ee796d6571345c8faf8fcfc6e509a67d85f97ffcd6de99261370d92918601918790615d72565b60405180910390a250915050610b4060018055565b61372a613be2565b6019541561377a5760405162461bcd60e51b815260206004820152601b60248201527f4465706c6f796572204e465420616c7265616479206d696e746564000000000060448201526064016109b1565b6001600160a01b0381166137a05760405162461bcd60e51b81526004016109b190615e39565b600980546001600160a01b0319166001600160a01b0383161790556040517fd9b677b9c9b93164c658b14fa5a5d48912dbd03c690acb1cff638697159aabcd90612c239083906154e4565b6060600a5460016137fc9190615910565b6001600160401b03811115613813576138136150c7565b60405190808252806020026020018201604052801561384c57816020015b613839614ec3565b8152602001906001900390816138315790505b50336000908152600d6020908152604080832081518154606094810282018501845292810183815295965093949092849284918401828280156138ae57602002820191906000526020600020905b81548152602001906001019080831161389a575b5050509183525050600191909101546020909101528051909150600090815b600a54811015613ab3578181815181106138e9576138e9615956565b602002602001015160000315613aa157600554600b80546001600160a01b03909216918390811061391c5761391c615956565b6000918252602090912001546001600160a01b0316036139625781818151811061394857613948615956565b60200260200101518361395b9190615910565b9250613aa1565b600c5482516001600160a01b0390911690634c09cf4e9084908490811061398b5761398b615956565b6020026020010151600b84815481106139a6576139a6615956565b6000918252602090912001546005546040516001600160e01b031960e086901b1681526139e793926001600160a01b03908116921690600390600401615b8f565b600060405180830381865afa158015613a04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a2c9190810190615c18565b858281518110613a3e57613a3e615956565b60200260200101819052506000858281518110613a5d57613a5d615956565b60200260200101516000015190508060018251613a7a9190615adc565b81518110613a8a57613a8a615956565b602002602001015184613a9d9190615910565b9350505b80613aab81615d59565b9150506138cd565b506001600160a01b03851615613b6457600c54600554604051632604e7a760e11b81526001600160a01b0392831692634c09cf4e92613aff928792909116908a90600390600401615b8f565b600060405180830381865afa158015613b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613b449190810190615c18565b84600a5481518110613b5857613b58615956565b60200260200101819052505b505050919050565b613b74613be2565b6001600160a01b038116613bd95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109b1565b61088c816149b1565b33613beb61300e565b6001600160a01b031614612c405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109b1565b6107ff8363a9059cbb60e01b8484604051602401613c609291906158e1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614b6e565b600080600c60009054906101000a90046001600160a01b03166001600160a01b0316636a2e87246040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d119190615865565b9050613d1b614ec3565b60005b600a548160ff161015613b6457848160ff1681518110613d4057613d40615956565b602002602001015160000315613efa57600554600b80546001600160a01b039092169160ff8416908110613d7657613d76615956565b6000918252602090912001546001600160a01b031603613dbf57848160ff1681518110613da557613da5615956565b602002602001015184613db89190615910565b9350613efa565b600c5485516001600160a01b0390911690634c09cf4e90879060ff8516908110613deb57613deb615956565b6020026020010151600b8460ff1681548110613e0957613e09615956565b6000918252602090912001546005546040516001600160e01b031960e086901b168152613e4a93926001600160a01b03908116921690600390600401615b8f565b600060405180830381865afa158015613e67573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e8f9190810190615c18565b80518051919350600091613ea590600190615adc565b81518110613eb557613eb5615956565b602002602001015190506000841115613eec57612710613ed58582615adc565b613edf9083615a7e565b613ee99190615a9d565b90505b613ef68186615910565b9450505b80613f048161596c565b915050613d1e565b600260015403613f5e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109b1565b6002600155565b601254341015613fc35760405162461bcd60e51b815260206004820152602360248201527f53686f756c642070617920736d616c6c2067617320746f2063616c6c206d65746044820152621a1bd960ea1b60648201526084016109b1565b6013546012546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561088c573d6000803e3d6000fd5b60006001600160a01b038416614016575034614334565b6007546040516373a2049760e11b81526000916001600160a01b03169063e744092e906140479088906004016154e4565b602060405180830381865afa158015614064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140889190615ec8565b905060008160ff16116140e95760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f74207a617020696e207769746820756e737570706f72746564207460448201526337b5b2b760e11b60648201526084016109b1565b6103e8841161412e5760405162461bcd60e51b8152602060048201526011602482015270139bdd08195b9bdd59da08185b5bdd5b9d607a1b60448201526064016109b1565b6141436001600160a01b038616333087614c40565b8060ff16600103614160576141598486856145ac565b9150614332565b600754604051635a0f4c8d60e11b81528593506000916001600160a01b03169063b41e991a906141949089906004016154e4565b602060405180830381865afa1580156141b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d59190615abf565b6005549091506001600160a01b039081169087160361425157600554604051632e1a7d4d60e01b8152600481018790526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561423457600080fd5b505af1158015614248573d6000803e3d6000fd5b50505050611af7565b60405163095ea7b360e01b81526001600160a01b0387169063095ea7b39061427f90849089906004016158e1565b6020604051808303816000875af115801561429e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c29190615ef7565b50604051632e1a7d4d60e01b8152600481018690526001600160a01b03821690632e1a7d4d906024016020604051808303816000875af115801561430a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061432e9190615865565b9250505b505b9392505050565b600080600760009054906101000a90046001600160a01b03166001600160a01b03166301a362a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015614391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143b59190615abf565b90506001600160a01b0381166143cf575050600354919050565b604051635f7d4b6760e11b81526001600160a01b0382169063befa96ce906143fb9086906004016154e4565b602060405180830381865afa158015614418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061443c9190615865565b6003546143349190615adc565b8381526040516370a0823160e01b815260009081906001600160a01b038616906370a082319061447d9087906004016154e4565b602060405180830381865afa15801561449a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144be9190615865565b600c5460405163298b2cd760e01b81529192506001600160a01b03169063298b2cd79088906144f39087908990600401615f19565b6000604051808303818588803b15801561450c57600080fd5b505af1158015614520573d6000803e3d6000fd5b50506040516370a0823160e01b8152600093506001600160a01b03891692506370a0823191506145549088906004016154e4565b602060405180830381865afa158015614571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145959190615865565b90506145a18282615adc565b979650505050505050565b828152600c546000906145cc906001600160a01b03858116911686614c61565b600c5460405163987b37bd60e01b815247916001600160a01b03169063987b37bd906145fe9086903090600401615f19565b600060405180830381600087803b15801561461857600080fd5b505af115801561462c573d6000803e3d6000fd5b50505050804761463c9190615adc565b95945050505050565b6001600160a01b03841661468f576040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015614689573d6000803e3d6000fd5b50611358565b6007546040516373a2049760e11b81526000916001600160a01b03169063e744092e906146c09088906004016154e4565b602060405180830381865afa1580156146dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147019190615ec8565b905060008160ff16116147565760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207a6170206f75742077697468207468697320746f6b656e000060448201526064016109b1565b8060ff166001036147735761476d83868685614449565b506148ec565b60055483906001600160a01b03908116908716036147f957600560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156147db57600080fd5b505af11580156147ef573d6000803e3d6000fd5b50505050506148d6565b600754604051635a0f4c8d60e11b81526000916001600160a01b03169063b41e991a9061482a908a906004016154e4565b602060405180830381865afa158015614847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061486b9190615abf565b9050806001600160a01b031663d0e30db0866040518263ffffffff1660e01b815260040160206040518083038185885af11580156148ad573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906148d29190615865565b9150505b6148ea6001600160a01b0387168683613c41565b505b5050505050565b6005546001600160a01b039081169084160361499d57600554604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561494f57600080fd5b505af1158015614963573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f19350505050158015611358573d6000803e3d6000fd5b6107ff6001600160a01b0384168383613c41565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b600a548111614b2f5760188181548110614a2057614a20615956565b906000526020600020015460000315614b1d57600a54811015614a9b57614a96600b8281548110614a5357614a53615956565b600091825260209091200154601554601880546001600160a01b03938416939092169185908110614a8657614a86615956565b90600052602060002001546148f3565b614afb565b601554601880546001600160a01b03909216916108fc919084908110614ac357614ac3615956565b90600052602060002001549081150290604051600060405180830381858888f19350505050158015614af9573d6000803e3d6000fd5b505b600060188281548110614b1057614b10615956565b6000918252602090912001555b80614b2781615d59565b915050614a04565b50600060178190556015546040516001600160a01b03909116917fac13ae50ed2f466efe15ec017279d84440c99a3e8df4f16e5cc459e6da5999a991a2565b6000614bc3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614d659092919063ffffffff16565b8051909150156107ff5780806020019051810190614be19190615ef7565b6107ff5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109b1565b611358846323b872dd60e01b858585604051602401613c6093929190615dc7565b801580614cdb5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015614cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cd99190615865565b155b614d465760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016109b1565b6107ff8363095ea7b360e01b8484604051602401613c609291906158e1565b60606115a8848460008585600080866001600160a01b03168587604051614d8c9190615f7e565b60006040518083038185875af1925050503d8060008114614dc9576040519150601f19603f3d011682016040523d82523d6000602084013e614dce565b606091505b50915091506145a18783838760608315614e49578251600003614e42576001600160a01b0385163b614e425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109b1565b50816115a8565b6115a88383815115614e5e5781518083602001fd5b8060405162461bcd60e51b81526004016109b19190615094565b828054828255906000526020600020908101928215614eb3579160200282015b82811115614eb3578251825591602001919060010190614e98565b50614ebf929150615011565b5090565b6040518060800160405280606081526020016060815260200160608152602001600081525090565b508054600082559060005260206000209081019061088c9190615011565b828054614f159061587e565b90600052602060002090601f016020900481019282614f375760008555614eb3565b82601f10614f5057805160ff1916838001178555614eb3565b82800160010185558215614eb35791820182811115614eb3578251825591602001919060010190614e98565b828054828255906000526020600020908101928215614eb3579160200282015b82811115614eb357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614f9c565b828054828255906000526020600020908101928215614eb35760005260206000209182015b82811115614eb3578254825591600101919060010190614ff6565b5b80821115614ebf5760008155600101615012565b6001600160a01b038116811461088c57600080fd5b803561504681615026565b919050565b60006020828403121561505d57600080fd5b813561433481615026565b60005b8381101561508357818101518382015260200161506b565b838111156113585750506000910152565b60208152600082518060208401526150b3816040850160208701615068565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156150ff576150ff6150c7565b60405290565b604051601f8201601f191681016001600160401b038111828210171561512d5761512d6150c7565b604052919050565b60006001600160401b0382111561514e5761514e6150c7565b5060051b60200190565b600082601f83011261516957600080fd5b8135602061517e61517983615135565b615105565b82815260059290921b8401810191818101908684111561519d57600080fd5b8286015b848110156151b857803583529183019183016151a1565b509695505050505050565b600082601f8301126151d457600080fd5b813560206151e461517983615135565b82815260059290921b8401810191818101908684111561520357600080fd5b8286015b848110156151b857803561521a81615026565b8352918301918301615207565b600082601f83011261523857600080fd5b8135602061524861517983615135565b82815260059290921b8401810191818101908684111561526757600080fd5b8286015b848110156151b85780356001600160401b038082111561528b5760008081fd5b908801906080828b03601f19018113156152a55760008081fd5b6152ad6150dd565b87840135815260408085013589830152606080860135858111156152d15760008081fd5b6152df8f8c838a01016151c3565b84840152509285013592848411156152f957600091508182fd5b6153078e8b868901016151c3565b9083015250865250505091830191830161526b565b6000806000806080858703121561533257600080fd5b843561533d81615026565b93506020850135925060408501356001600160401b038082111561536057600080fd5b61536c88838901615158565b9350606087013591508082111561538257600080fd5b5061538f87828801615227565b91505092959194509250565b600080604083850312156153ae57600080fd5b50508035926020909101359150565b60006001600160401b038311156153d6576153d66150c7565b6153e9601f8401601f1916602001615105565b90508281528383830111156153fd57600080fd5b828260208301376000602084830101529392505050565b6000806000806080858703121561542a57600080fd5b843561543581615026565b9350602085013561544581615026565b92506040850135915060608501356001600160401b0381111561546757600080fd5b8501601f8101871361547857600080fd5b61538f878235602084016153bd565b600081518084526020808501945080840160005b838110156154b75781518752958201959082019060010161549b565b509495945050505050565b6040815260006154d56040830185615487565b90508260208301529392505050565b6001600160a01b0391909116815260200190565b60006020828403121561550a57600080fd5b5035919050565b83815260606020820152600061552a6060830185615487565b9050826040830152949350505050565b60008060006060848603121561554f57600080fd5b833561555a81615026565b92506020840135915060408401356001600160401b0381111561557c57600080fd5b61558886828701615158565b9150509250925092565b600081518084526020808501945080840160005b838110156154b75781516001600160a01b0316875295820195908201906001016155a6565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561566957603f1989840301855281516080815181865261561882870182615487565b915050888201518582038a8701526156308282615592565b91505087820151858203898701526156488282615592565b606093840151969093019590955250948701949250908601906001016155f2565b509098975050505050505050565b6000806040838503121561568a57600080fd5b823561569581615026565b915060208301356001600160401b038111156156b057600080fd5b6156bc85828601615227565b9150509250929050565b6020815260006143346020830184615487565b600080604083850312156156ec57600080fd5b82356156f781615026565b946020939093013593505050565b600082601f83011261571657600080fd5b604051604081018181106001600160401b0382111715615738576157386150c7565b806040525080604084018581111561574f57600080fd5b845b81811015615769578035835260209283019201615751565b509195945050505050565b60008060008060008060008060006101408a8c03121561579357600080fd5b89356001600160401b03808211156157aa57600080fd5b818c0191508c601f8301126157be57600080fd5b6157cd8d8335602085016153bd565b9a506157db60208d0161503b565b995060408c01359150808211156157f157600080fd5b506157fe8c828d016151c3565b97505061580d60608b0161503b565b955061581b60808b0161503b565b945061582a8b60a08c01615705565b935061583860e08b0161503b565b92506158476101008b0161503b565b91506158566101208b0161503b565b90509295985092959850929598565b60006020828403121561587757600080fd5b5051919050565b600181811c9082168061589257607f821691505b6020821081036158b257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600f908201526e139bdd081a5b9a5d1a585b1a5e9959608a1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601160045260246000fd5b60008219821115615923576159236158fa565b500190565b602080825260149082015273496e76616c696420747261646520636f6e66696760601b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8103615982576159826158fa565b60010192915050565b600181815b808511156159c65781600019048211156159ac576159ac6158fa565b808516156159b957918102915b93841c9390800290615990565b509250929050565b6000826159dd575060016108f8565b816159ea575060006108f8565b8160018114615a005760028114615a0a57615a26565b60019150506108f8565b60ff841115615a1b57615a1b6158fa565b50506001821b6108f8565b5060208310610133831016604e8410600b8410161715615a49575081810a6108f8565b615a53838361598b565b8060001904821115615a6757615a676158fa565b029392505050565b600061433460ff8416836159ce565b6000816000190483118215151615615a9857615a986158fa565b500290565b600082615aba57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615ad157600080fd5b815161433481615026565b600082821015615aee57615aee6158fa565b500390565b600060ff821660ff84168060ff03821115615b1057615b106158fa565b019392505050565b85815260a060208201526000615b3160a0830187615487565b8281036040840152615b438187615487565b60608401959095525050608001529392505050565b6020808252601a908201527f43616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b600082601f830112615bc557600080fd5b81516020615bd561517983615135565b82815260059290921b84018101918181019086841115615bf457600080fd5b8286015b848110156151b8578051615c0b81615026565b8352918301918301615bf8565b60006020808385031215615c2b57600080fd5b82516001600160401b0380821115615c4257600080fd5b9084019060808287031215615c5657600080fd5b615c5e6150dd565b825182811115615c6d57600080fd5b8301601f81018813615c7e57600080fd5b8051615c8c61517982615135565b81815260059190911b8201860190868101908a831115615cab57600080fd5b928701925b82841015615cc957835182529287019290870190615cb0565b84525050508284015182811115615cdf57600080fd5b615ceb88828601615bb4565b85830152506040830151935081841115615d0457600080fd5b615d1087858501615bb4565b6040820152606083015160608201528094505050505092915050565b6020808252601390820152724e6f20617661696c61626c6520746f6b656e7360681b604082015260600190565b600060018201615d6b57615d6b6158fa565b5060010190565b6000606082016060835280865480835260808501915087600052602092508260002060005b82811015615db357815484529284019260019182019101615d97565b505050908301949094525060400152919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b606081526000615dfe6060830186615487565b60208301949094525060400152919050565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b6020808252600b908201526a125b9d985b1a590813919560aa1b604082015260600190565b805169ffffffffffffffffffff8116811461504657600080fd5b600080600080600060a08688031215615e9057600080fd5b615e9986615e5e565b9450602086015193506040860151925060608601519150615ebc60808701615e5e565b90509295509295909350565b600060208284031215615eda57600080fd5b815160ff8116811461433457600080fd5b600061433483836159ce565b600060208284031215615f0957600080fd5b8151801515811461433457600080fd5b60408152825160408201526020830151606082015260006040840151608080840152615f4860c0840182615592565b90506060850151603f198483030160a0850152615f658282615592565b9250505060018060a01b03831660208301529392505050565b60008251615f90818460208701615068565b919091019291505056fea26469706673582212209c2cd299cdb5fef55b3e8807e3d1d6f1edd96aaeff2a53756146871aa5d0035664736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "estimateEthforNft(uint256)": {
        "params": {
          "_tokenId": ": token Id of BrewlabsIndex NFT"
        }
      },
      "estimateEthforUser(address)": {
        "params": {
          "_user": ": user address"
        }
      },
      "initialize(string,address,address[],address,address,uint256[2],address,address,address)": {
        "params": {
          "_commissionWallet": ": index commission wallet",
          "_deployer": ": index deployer address",
          "_deployerNft": ": Deployer NFT address",
          "_fees": ": additional fee for deployer",
          "_indexNft": ": Index NFT address",
          "_name": ": index name",
          "_owner": ": index owner address",
          "_tokens": ": token list that user can buy in a transaction"
        }
      },
      "nftInfo(uint256)": {
        "params": {
          "_tokenId": ": owned tokenId"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueTokens(address)": {
        "params": {
          "_token": ": token address"
        }
      },
      "setFeeWallet(address)": {
        "params": {
          "_feeWallet": ": address to receive deposit/commission fee"
        }
      },
      "setFees(uint256,uint256)": {
        "params": {
          "_commissionFee": ": commission fee in point",
          "_depositfee": ": deposit fee in point"
        }
      },
      "setServiceInfo(address,uint256)": {
        "params": {
          "_addr": ": new treasury address",
          "_fee": ": percentage in point"
        }
      },
      "setSwapAggregator(address)": {
        "params": {
          "_aggregator": ": swap Aggregator address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userInfo(address)": {
        "params": {
          "_user": ": user address"
        }
      },
      "zapIn(address,uint256,uint256[],(uint256,uint256,address[],address[])[])": {
        "params": {
          "_percents": ": list of ETH allocation points to buy tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimTokens(uint256)": {
        "notice": "Claim tokens from contract.         If the user exits the index in a loss then there is no fee.         If the user exists the index in a profit, processing fee will be applied."
      },
      "estimateEthforNft(uint256)": {
        "notice": "Returns estimated eth amount that can get from NFT item."
      },
      "estimateEthforUser(address)": {
        "notice": "Returns estimated eth amount when user zapout."
      },
      "initialize(string,address,address[],address,address,uint256[2],address,address,address)": {
        "notice": "Initialize index contract."
      },
      "mintNft()": {
        "notice": "Once the user purchases the tokens through the contract, the user can then choose to at anytime  to mint an NFT that would represent the ownership of their tokens in the contract. The purpose of this is to allow users to mint an NFT that represents their value in the index and at their discretion,  transfer or sell that NFT to another wallet."
      },
      "nftInfo(uint256)": {
        "notice": "Returns tokens locked in NFT and ETH amount at the time when bought tokens."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "onERC721Received(address operator, address from, uint256 tokenId, bytes data) → bytes4 It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted."
      },
      "rescueTokens(address)": {
        "notice": "Emergency withdraw tokens."
      },
      "setFeeWallet(address)": {
        "notice": "Update fee wallet."
      },
      "setFees(uint256,uint256)": {
        "notice": "Update processing fee."
      },
      "setServiceInfo(address,uint256)": {
        "notice": "This method can be called by treasury.Update treasury wallet and performance fee."
      },
      "setSwapAggregator(address)": {
        "notice": "Update swap aggregator."
      },
      "stakeNft(uint256)": {
        "notice": "Stake the NFT back into the index to claim/zap out their tokens."
      },
      "userInfo(address)": {
        "notice": "Returns purchased tokens and ETH amount at the time when bought tokens."
      },
      "zapIn(address,uint256,uint256[],(uint256,uint256,address[],address[])[])": {
        "notice": "Buy tokens by paying ETH and lock tokens in contract.         When buy tokens, should pay processing fee(brewlabs fixed fee + deployer fee)."
      },
      "zapOut(address,(uint256,uint256,address[],address[])[])": {
        "notice": "Sale tokens from contract and claim ETH.         If the user exits the index in a loss then there is no fee.         If the user exists the index in a profit, processing fee will be applied."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 883,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1187,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 34923,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "isInitialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 34925,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "FEE_DENOMINATOR",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 34927,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "PRICE_FEED",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 34929,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "WNATIVE",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 34931,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 34934,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "factory",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IBrewlabsIndexFactory)34890"
      },
      {
        "astId": 34937,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "indexNft",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC721)4743"
      },
      {
        "astId": 34940,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "deployerNft",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC721)4743"
      },
      {
        "astId": 34942,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "NUM_TOKENS",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 34946,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "tokens",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_contract(IERC20)3296)dyn_storage"
      },
      {
        "astId": 34949,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "swapAggregator",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IBrewlabsAggregator)43402"
      },
      {
        "astId": 34960,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "users",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(UserInfo)34955_storage)"
      },
      {
        "astId": 34973,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "nfts",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(NftInfo)34968_storage)"
      },
      {
        "astId": 34976,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "totalStaked",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 34978,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "depositFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 34980,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "commissionFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 34982,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "performanceFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 34984,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "treasury",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 34986,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "deployer",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 34988,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "commissionWallet",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 34990,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "totalEarned",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 34992,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "totalCommissions",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 34995,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "pendingCommissions",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 34997,
        "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
        "label": "deployerNftId",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)3296)dyn_storage": {
        "base": "t_contract(IERC20)3296",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBrewlabsAggregator)43402": {
        "encoding": "inplace",
        "label": "contract IBrewlabsAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(IBrewlabsIndexFactory)34890": {
        "encoding": "inplace",
        "label": "contract IBrewlabsIndexFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3296": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)4743": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)34955_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BrewlabsIndex.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)34955_storage"
      },
      "t_mapping(t_uint256,t_struct(NftInfo)34968_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BrewlabsIndex.NftInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NftInfo)34968_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NftInfo)34968_storage": {
        "encoding": "inplace",
        "label": "struct BrewlabsIndex.NftInfo",
        "members": [
          {
            "astId": 34962,
            "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 34965,
            "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 34967,
            "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
            "label": "usdAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)34955_storage": {
        "encoding": "inplace",
        "label": "struct BrewlabsIndex.UserInfo",
        "members": [
          {
            "astId": 34952,
            "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
            "label": "amounts",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 34954,
            "contract": "contracts/indexes/BrewlabsIndex.sol:BrewlabsIndex",
            "label": "usdAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}