{
  "address": "0x14FA731AED865Bef6d1C459894B8e5DC60D8e4c0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "BaseURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdminRole",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetMinterRole",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OPERATOR_FILTER_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getIndexInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_useOnChain",
          "type": "bool"
        }
      ],
      "name": "setTokenBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useOnChainMetadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ba80cd3ada7839f41c1ef8d351cc2b020ac48a48cdfc659772beade42075eeb",
  "receipt": {
    "to": null,
    "from": "0xCD3b71D65D1f03F0b2c5a4e67A17347dc71141f7",
    "contractAddress": "0x14FA731AED865Bef6d1C459894B8e5DC60D8e4c0",
    "transactionIndex": 69,
    "gasUsed": "3028638",
    "logsBloom": "0x
    "blockHash": "0x11d0d25a818535c631db6c751977fdf13fa9f2359f01326744ab79100434c2af",
    "transactionHash": "0x5ba80cd3ada7839f41c1ef8d351cc2b020ac48a48cdfc659772beade42075eeb",
    "logs": [
      {
        "transactionIndex": 69,
        "blockNumber": 29551121,
        "transactionHash": "0x5ba80cd3ada7839f41c1ef8d351cc2b020ac48a48cdfc659772beade42075eeb",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x86d03f430c7616021073d7a71766f632f1ce19f289aa989534d9f4732253eb59",
          "0x00000000000000000000000014fa731aed865bef6d1c459894b8e5dc60d8e4c0",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 179,
        "blockHash": "0x11d0d25a818535c631db6c751977fdf13fa9f2359f01326744ab79100434c2af"
      },
      {
        "transactionIndex": 69,
        "blockNumber": 29551121,
        "transactionHash": "0x5ba80cd3ada7839f41c1ef8d351cc2b020ac48a48cdfc659772beade42075eeb",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x0038c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e8",
          "0x00000000000000000000000014fa731aed865bef6d1c459894b8e5dc60d8e4c0",
          "0x0000000000000000000000003cc6cdda760b79bafa08df41ecfa224f810dceb6",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 180,
        "blockHash": "0x11d0d25a818535c631db6c751977fdf13fa9f2359f01326744ab79100434c2af"
      },
      {
        "transactionIndex": 69,
        "blockNumber": 29551121,
        "transactionHash": "0x5ba80cd3ada7839f41c1ef8d351cc2b020ac48a48cdfc659772beade42075eeb",
        "address": "0x14FA731AED865Bef6d1C459894B8e5DC60D8e4c0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cd3b71d65d1f03f0b2c5a4e67a17347dc71141f7"
        ],
        "data": "0x",
        "logIndex": 181,
        "blockHash": "0x11d0d25a818535c631db6c751977fdf13fa9f2359f01326744ab79100434c2af"
      }
    ],
    "blockNumber": 29551121,
    "cumulativeGasUsed": "10809697",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0260463c7c8cf539a785493e0f5dd08b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdminRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetMinterRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIndexInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_useOnChain\",\"type\":\"bool\"}],\"name\":\"setTokenBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useOnChainMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/indexes/BrewlabsDeployerNft.sol\":\"BrewlabsDeployerNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/indexes/BrewlabsDeployerNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport {ERC721, ERC721Enumerable, IERC721} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {DefaultOperatorFilterer} from \\\"operator-filter-registry/src/DefaultOperatorFilterer.sol\\\";\\r\\n\\r\\ninterface IBrewlabsIndex {\\r\\n    function deployer() external view returns (address);\\r\\n    function NUM_TOKENS() external view returns (uint256);\\r\\n    function tokens(uint256 index) external view returns (address);\\r\\n    function totalEarned() external view returns (uint256);\\r\\n    function totalCommissions() external view returns (uint256);\\r\\n    function getPendingCommissions() external view returns (uint256[] memory);\\r\\n}\\r\\n\\r\\ncontract BrewlabsDeployerNft is ERC721Enumerable, DefaultOperatorFilterer, Ownable {\\r\\n    using Strings for uint256;\\r\\n    using Strings for address;\\r\\n\\r\\n    uint256 private tokenIndex;\\r\\n    string private _tokenBaseURI = \\\"\\\";\\r\\n\\r\\n    address public admin;\\r\\n    bool public useOnChainMetadata = true;\\r\\n\\r\\n    mapping(address => bool) public isMinter;\\r\\n    mapping(uint256 => address) private indexes;\\r\\n\\r\\n    event BaseURIUpdated(string uri);\\r\\n    event SetAdminRole(address newAdmin);\\r\\n    event SetMinterRole(address minter, bool status);\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(isMinter[msg.sender], \\\"BrewlabsDeployerNft: Caller is not minter\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == owner() || msg.sender == admin, \\\"BrewlabsDeployerNft: Caller is not admin or owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() ERC721(\\\"Brewlabs Deployer Nft\\\", \\\"BDY\\\") {\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    function mint(address to) external onlyMinter returns (uint256) {\\r\\n        tokenIndex++;\\r\\n\\r\\n        _safeMint(to, tokenIndex);\\r\\n        indexes[tokenIndex] = msg.sender;\\r\\n        return tokenIndex;\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        override(ERC721, IERC721)\\r\\n        onlyAllowedOperatorApproval(operator)\\r\\n    {\\r\\n        super.setApprovalForAll(operator, approved);\\r\\n    }\\r\\n\\r\\n    function approve(address operator, uint256 tokenId)\\r\\n        public\\r\\n        override(ERC721, IERC721)\\r\\n        onlyAllowedOperatorApproval(operator)\\r\\n    {\\r\\n        super.approve(operator, tokenId);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 tokenId)\\r\\n        public\\r\\n        override(ERC721, IERC721)\\r\\n        onlyAllowedOperator(from)\\r\\n    {\\r\\n        super.transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId)\\r\\n        public\\r\\n        override(ERC721, IERC721)\\r\\n        onlyAllowedOperator(from)\\r\\n    {\\r\\n        super.safeTransferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\\r\\n        public\\r\\n        override(ERC721, IERC721)\\r\\n        onlyAllowedOperator(from)\\r\\n    {\\r\\n        super.safeTransferFrom(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    function setAdmin(address newAdmin) external onlyOwner {\\r\\n        require(newAdmin != address(0x0), \\\"BrewlabsDeployerNft: invalid address\\\");\\r\\n        admin = newAdmin;\\r\\n        emit SetAdminRole(newAdmin);\\r\\n    }\\r\\n\\r\\n    function setMinterRole(address minter, bool status) external onlyAdmin {\\r\\n        require(minter != address(0x0), \\\"BrewlabsDeployerNft: invalid address\\\");\\r\\n        isMinter[minter] = status;\\r\\n        emit SetMinterRole(minter, status);\\r\\n    }\\r\\n\\r\\n    function setTokenBaseURI(string memory _uri, bool _useOnChain) external onlyOwner {\\r\\n        _tokenBaseURI = _uri;\\r\\n        useOnChainMetadata = _useOnChain;\\r\\n        emit BaseURIUpdated(_uri);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"BrewlabsDeployerNft: URI query for nonexistent token\\\");\\r\\n\\r\\n        // If flag for generating metadata is false, concatenate the baseURI and tokenId (via abi.encodePacked).\\r\\n        if (!useOnChainMetadata) return string(abi.encodePacked(_baseURI(), \\\"/\\\", tokenId.toString()));\\r\\n\\r\\n        string memory base = _baseURI();\\r\\n        string memory description = string(\\r\\n            abi.encodePacked(\\r\\n                '\\\"description\\\": \\\"Brewlabs Deployer NFT\\\\'s represent a user\\\\'s ownership of deposit fees and performance commissions generated by an index.\\\"'\\r\\n            )\\r\\n        );\\r\\n\\r\\n        IBrewlabsIndex _index = IBrewlabsIndex(indexes[tokenId]);\\r\\n        address deployer = _index.deployer();\\r\\n        uint256 totalCommissions = _index.totalCommissions();\\r\\n        uint256 totalEarned = _index.totalEarned();\\r\\n\\r\\n        uint256 level = 1;\\r\\n        if (totalCommissions <= 100 ether) level = 0;\\r\\n        if (totalCommissions > 500 ether) level = 2;\\r\\n\\r\\n        string[3] memory levels = [\\\"Rare\\\", \\\"Epic\\\", \\\"Legendary\\\"];\\r\\n        string memory attributes = '\\\"attributes\\\":[';\\r\\n        attributes = string(\\r\\n            abi.encodePacked(\\r\\n                attributes,\\r\\n                '{\\\"trait_type\\\": \\\"Level\\\", \\\"value\\\":\\\"',\\r\\n                levels[level],\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\":\\\"Index\\\", \\\"value\\\":\\\"',\\r\\n                address(_index).toHexString(),\\r\\n                '\\\"},' '{\\\"trait_type\\\":\\\"Deployer\\\", \\\"value\\\":\\\"',\\r\\n                deployer.toHexString(),\\r\\n                '\\\"},' '{\\\"trait_type\\\":\\\"Earned Fee\\\", \\\"value\\\":\\\"',\\r\\n                totalEarned.toString(),\\r\\n                '\\\"},' '{\\\"trait_type\\\":\\\"Pending Fee\\\", \\\"value\\\":\\\"',\\r\\n                totalCommissions.toString(),\\r\\n                '\\\"},'\\r\\n            )\\r\\n        );\\r\\n\\r\\n        uint256 numTokens = _index.NUM_TOKENS();\\r\\n        uint256[] memory pendings = _index.getPendingCommissions();\\r\\n\\r\\n        for (uint256 i = 0; i < numTokens; i++) {\\r\\n            address _token = _index.tokens(i);\\r\\n            if (i > 0) {\\r\\n                attributes = string(abi.encodePacked(attributes, \\\",\\\"));\\r\\n            }\\r\\n\\r\\n            attributes = string(\\r\\n                abi.encodePacked(\\r\\n                    attributes,\\r\\n                    '{\\\"trait_type\\\":\\\"Token',\\r\\n                    uint256(i).toString(),\\r\\n                    '\\\", \\\"value\\\":\\\"',\\r\\n                    _token.toHexString(),\\r\\n                    '\\\"},',\\r\\n                    '{\\\"trait_type\\\":\\\"Amount',\\r\\n                    uint256(i).toString(),\\r\\n                    '\\\", \\\"value\\\":\\\"',\\r\\n                    pendings[i].toString(),\\r\\n                    '\\\"}'\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        attributes = string(\\r\\n            abi.encodePacked(\\r\\n                attributes, ', {\\\"trait_type\\\":\\\"BNB Amount\\\", \\\"value\\\":\\\"', pendings[numTokens].toString(), '\\\"}]'\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // If both are set, concatenate the baseURI (via abi.encodePacked).\\r\\n        string memory metadata = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"name\\\": \\\"',\\r\\n                name(),\\r\\n                \\\" #\\\",\\r\\n                tokenId.toString(),\\r\\n                '\\\", ',\\r\\n                description,\\r\\n                ', \\\"external_url\\\": \\\"https://earn.brewlabs.info/indexes\\\"',\\r\\n                ', \\\"image\\\": \\\"',\\r\\n                base,\\r\\n                \\\"/\\\",\\r\\n                levels[level],\\r\\n                \\\".png\\\",\\r\\n                '\\\", ',\\r\\n                attributes,\\r\\n                \\\"}\\\"\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", _base64(bytes(metadata))));\\r\\n    }\\r\\n\\r\\n    function getIndexInfo(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (address, address, uint256, uint256, uint256[] memory)\\r\\n    {\\r\\n        address deployer = IBrewlabsIndex(indexes[tokenId]).deployer();\\r\\n        uint256 earned = IBrewlabsIndex(indexes[tokenId]).totalEarned();\\r\\n        uint256 commissions = IBrewlabsIndex(indexes[tokenId]).totalCommissions();\\r\\n        uint256[] memory pCommissions = IBrewlabsIndex(indexes[tokenId]).getPendingCommissions();\\r\\n\\r\\n        return (indexes[tokenId], deployer, earned, commissions, pCommissions);\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _tokenBaseURI;\\r\\n    }\\r\\n\\r\\n    function _base64(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {} lt(dataPtr, endPtr) {} {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\r\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x77efe9f321be38279db8127d7f3a41005fd012759e4d2f6a39ee61a8d880a723\",\"license\":\"MIT\"},\"operator-filter-registry/src/DefaultOperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {OperatorFilterer} from \\\"./OperatorFilterer.sol\\\";\\n\\n/**\\n * @title  DefaultOperatorFilterer\\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\\n */\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\\n}\\n\",\"keccak256\":\"0x1d6616260cb0fa3a3c56c9db3c29b1db6037d0f30049dca5e94b4896999df991\",\"license\":\"MIT\"},\"operator-filter-registry/src/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba\",\"license\":\"MIT\"},\"operator-filter-registry/src/OperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\n\\n/**\\n * @title  OperatorFilterer\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\n *         registrant's entries in the OperatorFilterRegistry.\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\n */\\nabstract contract OperatorFilterer {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (subscribe) {\\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcdf355575d1bd6730eab09060a2fbb2d59f2c9b92de8383d35960ecc1bfc0db3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040819052600060808190526200001b91600c916200028c565b50600d805460ff60a01b1916600160a01b1790553480156200003c57600080fd5b50604080518082018252601581527f427265776c616273204465706c6f796572204e6674000000000000000000000060208083019182528351808501909452600384526242445960e81b908401528151733cc6cdda760b79bafa08df41ecfa224f810dceb693600193929091620000b6916000916200028c565b508051620000cc9060019060208401906200028c565b5050506daaeb6d7670e522a718067333cd4e3b15620002145780156200016257604051633e9f1edf60e11b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e90637d3e3dbe906044015b600060405180830381600087803b1580156200014357600080fd5b505af115801562000158573d6000803e3d6000fd5b5050505062000214565b6001600160a01b03821615620001b35760405163a0af290360e01b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e9063a0af29039060440162000128565b604051632210724360e11b81523060048201526daaeb6d7670e522a718067333cd4e90634420e48690602401600060405180830381600087803b158015620001fa57600080fd5b505af11580156200020f573d6000803e3d6000fd5b505050505b50620002229050336200023a565b600d80546001600160a01b031916331790556200036e565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200029a9062000332565b90600052602060002090601f016020900481019282620002be576000855562000309565b82601f10620002d957805160ff191683800117855562000309565b8280016001018555821562000309579182015b8281111562000309578251825591602001919060010190620002ec565b50620003179291506200031b565b5090565b5b808211156200031757600081556001016200031c565b600181811c908216806200034757607f821691505b6020821081036200036857634e487b7160e01b600052602260045260246000fd5b50919050565b613290806200037e6000396000f3fe608060405234801561001057600080fd5b50600436106101845760003560e01c806370a08231116100d9578063b81155b511610087578063b81155b514610338578063b88d4fde1461035c578063c87b56dd1461036f578063cb177b1e14610382578063e985e9c514610395578063f2fde38b146103a8578063f851a440146103bb57600080fd5b806370a08231146102ba578063715018a6146102cd5780638da5cb5b146102d557806395d89b41146102e657806398f68703146102ee578063a22cb46514610302578063aa271e1a1461031557600080fd5b806341f434341161013657806341f434341461023357806342842e0e146102485780634f6ccce71461025b578063603ac57e1461026e5780636352211e146102815780636a62784214610294578063704b6c02146102a757600080fd5b806301ffc9a71461018957806306fdde03146101b1578063081812fc146101c6578063095ea7b3146101e657806318160ddd146101fb57806323b872dd1461020d5780632f745c5914610220575b600080fd5b61019c61019736600461256f565b6103ce565b60405190151581526020015b60405180910390f35b6101b96103f9565b6040516101a891906125e4565b6101d96101d43660046125f7565b61048b565b6040516101a89190612610565b6101f96101f4366004612639565b6104b2565b005b6008545b6040519081526020016101a8565b6101f961021b366004612665565b6104cb565b6101ff61022e366004612639565b6104f6565b6101d96daaeb6d7670e522a718067333cd4e81565b6101f9610256366004612665565b610591565b6101ff6102693660046125f7565b6105b6565b6101f961027c366004612751565b610649565b6101d961028f3660046125f7565b6106b8565b6101ff6102a23660046127b6565b6106ed565b6101f96102b53660046127b6565b6107a8565b6101ff6102c83660046127b6565b61082c565b6101f96108b2565b600a546001600160a01b03166101d9565b6101b96108c6565b600d5461019c90600160a01b900460ff1681565b6101f96103103660046127d3565b6108d5565b61019c6103233660046127b6565b600e6020526000908152604090205460ff1681565b61034b6103463660046125f7565b6108e9565b6040516101a8959493929190612801565b6101f961036a366004612873565b610b12565b6101b961037d3660046125f7565b610b3f565b6101f96103903660046127d3565b6111f7565b61019c6103a33660046128f2565b611302565b6101f96103b63660046127b6565b611330565b600d546101d9906001600160a01b031681565b60006001600160e01b0319821663780e9d6360e01b14806103f357506103f3826113a9565b92915050565b60606000805461040890612920565b80601f016020809104026020016040519081016040528092919081815260200182805461043490612920565b80156104815780601f1061045657610100808354040283529160200191610481565b820191906000526020600020905b81548152906001019060200180831161046457829003601f168201915b5050505050905090565b6000610496826113f9565b506000908152600460205260409020546001600160a01b031690565b816104bc8161141e565b6104c683836114ce565b505050565b826001600160a01b03811633146104e5576104e53361141e565b6104f08484846115de565b50505050565b60006105018361082c565b82106105685760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084015b60405180910390fd5b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b826001600160a01b03811633146105ab576105ab3361141e565b6104f084848461160f565b60006105c160085490565b82106106245760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161055f565b600882815481106106375761063761295a565b90600052602060002001549050919050565b61065161162a565b815161066490600c9060208501906124c0565b50600d805460ff60a01b1916600160a01b831515021790556040517f6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad906106ac9084906125e4565b60405180910390a15050565b6000818152600260205260408120546001600160a01b0316806103f35760405162461bcd60e51b815260040161055f90612970565b336000908152600e602052604081205460ff1661075e5760405162461bcd60e51b815260206004820152602960248201527f427265776c6162734465706c6f7965724e66743a2043616c6c6572206973206e60448201526837ba1036b4b73a32b960b91b606482015260840161055f565b600b805490600061076e836129b8565b919050555061077f82600b54611684565b50600b80546000908152600f6020526040902080546001600160a01b0319163317905554919050565b6107b061162a565b6001600160a01b0381166107d65760405162461bcd60e51b815260040161055f906129d1565b600d80546001600160a01b0319166001600160a01b0383161790556040517fbd2df64b329431f17e2f7f3c2a6665a1ba4a9517cf5d636d675496bbcc94538b90610821908390612610565b60405180910390a150565b60006001600160a01b0382166108965760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161055f565b506001600160a01b031660009081526003602052604090205490565b6108ba61162a565b6108c460006116a2565b565b60606001805461040890612920565b816108df8161141e565b6104c683836116f4565b6000818152600f60209081526040808320548151631abe729160e31b8152915184938493849360609385936001600160a01b039092169263d5f394889260048083019391928290030181865afa158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190612a15565b6000888152600f60209081526040808320548151636dfa8d9960e01b8152915194955092936001600160a01b0390931692636dfa8d99926004808401939192918290030181865afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190612a32565b6000898152600f60209081526040808320548151638792e30360e01b8152915194955092936001600160a01b0390931692638792e303926004808401939192918290030181865afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190612a32565b60008a8152600f60205260408082205481516303b48be560e51b8152915193945091926001600160a01b03909216916376917ca09160048082019286929091908290030181865afa158015610abe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae69190810190612a4b565b60009a8b52600f6020526040909a20546001600160a01b03169a93999298509096509094509092505050565b836001600160a01b0381163314610b2c57610b2c3361141e565b610b38858585856116ff565b5050505050565b6060610b4a82611731565b610bb35760405162461bcd60e51b815260206004820152603460248201527f427265776c6162734465706c6f7965724e66743a20555249207175657279206660448201527337b9103737b732bc34b9ba32b73a103a37b5b2b760611b606482015260840161055f565b600d54600160a01b900460ff16610bfc57610bcc61174e565b610bd58361175d565b604051602001610be6929190612b0c565b6040516020818303038152906040529050919050565b6000610c0661174e565b90506000604051602001610cc0907f226465736372697074696f6e223a2022427265776c616273204465706c6f796581527f72204e4654277320726570726573656e74206120757365722773206f776e657260208201527f73686970206f66206465706f736974206665657320616e6420706572666f726d60408201527f616e636520636f6d6d697373696f6e732067656e65726174656420627920616e6060820152671034b73232bc171160c11b608082015260880190565b60408051601f198184030181528282526000878152600f602090815283822054631abe729160e31b865293519295506001600160a01b03909316939092849263d5f394889260048082019392918290030181865afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a9190612a15565b90506000826001600160a01b0316638792e3036040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190612a32565b90506000836001600160a01b0316636dfa8d996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190612a32565b9050600168056bc75e2d631000008311610e2e575060005b681b1ae4d6e2ef500000831115610e43575060025b6040805160a081018252600460608201818152635261726560e01b6080840152825282518084018452908152634570696360e01b602082810191909152808301919091528251808401845260098152684c6567656e6461727960b81b81830152828401528251808401909352600e83526d2261747472696275746573223a5b60901b908301529080828460038110610edd57610edd61295a565b6020020151610ef4896001600160a01b03166117ef565b610f06896001600160a01b03166117ef565b610f0f8861175d565b610f188a61175d565b604051602001610f2d96959493929190612b48565b60405160208183030381529060405290506000876001600160a01b0316634149db486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa29190612a32565b90506000886001600160a01b03166376917ca06040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fe4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261100c9190810190612a4b565b905060005b82811015611130576040516327b2595f60e11b8152600481018290526000906001600160a01b038c1690634f64b2be90602401602060405180830381865afa158015611061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110859190612a15565b905081156110b0578460405160200161109e9190612ce9565b60405160208183030381529060405294505b846110ba8361175d565b6110cc836001600160a01b03166117ef565b6110d58561175d565b6110f78787815181106110ea576110ea61295a565b602002602001015161175d565b60405160200161110b959493929190612d0e565b6040516020818303038152906040529450508080611128906129b8565b915050611011565b50826111478284815181106110ea576110ea61295a565b604051602001611158929190612df7565b604051602081830303815290604052925060006111736103f9565b61117c8f61175d565b8c8e888a600381106111905761119061295a565b6020020151886040516020016111ab96959493929190612e70565b60405160208183030381529060405290506111c581611805565b6040516020016111d59190612fa6565b6040516020818303038152906040529c50505050505050505050505050919050565b600a546001600160a01b031633148061121a5750600d546001600160a01b031633145b6112805760405162461bcd60e51b815260206004820152603160248201527f427265776c6162734465706c6f7965724e66743a2043616c6c6572206973206e60448201527037ba1030b236b4b71037b91037bbb732b960791b606482015260840161055f565b6001600160a01b0382166112a65760405162461bcd60e51b815260040161055f906129d1565b6001600160a01b0382166000818152600e6020908152604091829020805460ff19168515159081179091558251938452908301527f6b0f890a293c8f56a7635ad061c90250965b8af8e8bdbeb56d434b97281a746291016106ac565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61133861162a565b6001600160a01b03811661139d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161055f565b6113a6816116a2565b50565b60006001600160e01b031982166380ac58cd60e01b14806113da57506001600160e01b03198216635b5e139f60e01b145b806103f357506301ffc9a760e01b6001600160e01b03198316146103f3565b61140281611731565b6113a65760405162461bcd60e51b815260040161055f90612970565b6daaeb6d7670e522a718067333cd4e3b156113a657604051633185c44d60e21b81523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190612feb565b6113a65780604051633b79c77360e21b815260040161055f9190612610565b60006114d9826106b8565b9050806001600160a01b0316836001600160a01b0316036115465760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161055f565b336001600160a01b038216148061156257506115628133611302565b6115d45760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161055f565b6104c6838361196b565b6115e833826119d9565b6116045760405162461bcd60e51b815260040161055f90613008565b6104c6838383611a38565b6104c683838360405180602001604052806000815250610b12565b600a546001600160a01b031633146108c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161055f565b61169e828260405180602001604052806000815250611ba9565b5050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61169e338383611bdc565b61170933836119d9565b6117255760405162461bcd60e51b815260040161055f90613008565b6104f084848484611ca6565b6000908152600260205260409020546001600160a01b0316151590565b6060600c805461040890612920565b6060600061176a83611cd9565b60010190506000816001600160401b03811115611789576117896126a6565b6040519080825280601f01601f1916602001820160405280156117b3576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846117bd57509392505050565b60606103f36001600160a01b0383166014611db1565b6060815160000361182457505060408051602081019091526000815290565b600060405180606001604052806040815260200161321b60409139905060006003845160026118539190613055565b61185d919061306d565b61186890600461308f565b90506000611877826020613055565b6001600160401b0381111561188e5761188e6126a6565b6040519080825280601f01601f1916602001820160405280156118b8576020820181803683370190505b509050818152600183018586518101602084015b818310156119265760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016118cc565b60038951066001811461194057600281146119515761195d565b613d3d60f01b60011983015261195d565b603d60f81b6000198301525b509398975050505050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119a0826106b8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806119e5836106b8565b9050806001600160a01b0316846001600160a01b03161480611a0c5750611a0c8185611302565b80611a305750836001600160a01b0316611a258461048b565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a4b826106b8565b6001600160a01b031614611a715760405162461bcd60e51b815260040161055f906130ae565b6001600160a01b038216611ad35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161055f565b611ae08383836001611f53565b826001600160a01b0316611af3826106b8565b6001600160a01b031614611b195760405162461bcd60e51b815260040161055f906130ae565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611bb3838361208c565b611bc060008484846121a7565b6104c65760405162461bcd60e51b815260040161055f906130f3565b816001600160a01b0316836001600160a01b031603611c395760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161055f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611cb1848484611a38565b611cbd848484846121a7565b6104f05760405162461bcd60e51b815260040161055f906130f3565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611d185772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611d44576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611d6257662386f26fc10000830492506010015b6305f5e1008310611d7a576305f5e100830492506008015b6127108310611d8e57612710830492506004015b60648310611da0576064830492506002015b600a83106103f35760010192915050565b60606000611dc083600261308f565b611dcb906002613055565b6001600160401b03811115611de257611de26126a6565b6040519080825280601f01601f191660200182016040528015611e0c576020820181803683370190505b509050600360fc1b81600081518110611e2757611e2761295a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e5657611e5661295a565b60200101906001600160f81b031916908160001a9053506000611e7a84600261308f565b611e85906001613055565b90505b6001811115611efd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611eb957611eb961295a565b1a60f81b828281518110611ecf57611ecf61295a565b60200101906001600160f81b031916908160001a90535060049490941c93611ef681613145565b9050611e88565b508315611f4c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161055f565b9392505050565b611f5f848484846122a8565b6001811115611fce5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b606482015260840161055f565b816001600160a01b03851661202a5761202581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61204d565b836001600160a01b0316856001600160a01b03161461204d5761204d8582612330565b6001600160a01b03841661206957612064816123cd565b610b38565b846001600160a01b0316846001600160a01b031614610b3857610b38848261247c565b6001600160a01b0382166120e25760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161055f565b6120eb81611731565b156121085760405162461bcd60e51b815260040161055f9061315c565b612116600083836001611f53565b61211f81611731565b1561213c5760405162461bcd60e51b815260040161055f9061315c565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561229d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906121eb903390899088908890600401613193565b6020604051808303816000875af1925050508015612226575060408051601f3d908101601f19168201909252612223918101906131d0565b60015b612283573d808015612254576040519150601f19603f3d011682016040523d82523d6000602084013e612259565b606091505b50805160000361227b5760405162461bcd60e51b815260040161055f906130f3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a30565b506001949350505050565b60018111156104f0576001600160a01b038416156122ee576001600160a01b038416600090815260036020526040812080548392906122e89084906131ed565b90915550505b6001600160a01b038316156104f0576001600160a01b03831660009081526003602052604081208054839290612325908490613055565b909155505050505050565b6000600161233d8461082c565b61234791906131ed565b60008381526007602052604090205490915080821461239a576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906123df906001906131ed565b600083815260096020526040812054600880549394509092849081106124075761240761295a565b9060005260206000200154905080600883815481106124285761242861295a565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061246057612460613204565b6001900381819060005260206000200160009055905550505050565b60006124878361082c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546124cc90612920565b90600052602060002090601f0160209004810192826124ee5760008555612534565b82601f1061250757805160ff1916838001178555612534565b82800160010185558215612534579182015b82811115612534578251825591602001919060010190612519565b50612540929150612544565b5090565b5b808211156125405760008155600101612545565b6001600160e01b0319811681146113a657600080fd5b60006020828403121561258157600080fd5b8135611f4c81612559565b60005b838110156125a757818101518382015260200161258f565b838111156104f05750506000910152565b600081518084526125d081602086016020860161258c565b601f01601f19169290920160200192915050565b602081526000611f4c60208301846125b8565b60006020828403121561260957600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146113a657600080fd5b6000806040838503121561264c57600080fd5b823561265781612624565b946020939093013593505050565b60008060006060848603121561267a57600080fd5b833561268581612624565b9250602084013561269581612624565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156126e4576126e46126a6565b604052919050565b60006001600160401b03831115612705576127056126a6565b612718601f8401601f19166020016126bc565b905082815283838301111561272c57600080fd5b828260208301376000602084830101529392505050565b80151581146113a657600080fd5b6000806040838503121561276457600080fd5b82356001600160401b0381111561277a57600080fd5b8301601f8101851361278b57600080fd5b61279a858235602084016126ec565b92505060208301356127ab81612743565b809150509250929050565b6000602082840312156127c857600080fd5b8135611f4c81612624565b600080604083850312156127e657600080fd5b82356127f181612624565b915060208301356127ab81612743565b6001600160a01b0386811682528516602080830191909152604082018590526060820184905260a06080830181905283519083018190526000918481019160c085019190845b8181101561286357845184529382019392820192600101612847565b50919a9950505050505050505050565b6000806000806080858703121561288957600080fd5b843561289481612624565b935060208501356128a481612624565b92506040850135915060608501356001600160401b038111156128c657600080fd5b8501601f810187136128d757600080fd5b6128e6878235602084016126ec565b91505092959194509250565b6000806040838503121561290557600080fd5b823561291081612624565b915060208301356127ab81612624565b600181811c9082168061293457607f821691505b60208210810361295457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600182016129ca576129ca6129a2565b5060010190565b60208082526024908201527f427265776c6162734465706c6f7965724e66743a20696e76616c6964206164646040820152637265737360e01b606082015260800190565b600060208284031215612a2757600080fd5b8151611f4c81612624565b600060208284031215612a4457600080fd5b5051919050565b60006020808385031215612a5e57600080fd5b82516001600160401b0380821115612a7557600080fd5b818501915085601f830112612a8957600080fd5b815181811115612a9b57612a9b6126a6565b8060051b9150612aac8483016126bc565b8181529183018401918481019088841115612ac657600080fd5b938501935b83851015612ae457845182529385019390850190612acb565b98975050505050505050565b60008151612b0281856020860161258c565b9290920192915050565b60008351612b1e81846020880161258c565b602f60f81b9083019081528351612b3c81600184016020880161258c565b01600101949350505050565b60008751612b5a818460208c0161258c565b80830190507f7b2274726169745f74797065223a20224c6576656c222c202276616c7565223a8152601160f91b60208201528751612b9f816021840160208c0161258c565b62089f4b60ea1b602192909101918201527f7b2274726169745f74797065223a22496e646578222c202276616c7565223a2260248201528651612be9816044840160208b0161258c565b7f227d2c7b2274726169745f74797065223a224465706c6f796572222c202276616044929091019182015265363ab2911d1160d11b60648201528551612c3681606a840160208a0161258c565b612cdb612ccc612cc6612c8b612c85606a868801017f227d2c7b2274726169745f74797065223a224561726e656420466565222c20228152673b30b63ab2911d1160c11b602082015260280190565b8a612af0565b7f227d2c7b2274726169745f74797065223a2250656e64696e6720466565222c20815268113b30b63ab2911d1160b91b602082015260290190565b87612af0565b62089f4b60ea1b815260030190565b9a9950505050505050505050565b60008251612cfb81846020870161258c565b600b60fa1b920191825250600101919050565b600086516020612d218285838c0161258c565b733d913a3930b4ba2fba3cb832911d112a37b5b2b760611b9184019182528751612d518160148501848c0161258c565b6b111610113b30b63ab2911d1160a11b6014939091019283018190528751612d7e81848601858c0161258c565b62089f4b60ea1b930182810193909352741ec89d1c985a5d17dd1e5c19488e88905b5bdd5b9d605a1b60238401528651612dbe81603886018a860161258c565b60389301928301528451612dd8816044850184890161258c565b61227d60f01b9201604481019290925250604601979650505050505050565b60008351612e0981846020880161258c565b80830190507f2c207b2274726169745f74797065223a22424e4220416d6f756e74222c20227681526630b63ab2911d1160c91b60208201528351612e5481602784016020880161258c565b62227d5d60e81b60279290910191820152602a01949350505050565b693d913730b6b2911d101160b11b81528651600090612e9681600a850160208c0161258c565b61202360f01b600a918401918201528751612eb881600c840160208c0161258c565b6201116160ed1b600c92909101918201528651612edc81600f840160208b0161258c565b7f2c202265787465726e616c5f75726c223a202268747470733a2f2f6561726e2e600f929091019182015275313932bbb630b1399734b7333797b4b73232bc32b99160511b602f8201526b16101134b6b0b3b2911d101160a11b6045820152612f99612f8c612f86612f77612f67612c85612f5a605188018d612af0565b602f60f81b815260010190565b632e706e6760e01b815260040190565b6201116160ed1b815260030190565b86612af0565b607d60f81b815260010190565b9998505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612fde81601d85016020870161258c565b91909101601d0192915050565b600060208284031215612ffd57600080fd5b8151611f4c81612743565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008219821115613068576130686129a2565b500190565b60008261308a57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156130a9576130a96129a2565b500290565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600081613154576131546129a2565b506000190190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906131c6908301846125b8565b9695505050505050565b6000602082840312156131e257600080fd5b8151611f4c81612559565b6000828210156131ff576131ff6129a2565b500390565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220d226e86848d3a8c698a284fa4d823adf8b4b0f5d971f813ab376c60d49da146464736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101845760003560e01c806370a08231116100d9578063b81155b511610087578063b81155b514610338578063b88d4fde1461035c578063c87b56dd1461036f578063cb177b1e14610382578063e985e9c514610395578063f2fde38b146103a8578063f851a440146103bb57600080fd5b806370a08231146102ba578063715018a6146102cd5780638da5cb5b146102d557806395d89b41146102e657806398f68703146102ee578063a22cb46514610302578063aa271e1a1461031557600080fd5b806341f434341161013657806341f434341461023357806342842e0e146102485780634f6ccce71461025b578063603ac57e1461026e5780636352211e146102815780636a62784214610294578063704b6c02146102a757600080fd5b806301ffc9a71461018957806306fdde03146101b1578063081812fc146101c6578063095ea7b3146101e657806318160ddd146101fb57806323b872dd1461020d5780632f745c5914610220575b600080fd5b61019c61019736600461256f565b6103ce565b60405190151581526020015b60405180910390f35b6101b96103f9565b6040516101a891906125e4565b6101d96101d43660046125f7565b61048b565b6040516101a89190612610565b6101f96101f4366004612639565b6104b2565b005b6008545b6040519081526020016101a8565b6101f961021b366004612665565b6104cb565b6101ff61022e366004612639565b6104f6565b6101d96daaeb6d7670e522a718067333cd4e81565b6101f9610256366004612665565b610591565b6101ff6102693660046125f7565b6105b6565b6101f961027c366004612751565b610649565b6101d961028f3660046125f7565b6106b8565b6101ff6102a23660046127b6565b6106ed565b6101f96102b53660046127b6565b6107a8565b6101ff6102c83660046127b6565b61082c565b6101f96108b2565b600a546001600160a01b03166101d9565b6101b96108c6565b600d5461019c90600160a01b900460ff1681565b6101f96103103660046127d3565b6108d5565b61019c6103233660046127b6565b600e6020526000908152604090205460ff1681565b61034b6103463660046125f7565b6108e9565b6040516101a8959493929190612801565b6101f961036a366004612873565b610b12565b6101b961037d3660046125f7565b610b3f565b6101f96103903660046127d3565b6111f7565b61019c6103a33660046128f2565b611302565b6101f96103b63660046127b6565b611330565b600d546101d9906001600160a01b031681565b60006001600160e01b0319821663780e9d6360e01b14806103f357506103f3826113a9565b92915050565b60606000805461040890612920565b80601f016020809104026020016040519081016040528092919081815260200182805461043490612920565b80156104815780601f1061045657610100808354040283529160200191610481565b820191906000526020600020905b81548152906001019060200180831161046457829003601f168201915b5050505050905090565b6000610496826113f9565b506000908152600460205260409020546001600160a01b031690565b816104bc8161141e565b6104c683836114ce565b505050565b826001600160a01b03811633146104e5576104e53361141e565b6104f08484846115de565b50505050565b60006105018361082c565b82106105685760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084015b60405180910390fd5b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b826001600160a01b03811633146105ab576105ab3361141e565b6104f084848461160f565b60006105c160085490565b82106106245760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161055f565b600882815481106106375761063761295a565b90600052602060002001549050919050565b61065161162a565b815161066490600c9060208501906124c0565b50600d805460ff60a01b1916600160a01b831515021790556040517f6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad906106ac9084906125e4565b60405180910390a15050565b6000818152600260205260408120546001600160a01b0316806103f35760405162461bcd60e51b815260040161055f90612970565b336000908152600e602052604081205460ff1661075e5760405162461bcd60e51b815260206004820152602960248201527f427265776c6162734465706c6f7965724e66743a2043616c6c6572206973206e60448201526837ba1036b4b73a32b960b91b606482015260840161055f565b600b805490600061076e836129b8565b919050555061077f82600b54611684565b50600b80546000908152600f6020526040902080546001600160a01b0319163317905554919050565b6107b061162a565b6001600160a01b0381166107d65760405162461bcd60e51b815260040161055f906129d1565b600d80546001600160a01b0319166001600160a01b0383161790556040517fbd2df64b329431f17e2f7f3c2a6665a1ba4a9517cf5d636d675496bbcc94538b90610821908390612610565b60405180910390a150565b60006001600160a01b0382166108965760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161055f565b506001600160a01b031660009081526003602052604090205490565b6108ba61162a565b6108c460006116a2565b565b60606001805461040890612920565b816108df8161141e565b6104c683836116f4565b6000818152600f60209081526040808320548151631abe729160e31b8152915184938493849360609385936001600160a01b039092169263d5f394889260048083019391928290030181865afa158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190612a15565b6000888152600f60209081526040808320548151636dfa8d9960e01b8152915194955092936001600160a01b0390931692636dfa8d99926004808401939192918290030181865afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190612a32565b6000898152600f60209081526040808320548151638792e30360e01b8152915194955092936001600160a01b0390931692638792e303926004808401939192918290030181865afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190612a32565b60008a8152600f60205260408082205481516303b48be560e51b8152915193945091926001600160a01b03909216916376917ca09160048082019286929091908290030181865afa158015610abe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae69190810190612a4b565b60009a8b52600f6020526040909a20546001600160a01b03169a93999298509096509094509092505050565b836001600160a01b0381163314610b2c57610b2c3361141e565b610b38858585856116ff565b5050505050565b6060610b4a82611731565b610bb35760405162461bcd60e51b815260206004820152603460248201527f427265776c6162734465706c6f7965724e66743a20555249207175657279206660448201527337b9103737b732bc34b9ba32b73a103a37b5b2b760611b606482015260840161055f565b600d54600160a01b900460ff16610bfc57610bcc61174e565b610bd58361175d565b604051602001610be6929190612b0c565b6040516020818303038152906040529050919050565b6000610c0661174e565b90506000604051602001610cc0907f226465736372697074696f6e223a2022427265776c616273204465706c6f796581527f72204e4654277320726570726573656e74206120757365722773206f776e657260208201527f73686970206f66206465706f736974206665657320616e6420706572666f726d60408201527f616e636520636f6d6d697373696f6e732067656e65726174656420627920616e6060820152671034b73232bc171160c11b608082015260880190565b60408051601f198184030181528282526000878152600f602090815283822054631abe729160e31b865293519295506001600160a01b03909316939092849263d5f394889260048082019392918290030181865afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a9190612a15565b90506000826001600160a01b0316638792e3036040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190612a32565b90506000836001600160a01b0316636dfa8d996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190612a32565b9050600168056bc75e2d631000008311610e2e575060005b681b1ae4d6e2ef500000831115610e43575060025b6040805160a081018252600460608201818152635261726560e01b6080840152825282518084018452908152634570696360e01b602082810191909152808301919091528251808401845260098152684c6567656e6461727960b81b81830152828401528251808401909352600e83526d2261747472696275746573223a5b60901b908301529080828460038110610edd57610edd61295a565b6020020151610ef4896001600160a01b03166117ef565b610f06896001600160a01b03166117ef565b610f0f8861175d565b610f188a61175d565b604051602001610f2d96959493929190612b48565b60405160208183030381529060405290506000876001600160a01b0316634149db486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa29190612a32565b90506000886001600160a01b03166376917ca06040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fe4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261100c9190810190612a4b565b905060005b82811015611130576040516327b2595f60e11b8152600481018290526000906001600160a01b038c1690634f64b2be90602401602060405180830381865afa158015611061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110859190612a15565b905081156110b0578460405160200161109e9190612ce9565b60405160208183030381529060405294505b846110ba8361175d565b6110cc836001600160a01b03166117ef565b6110d58561175d565b6110f78787815181106110ea576110ea61295a565b602002602001015161175d565b60405160200161110b959493929190612d0e565b6040516020818303038152906040529450508080611128906129b8565b915050611011565b50826111478284815181106110ea576110ea61295a565b604051602001611158929190612df7565b604051602081830303815290604052925060006111736103f9565b61117c8f61175d565b8c8e888a600381106111905761119061295a565b6020020151886040516020016111ab96959493929190612e70565b60405160208183030381529060405290506111c581611805565b6040516020016111d59190612fa6565b6040516020818303038152906040529c50505050505050505050505050919050565b600a546001600160a01b031633148061121a5750600d546001600160a01b031633145b6112805760405162461bcd60e51b815260206004820152603160248201527f427265776c6162734465706c6f7965724e66743a2043616c6c6572206973206e60448201527037ba1030b236b4b71037b91037bbb732b960791b606482015260840161055f565b6001600160a01b0382166112a65760405162461bcd60e51b815260040161055f906129d1565b6001600160a01b0382166000818152600e6020908152604091829020805460ff19168515159081179091558251938452908301527f6b0f890a293c8f56a7635ad061c90250965b8af8e8bdbeb56d434b97281a746291016106ac565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61133861162a565b6001600160a01b03811661139d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161055f565b6113a6816116a2565b50565b60006001600160e01b031982166380ac58cd60e01b14806113da57506001600160e01b03198216635b5e139f60e01b145b806103f357506301ffc9a760e01b6001600160e01b03198316146103f3565b61140281611731565b6113a65760405162461bcd60e51b815260040161055f90612970565b6daaeb6d7670e522a718067333cd4e3b156113a657604051633185c44d60e21b81523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190612feb565b6113a65780604051633b79c77360e21b815260040161055f9190612610565b60006114d9826106b8565b9050806001600160a01b0316836001600160a01b0316036115465760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161055f565b336001600160a01b038216148061156257506115628133611302565b6115d45760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161055f565b6104c6838361196b565b6115e833826119d9565b6116045760405162461bcd60e51b815260040161055f90613008565b6104c6838383611a38565b6104c683838360405180602001604052806000815250610b12565b600a546001600160a01b031633146108c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161055f565b61169e828260405180602001604052806000815250611ba9565b5050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61169e338383611bdc565b61170933836119d9565b6117255760405162461bcd60e51b815260040161055f90613008565b6104f084848484611ca6565b6000908152600260205260409020546001600160a01b0316151590565b6060600c805461040890612920565b6060600061176a83611cd9565b60010190506000816001600160401b03811115611789576117896126a6565b6040519080825280601f01601f1916602001820160405280156117b3576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846117bd57509392505050565b60606103f36001600160a01b0383166014611db1565b6060815160000361182457505060408051602081019091526000815290565b600060405180606001604052806040815260200161321b60409139905060006003845160026118539190613055565b61185d919061306d565b61186890600461308f565b90506000611877826020613055565b6001600160401b0381111561188e5761188e6126a6565b6040519080825280601f01601f1916602001820160405280156118b8576020820181803683370190505b509050818152600183018586518101602084015b818310156119265760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016118cc565b60038951066001811461194057600281146119515761195d565b613d3d60f01b60011983015261195d565b603d60f81b6000198301525b509398975050505050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119a0826106b8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806119e5836106b8565b9050806001600160a01b0316846001600160a01b03161480611a0c5750611a0c8185611302565b80611a305750836001600160a01b0316611a258461048b565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a4b826106b8565b6001600160a01b031614611a715760405162461bcd60e51b815260040161055f906130ae565b6001600160a01b038216611ad35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161055f565b611ae08383836001611f53565b826001600160a01b0316611af3826106b8565b6001600160a01b031614611b195760405162461bcd60e51b815260040161055f906130ae565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611bb3838361208c565b611bc060008484846121a7565b6104c65760405162461bcd60e51b815260040161055f906130f3565b816001600160a01b0316836001600160a01b031603611c395760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161055f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611cb1848484611a38565b611cbd848484846121a7565b6104f05760405162461bcd60e51b815260040161055f906130f3565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611d185772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611d44576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611d6257662386f26fc10000830492506010015b6305f5e1008310611d7a576305f5e100830492506008015b6127108310611d8e57612710830492506004015b60648310611da0576064830492506002015b600a83106103f35760010192915050565b60606000611dc083600261308f565b611dcb906002613055565b6001600160401b03811115611de257611de26126a6565b6040519080825280601f01601f191660200182016040528015611e0c576020820181803683370190505b509050600360fc1b81600081518110611e2757611e2761295a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e5657611e5661295a565b60200101906001600160f81b031916908160001a9053506000611e7a84600261308f565b611e85906001613055565b90505b6001811115611efd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611eb957611eb961295a565b1a60f81b828281518110611ecf57611ecf61295a565b60200101906001600160f81b031916908160001a90535060049490941c93611ef681613145565b9050611e88565b508315611f4c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161055f565b9392505050565b611f5f848484846122a8565b6001811115611fce5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b606482015260840161055f565b816001600160a01b03851661202a5761202581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61204d565b836001600160a01b0316856001600160a01b03161461204d5761204d8582612330565b6001600160a01b03841661206957612064816123cd565b610b38565b846001600160a01b0316846001600160a01b031614610b3857610b38848261247c565b6001600160a01b0382166120e25760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161055f565b6120eb81611731565b156121085760405162461bcd60e51b815260040161055f9061315c565b612116600083836001611f53565b61211f81611731565b1561213c5760405162461bcd60e51b815260040161055f9061315c565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561229d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906121eb903390899088908890600401613193565b6020604051808303816000875af1925050508015612226575060408051601f3d908101601f19168201909252612223918101906131d0565b60015b612283573d808015612254576040519150601f19603f3d011682016040523d82523d6000602084013e612259565b606091505b50805160000361227b5760405162461bcd60e51b815260040161055f906130f3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a30565b506001949350505050565b60018111156104f0576001600160a01b038416156122ee576001600160a01b038416600090815260036020526040812080548392906122e89084906131ed565b90915550505b6001600160a01b038316156104f0576001600160a01b03831660009081526003602052604081208054839290612325908490613055565b909155505050505050565b6000600161233d8461082c565b61234791906131ed565b60008381526007602052604090205490915080821461239a576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906123df906001906131ed565b600083815260096020526040812054600880549394509092849081106124075761240761295a565b9060005260206000200154905080600883815481106124285761242861295a565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061246057612460613204565b6001900381819060005260206000200160009055905550505050565b60006124878361082c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546124cc90612920565b90600052602060002090601f0160209004810192826124ee5760008555612534565b82601f1061250757805160ff1916838001178555612534565b82800160010185558215612534579182015b82811115612534578251825591602001919060010190612519565b50612540929150612544565b5090565b5b808211156125405760008155600101612545565b6001600160e01b0319811681146113a657600080fd5b60006020828403121561258157600080fd5b8135611f4c81612559565b60005b838110156125a757818101518382015260200161258f565b838111156104f05750506000910152565b600081518084526125d081602086016020860161258c565b601f01601f19169290920160200192915050565b602081526000611f4c60208301846125b8565b60006020828403121561260957600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146113a657600080fd5b6000806040838503121561264c57600080fd5b823561265781612624565b946020939093013593505050565b60008060006060848603121561267a57600080fd5b833561268581612624565b9250602084013561269581612624565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156126e4576126e46126a6565b604052919050565b60006001600160401b03831115612705576127056126a6565b612718601f8401601f19166020016126bc565b905082815283838301111561272c57600080fd5b828260208301376000602084830101529392505050565b80151581146113a657600080fd5b6000806040838503121561276457600080fd5b82356001600160401b0381111561277a57600080fd5b8301601f8101851361278b57600080fd5b61279a858235602084016126ec565b92505060208301356127ab81612743565b809150509250929050565b6000602082840312156127c857600080fd5b8135611f4c81612624565b600080604083850312156127e657600080fd5b82356127f181612624565b915060208301356127ab81612743565b6001600160a01b0386811682528516602080830191909152604082018590526060820184905260a06080830181905283519083018190526000918481019160c085019190845b8181101561286357845184529382019392820192600101612847565b50919a9950505050505050505050565b6000806000806080858703121561288957600080fd5b843561289481612624565b935060208501356128a481612624565b92506040850135915060608501356001600160401b038111156128c657600080fd5b8501601f810187136128d757600080fd5b6128e6878235602084016126ec565b91505092959194509250565b6000806040838503121561290557600080fd5b823561291081612624565b915060208301356127ab81612624565b600181811c9082168061293457607f821691505b60208210810361295457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600182016129ca576129ca6129a2565b5060010190565b60208082526024908201527f427265776c6162734465706c6f7965724e66743a20696e76616c6964206164646040820152637265737360e01b606082015260800190565b600060208284031215612a2757600080fd5b8151611f4c81612624565b600060208284031215612a4457600080fd5b5051919050565b60006020808385031215612a5e57600080fd5b82516001600160401b0380821115612a7557600080fd5b818501915085601f830112612a8957600080fd5b815181811115612a9b57612a9b6126a6565b8060051b9150612aac8483016126bc565b8181529183018401918481019088841115612ac657600080fd5b938501935b83851015612ae457845182529385019390850190612acb565b98975050505050505050565b60008151612b0281856020860161258c565b9290920192915050565b60008351612b1e81846020880161258c565b602f60f81b9083019081528351612b3c81600184016020880161258c565b01600101949350505050565b60008751612b5a818460208c0161258c565b80830190507f7b2274726169745f74797065223a20224c6576656c222c202276616c7565223a8152601160f91b60208201528751612b9f816021840160208c0161258c565b62089f4b60ea1b602192909101918201527f7b2274726169745f74797065223a22496e646578222c202276616c7565223a2260248201528651612be9816044840160208b0161258c565b7f227d2c7b2274726169745f74797065223a224465706c6f796572222c202276616044929091019182015265363ab2911d1160d11b60648201528551612c3681606a840160208a0161258c565b612cdb612ccc612cc6612c8b612c85606a868801017f227d2c7b2274726169745f74797065223a224561726e656420466565222c20228152673b30b63ab2911d1160c11b602082015260280190565b8a612af0565b7f227d2c7b2274726169745f74797065223a2250656e64696e6720466565222c20815268113b30b63ab2911d1160b91b602082015260290190565b87612af0565b62089f4b60ea1b815260030190565b9a9950505050505050505050565b60008251612cfb81846020870161258c565b600b60fa1b920191825250600101919050565b600086516020612d218285838c0161258c565b733d913a3930b4ba2fba3cb832911d112a37b5b2b760611b9184019182528751612d518160148501848c0161258c565b6b111610113b30b63ab2911d1160a11b6014939091019283018190528751612d7e81848601858c0161258c565b62089f4b60ea1b930182810193909352741ec89d1c985a5d17dd1e5c19488e88905b5bdd5b9d605a1b60238401528651612dbe81603886018a860161258c565b60389301928301528451612dd8816044850184890161258c565b61227d60f01b9201604481019290925250604601979650505050505050565b60008351612e0981846020880161258c565b80830190507f2c207b2274726169745f74797065223a22424e4220416d6f756e74222c20227681526630b63ab2911d1160c91b60208201528351612e5481602784016020880161258c565b62227d5d60e81b60279290910191820152602a01949350505050565b693d913730b6b2911d101160b11b81528651600090612e9681600a850160208c0161258c565b61202360f01b600a918401918201528751612eb881600c840160208c0161258c565b6201116160ed1b600c92909101918201528651612edc81600f840160208b0161258c565b7f2c202265787465726e616c5f75726c223a202268747470733a2f2f6561726e2e600f929091019182015275313932bbb630b1399734b7333797b4b73232bc32b99160511b602f8201526b16101134b6b0b3b2911d101160a11b6045820152612f99612f8c612f86612f77612f67612c85612f5a605188018d612af0565b602f60f81b815260010190565b632e706e6760e01b815260040190565b6201116160ed1b815260030190565b86612af0565b607d60f81b815260010190565b9998505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612fde81601d85016020870161258c565b91909101601d0192915050565b600060208284031215612ffd57600080fd5b8151611f4c81612743565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008219821115613068576130686129a2565b500190565b60008261308a57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156130a9576130a96129a2565b500290565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600081613154576131546129a2565b506000190190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906131c6908301846125b8565b9695505050505050565b6000602082840312156131e257600080fd5b8151611f4c81612559565b6000828210156131ff576131ff6129a2565b500390565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220d226e86848d3a8c698a284fa4d823adf8b4b0f5d971f813ab376c60d49da146464736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3708,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3710,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3714,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3718,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3722,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3728,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4776,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4780,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4783,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4787,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 883,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 32452,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "tokenIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 32455,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "_tokenBaseURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 32457,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "admin",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 32460,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "useOnChainMetadata",
        "offset": 20,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 32464,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "isMinter",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 32468,
        "contract": "contracts/indexes/BrewlabsDeployerNft.sol:BrewlabsDeployerNft",
        "label": "indexes",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}